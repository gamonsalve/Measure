
Measure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800bdd0  0800bdd0  0001bdd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3d0  0800c3d0  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3d0  0800c3d0  0001c3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3d8  0800c3d8  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3d8  0800c3d8  0001c3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3dc  0800c3dc  0001c3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800c3e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008fe4  20000200  0800c5e0  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200091e4  0800c5e0  000291e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157c9  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000287a  00000000  00000000  000359f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00038278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  00039578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223da  00000000  00000000  0003a770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016931  00000000  00000000  0005cb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce76c  00000000  00000000  0007347b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141be7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063a4  00000000  00000000  00141c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bdb4 	.word	0x0800bdb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800bdb4 	.word	0x0800bdb4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b974 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468e      	mov	lr, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4694      	mov	ip, r2
 8000cea:	d969      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b152      	cbz	r2, 8000d08 <__udivmoddi4+0x30>
 8000cf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d02:	ea41 0e03 	orr.w	lr, r1, r3
 8000d06:	4094      	lsls	r4, r2
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	0c21      	lsrs	r1, r4, #16
 8000d0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d12:	fa1f f78c 	uxth.w	r7, ip
 8000d16:	fb08 e316 	mls	r3, r8, r6, lr
 8000d1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1e:	fb06 f107 	mul.w	r1, r6, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2e:	f080 811f 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 811c 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f707 	mul.w	r7, r0, r7
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x92>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	f080 810a 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	f240 8107 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa4>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80ef 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	469e      	mov	lr, r3
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa4>
 8000dba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8092 	bne.w	8000ef2 <__udivmoddi4+0x21a>
 8000dce:	eba1 010c 	sub.w	r1, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000de2:	fb07 1113 	mls	r1, r7, r3, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79c      	b.n	8000d72 <__udivmoddi4+0x9a>
 8000e38:	f1c6 0720 	rsb	r7, r6, #32
 8000e3c:	40b3      	lsls	r3, r6
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40f9      	lsrs	r1, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 1118 	mls	r1, r9, r8, r1
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	4288      	cmp	r0, r1
 8000e72:	fa02 f206 	lsl.w	r2, r2, r6
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	4288      	cmp	r0, r1
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e98:	fb09 1110 	mls	r1, r9, r0, r1
 8000e9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	458e      	cmp	lr, r1
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4461      	add	r1, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba1 010e 	sub.w	r1, r1, lr
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eda:	fa01 f707 	lsl.w	r7, r1, r7
 8000ede:	fa22 f306 	lsr.w	r3, r2, r6
 8000ee2:	40f1      	lsrs	r1, r6
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eea:	2600      	movs	r6, #0
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa21 f303 	lsr.w	r3, r1, r3
 8000f00:	4091      	lsls	r1, r2
 8000f02:	4301      	orrs	r1, r0
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f10:	fb07 3610 	mls	r6, r7, r0, r3
 8000f14:	0c0b      	lsrs	r3, r1, #16
 8000f16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	b289      	uxth	r1, r1
 8000f3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f40:	fb07 3316 	mls	r3, r7, r6, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb06 f30e 	mul.w	r3, r6, lr
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0101 	adds.w	r1, ip, r1
 8000f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3e02      	subs	r6, #2
 8000f60:	4461      	add	r1, ip
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e705      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e3      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6f8      	b.n	8000d6a <__udivmoddi4+0x92>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4646      	mov	r6, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb0:	f002 f801 	bl	8002fb6 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb4:	f000 f8b2 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb8:	f000 fa18 	bl	80013ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fbc:	f000 f900 	bl	80011c0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000fc0:	f000 f9b4 	bl	800132c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fc4:	f000 f9e2 	bl	800138c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000fc8:	f000 f93a 	bl	8001240 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */


  HAL_I2C_EnableListen_IT(&hi2c1);
 8000fcc:	4845      	ldr	r0, [pc, #276]	; (80010e4 <main+0x138>)
 8000fce:	f002 fd79 	bl	8003ac4 <HAL_I2C_EnableListen_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  if(Lmode=='T'){
 8000fd2:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <main+0x13c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b54      	cmp	r3, #84	; 0x54
 8000fd8:	d14f      	bne.n	800107a <main+0xce>

	  //----get info command
	  lidar_Tx[0]=0xA5; //"¥";
 8000fda:	4b44      	ldr	r3, [pc, #272]	; (80010ec <main+0x140>)
 8000fdc:	22a5      	movs	r2, #165	; 0xa5
 8000fde:	701a      	strb	r2, [r3, #0]
	  lidar_Tx[1]=0x50; //"P";
 8000fe0:	4b42      	ldr	r3, [pc, #264]	; (80010ec <main+0x140>)
 8000fe2:	2250      	movs	r2, #80	; 0x50
 8000fe4:	705a      	strb	r2, [r3, #1]

	  HAL_UART_Transmit_IT(&huart2, lidar_Tx, 2);
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	4940      	ldr	r1, [pc, #256]	; (80010ec <main+0x140>)
 8000fea:	4841      	ldr	r0, [pc, #260]	; (80010f0 <main+0x144>)
 8000fec:	f005 fdce 	bl	8006b8c <HAL_UART_Transmit_IT>

	  while(StartLidar==1){ //waiting for transmission of info command
 8000ff0:	bf00      	nop
 8000ff2:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <main+0x148>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d0fb      	beq.n	8000ff2 <main+0x46>

	  }

	  StartLidar=1;
 8000ffa:	4b3e      	ldr	r3, [pc, #248]	; (80010f4 <main+0x148>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]

	  while(ReceiveInfo==0){ //waiting for reception of info command
 8001000:	e004      	b.n	800100c <main+0x60>
		  HAL_UART_Receive_IT(&huart2, lidar_Rx, 27);
 8001002:	221b      	movs	r2, #27
 8001004:	493c      	ldr	r1, [pc, #240]	; (80010f8 <main+0x14c>)
 8001006:	483a      	ldr	r0, [pc, #232]	; (80010f0 <main+0x144>)
 8001008:	f005 fe2e 	bl	8006c68 <HAL_UART_Receive_IT>
	  while(ReceiveInfo==0){ //waiting for reception of info command
 800100c:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <main+0x150>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f6      	beq.n	8001002 <main+0x56>
	  }

	  //----express scan command (dense mode)
	  lidar_Tx[1]=0x82;
 8001014:	4b35      	ldr	r3, [pc, #212]	; (80010ec <main+0x140>)
 8001016:	2282      	movs	r2, #130	; 0x82
 8001018:	705a      	strb	r2, [r3, #1]
	  lidar_Tx[2]=0x05; //" ";
 800101a:	4b34      	ldr	r3, [pc, #208]	; (80010ec <main+0x140>)
 800101c:	2205      	movs	r2, #5
 800101e:	709a      	strb	r2, [r3, #2]
	  lidar_Tx[3]=0x00; //" ";
 8001020:	4b32      	ldr	r3, [pc, #200]	; (80010ec <main+0x140>)
 8001022:	2200      	movs	r2, #0
 8001024:	70da      	strb	r2, [r3, #3]
	  lidar_Tx[4]=0x00; //" ";
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <main+0x140>)
 8001028:	2200      	movs	r2, #0
 800102a:	711a      	strb	r2, [r3, #4]
	  lidar_Tx[5]=0x00; //" ";
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <main+0x140>)
 800102e:	2200      	movs	r2, #0
 8001030:	715a      	strb	r2, [r3, #5]
	  lidar_Tx[6]=0x00; //" ";
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <main+0x140>)
 8001034:	2200      	movs	r2, #0
 8001036:	719a      	strb	r2, [r3, #6]
	  lidar_Tx[7]=0x00; //" ";
 8001038:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <main+0x140>)
 800103a:	2200      	movs	r2, #0
 800103c:	71da      	strb	r2, [r3, #7]
	  lidar_Tx[8]=0x22; //" ";
 800103e:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <main+0x140>)
 8001040:	2222      	movs	r2, #34	; 0x22
 8001042:	721a      	strb	r2, [r3, #8]


	  HAL_UART_Transmit_IT(&huart2, lidar_Tx, 9);
 8001044:	2209      	movs	r2, #9
 8001046:	4929      	ldr	r1, [pc, #164]	; (80010ec <main+0x140>)
 8001048:	4829      	ldr	r0, [pc, #164]	; (80010f0 <main+0x144>)
 800104a:	f005 fd9f 	bl	8006b8c <HAL_UART_Transmit_IT>

	  while(StartLidar==1){ //waiting for transmission of express scan command
 800104e:	bf00      	nop
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <main+0x148>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d0fb      	beq.n	8001050 <main+0xa4>

	   }

	  StartLidar=1;
 8001058:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <main+0x148>)
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]

	  while(ReceiveSync==0){ //waiting for reception of express scan command synchronization bytes
 800105e:	e004      	b.n	800106a <main+0xbe>
		  HAL_UART_Receive_IT(&huart2, lidar_Rx, 7);
 8001060:	2207      	movs	r2, #7
 8001062:	4925      	ldr	r1, [pc, #148]	; (80010f8 <main+0x14c>)
 8001064:	4822      	ldr	r0, [pc, #136]	; (80010f0 <main+0x144>)
 8001066:	f005 fdff 	bl	8006c68 <HAL_UART_Receive_IT>
	  while(ReceiveSync==0){ //waiting for reception of express scan command synchronization bytes
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <main+0x154>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f6      	beq.n	8001060 <main+0xb4>
	  }
	  Lmode='F';
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <main+0x13c>)
 8001074:	2246      	movs	r2, #70	; 0x46
 8001076:	701a      	strb	r2, [r3, #0]
 8001078:	e002      	b.n	8001080 <main+0xd4>
  }
  else{
	  Lmode='T';
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <main+0x13c>)
 800107c:	2254      	movs	r2, #84	; 0x54
 800107e:	701a      	strb	r2, [r3, #0]
  }

  //--------------start of main---------------
  while (1)
  {
	  Heartbeat(); //command of the led
 8001080:	f001 fcae 	bl	80029e0 <Heartbeat>

	  //-------i2c request management
	  switch (dir){
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <main+0x158>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <main+0xe6>
 800108c:	2b01      	cmp	r3, #1
 800108e:	d00a      	beq.n	80010a6 <main+0xfa>
	  		  dir=2;
	  		  HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, I2C_TxBuffer, sizeof(I2C_TxBuffer),I2C_FIRST_FRAME);
	  		  break;

	  	  default:
	  		  break;
 8001090:	e013      	b.n	80010ba <main+0x10e>
	  		  dir=2;
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <main+0x158>)
 8001094:	2202      	movs	r2, #2
 8001096:	601a      	str	r2, [r3, #0]
	  		  HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, I2C_RxBuffer, sizeof(I2C_RxBuffer), I2C_FIRST_FRAME);
 8001098:	2300      	movs	r3, #0
 800109a:	2214      	movs	r2, #20
 800109c:	491a      	ldr	r1, [pc, #104]	; (8001108 <main+0x15c>)
 800109e:	4811      	ldr	r0, [pc, #68]	; (80010e4 <main+0x138>)
 80010a0:	f002 fc6c 	bl	800397c <HAL_I2C_Slave_Seq_Receive_IT>
	  		  break;
 80010a4:	e009      	b.n	80010ba <main+0x10e>
	  		  dir=2;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <main+0x158>)
 80010a8:	2202      	movs	r2, #2
 80010aa:	601a      	str	r2, [r3, #0]
	  		  HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, I2C_TxBuffer, sizeof(I2C_TxBuffer),I2C_FIRST_FRAME);
 80010ac:	2300      	movs	r3, #0
 80010ae:	2214      	movs	r2, #20
 80010b0:	4916      	ldr	r1, [pc, #88]	; (800110c <main+0x160>)
 80010b2:	480c      	ldr	r0, [pc, #48]	; (80010e4 <main+0x138>)
 80010b4:	f002 fbbe 	bl	8003834 <HAL_I2C_Slave_Seq_Transmit_IT>
	  		  break;
 80010b8:	bf00      	nop
	  }


	  //-------uart reception management
	  if(Wmode=='F'){ //reception of IMU data
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <main+0x164>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b46      	cmp	r3, #70	; 0x46
 80010c0:	d105      	bne.n	80010ce <main+0x122>
		  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 80010c2:	226e      	movs	r2, #110	; 0x6e
 80010c4:	4913      	ldr	r1, [pc, #76]	; (8001114 <main+0x168>)
 80010c6:	4814      	ldr	r0, [pc, #80]	; (8001118 <main+0x16c>)
 80010c8:	f005 fdce 	bl	8006c68 <HAL_UART_Receive_IT>
 80010cc:	e7d8      	b.n	8001080 <main+0xd4>
	  }
	  else if(Lmode=='F'){ //reception of lidar data
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <main+0x13c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b46      	cmp	r3, #70	; 0x46
 80010d4:	d1d4      	bne.n	8001080 <main+0xd4>
		  if(HAL_UART_Receive_IT(&huart2, lidar_Rx, sizeof(lidar_Rx))==HAL_OK){
 80010d6:	f641 2290 	movw	r2, #6800	; 0x1a90
 80010da:	4907      	ldr	r1, [pc, #28]	; (80010f8 <main+0x14c>)
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <main+0x144>)
 80010de:	f005 fdc3 	bl	8006c68 <HAL_UART_Receive_IT>
	  Heartbeat(); //command of the led
 80010e2:	e7cd      	b.n	8001080 <main+0xd4>
 80010e4:	2000021c 	.word	0x2000021c
 80010e8:	20000019 	.word	0x20000019
 80010ec:	20001ed8 	.word	0x20001ed8
 80010f0:	20000340 	.word	0x20000340
 80010f4:	2000001c 	.word	0x2000001c
 80010f8:	20000448 	.word	0x20000448
 80010fc:	20001f04 	.word	0x20001f04
 8001100:	20001f08 	.word	0x20001f08
 8001104:	20000014 	.word	0x20000014
 8001108:	200003c4 	.word	0x200003c4
 800110c:	20000000 	.word	0x20000000
 8001110:	20000018 	.word	0x20000018
 8001114:	200003d8 	.word	0x200003d8
 8001118:	200002bc 	.word	0x200002bc

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b096      	sub	sp, #88	; 0x58
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2244      	movs	r2, #68	; 0x44
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f007 f884 	bl	8008238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800113e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001142:	f003 fe39 	bl	8004db8 <HAL_PWREx_ControlVoltageScaling>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800114c:	f001 fc62 	bl	8002a14 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001150:	2310      	movs	r3, #16
 8001152:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001154:	2301      	movs	r3, #1
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800115c:	2360      	movs	r3, #96	; 0x60
 800115e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001160:	2302      	movs	r3, #2
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001164:	2301      	movs	r3, #1
 8001166:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001168:	2301      	movs	r3, #1
 800116a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800116c:	2328      	movs	r3, #40	; 0x28
 800116e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001170:	2307      	movs	r3, #7
 8001172:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001174:	2302      	movs	r3, #2
 8001176:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001178:	2302      	movs	r3, #2
 800117a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4618      	mov	r0, r3
 8001182:	f003 fe6f 	bl	8004e64 <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800118c:	f001 fc42 	bl	8002a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
 8001192:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2303      	movs	r3, #3
 8001196:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	2104      	movs	r1, #4
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 fa6f 	bl	800568c <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011b4:	f001 fc2e 	bl	8002a14 <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3758      	adds	r7, #88	; 0x58
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_I2C1_Init+0x74>)
 80011c6:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <MX_I2C1_Init+0x78>)
 80011c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_I2C1_Init+0x74>)
 80011cc:	4a1b      	ldr	r2, [pc, #108]	; (800123c <MX_I2C1_Init+0x7c>)
 80011ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 64;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_I2C1_Init+0x74>)
 80011d2:	2240      	movs	r2, #64	; 0x40
 80011d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_I2C1_Init+0x74>)
 80011d8:	2201      	movs	r2, #1
 80011da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_I2C1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_I2C1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_I2C1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_I2C1_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011fa:	480e      	ldr	r0, [pc, #56]	; (8001234 <MX_I2C1_Init+0x74>)
 80011fc:	f002 fa8a 	bl	8003714 <HAL_I2C_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001206:	f001 fc05 	bl	8002a14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800120a:	2100      	movs	r1, #0
 800120c:	4809      	ldr	r0, [pc, #36]	; (8001234 <MX_I2C1_Init+0x74>)
 800120e:	f003 fd2d 	bl	8004c6c <HAL_I2CEx_ConfigAnalogFilter>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001218:	f001 fbfc 	bl	8002a14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800121c:	2100      	movs	r1, #0
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_I2C1_Init+0x74>)
 8001220:	f003 fd6f 	bl	8004d02 <HAL_I2CEx_ConfigDigitalFilter>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800122a:	f001 fbf3 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000021c 	.word	0x2000021c
 8001238:	40005400 	.word	0x40005400
 800123c:	10909cec 	.word	0x10909cec

08001240 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b092      	sub	sp, #72	; 0x48
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]
 8001256:	615a      	str	r2, [r3, #20]
 8001258:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800125a:	463b      	mov	r3, r7
 800125c:	222c      	movs	r2, #44	; 0x2c
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f006 ffe9 	bl	8008238 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001266:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <MX_TIM16_Init+0xe4>)
 8001268:	4a2f      	ldr	r2, [pc, #188]	; (8001328 <MX_TIM16_Init+0xe8>)
 800126a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80 - 1;
 800126c:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <MX_TIM16_Init+0xe4>)
 800126e:	224f      	movs	r2, #79	; 0x4f
 8001270:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <MX_TIM16_Init+0xe4>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100 - 1;
 8001278:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <MX_TIM16_Init+0xe4>)
 800127a:	2263      	movs	r2, #99	; 0x63
 800127c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <MX_TIM16_Init+0xe4>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <MX_TIM16_Init+0xe4>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <MX_TIM16_Init+0xe4>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001290:	4824      	ldr	r0, [pc, #144]	; (8001324 <MX_TIM16_Init+0xe4>)
 8001292:	f004 ff07 	bl	80060a4 <HAL_TIM_Base_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 800129c:	f001 fbba 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80012a0:	4820      	ldr	r0, [pc, #128]	; (8001324 <MX_TIM16_Init+0xe4>)
 80012a2:	f004 ff56 	bl	8006152 <HAL_TIM_PWM_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80012ac:	f001 fbb2 	bl	8002a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b0:	2360      	movs	r3, #96	; 0x60
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b8:	2300      	movs	r3, #0
 80012ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d0:	2200      	movs	r2, #0
 80012d2:	4619      	mov	r1, r3
 80012d4:	4813      	ldr	r0, [pc, #76]	; (8001324 <MX_TIM16_Init+0xe4>)
 80012d6:	f004 ff9d 	bl	8006214 <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 80012e0:	f001 fb98 	bl	8002a14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	4807      	ldr	r0, [pc, #28]	; (8001324 <MX_TIM16_Init+0xe4>)
 8001308:	f005 fb7a 	bl	8006a00 <HAL_TIMEx_ConfigBreakDeadTime>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM16_Init+0xd6>
  {
    Error_Handler();
 8001312:	f001 fb7f 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001316:	4803      	ldr	r0, [pc, #12]	; (8001324 <MX_TIM16_Init+0xe4>)
 8001318:	f001 fc26 	bl	8002b68 <HAL_TIM_MspPostInit>

}
 800131c:	bf00      	nop
 800131e:	3748      	adds	r7, #72	; 0x48
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000270 	.word	0x20000270
 8001328:	40014400 	.word	0x40014400

0800132c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_USART1_UART_Init+0x58>)
 8001332:	4a15      	ldr	r2, [pc, #84]	; (8001388 <MX_USART1_UART_Init+0x5c>)
 8001334:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <MX_USART1_UART_Init+0x58>)
 8001338:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800133c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_USART1_UART_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_USART1_UART_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_USART1_UART_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_USART1_UART_Init+0x58>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_USART1_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_USART1_UART_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_USART1_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_USART1_UART_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_USART1_UART_Init+0x58>)
 8001370:	f005 fbbe 	bl	8006af0 <HAL_UART_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800137a:	f001 fb4b 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200002bc 	.word	0x200002bc
 8001388:	40013800 	.word	0x40013800

0800138c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_USART2_UART_Init+0x54>)
 8001392:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 8001394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_USART2_UART_Init+0x54>)
 8001398:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <MX_USART2_UART_Init+0x5c>)
 800139a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_USART2_UART_Init+0x54>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_USART2_UART_Init+0x54>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <MX_USART2_UART_Init+0x54>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART2_UART_Init+0x54>)
 80013b0:	220c      	movs	r2, #12
 80013b2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <MX_USART2_UART_Init+0x54>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART2_UART_Init+0x54>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <MX_USART2_UART_Init+0x54>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART2_UART_Init+0x54>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_USART2_UART_Init+0x54>)
 80013ce:	f005 fb8f 	bl	8006af0 <HAL_UART_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 80013d8:	f001 fb1c 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000340 	.word	0x20000340
 80013e4:	40004400 	.word	0x40004400
 80013e8:	000f4240 	.word	0x000f4240

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a2a      	ldr	r2, [pc, #168]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <MX_GPIO_Init+0xc4>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f240 1101 	movw	r1, #257	; 0x101
 8001438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143c:	f002 f938 	bl	80036b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2108      	movs	r1, #8
 8001444:	481b      	ldr	r0, [pc, #108]	; (80014b4 <MX_GPIO_Init+0xc8>)
 8001446:	f002 f933 	bl	80036b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 800144a:	f240 1301 	movw	r3, #257	; 0x101
 800144e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4619      	mov	r1, r3
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f001 ffb9 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800146a:	2308      	movs	r3, #8
 800146c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	4619      	mov	r1, r3
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <MX_GPIO_Init+0xc8>)
 8001482:	f001 ffab 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001486:	2330      	movs	r3, #48	; 0x30
 8001488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001496:	2305      	movs	r3, #5
 8001498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	4619      	mov	r1, r3
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_GPIO_Init+0xc8>)
 80014a2:	f001 ff9b 	bl	80033dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a6:	bf00      	nop
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000400 	.word	0x48000400

080014b8 <HAL_UART_TxCpltCallback>:
/* USER CODE BEGIN 4 */


//-----UART connection management-----
//transmit info to uart port (used for lidar command only)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	if(StartLidar==1){ //initialisation of lidar
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_UART_TxCpltCallback+0x24>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d102      	bne.n	80014ce <HAL_UART_TxCpltCallback+0x16>
		StartLidar=0;
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <HAL_UART_TxCpltCallback+0x24>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
	}
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	2000001c 	.word	0x2000001c

080014e0 <HAL_UART_RxCpltCallback>:

//receiving and processing data from uart
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b0bc      	sub	sp, #240	; 0xf0
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]


	if (huart->Instance == USART1){ //------UART1 connection (IMU)------
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4aa3      	ldr	r2, [pc, #652]	; (800177c <HAL_UART_RxCpltCallback+0x29c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	f040 812d 	bne.w	800174e <HAL_UART_RxCpltCallback+0x26e>

		state=0; //initialization of state
 80014f4:	4ba2      	ldr	r3, [pc, #648]	; (8001780 <HAL_UART_RxCpltCallback+0x2a0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]

		//Wmode='T';


		//Reception of Data in arrays
		for(int i=0;i<sizeof(UART1_rxBuffer);i++){
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001500:	e0b5      	b.n	800166e <HAL_UART_RxCpltCallback+0x18e>
			switch (state){
 8001502:	4b9f      	ldr	r3, [pc, #636]	; (8001780 <HAL_UART_RxCpltCallback+0x2a0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b04      	cmp	r3, #4
 8001508:	f200 809e 	bhi.w	8001648 <HAL_UART_RxCpltCallback+0x168>
 800150c:	a201      	add	r2, pc, #4	; (adr r2, 8001514 <HAL_UART_RxCpltCallback+0x34>)
 800150e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001512:	bf00      	nop
 8001514:	08001529 	.word	0x08001529
 8001518:	0800154b 	.word	0x0800154b
 800151c:	08001595 	.word	0x08001595
 8001520:	080015d1 	.word	0x080015d1
 8001524:	0800160d 	.word	0x0800160d
				case 0:      //verification if data is received
					if((i<100) && UART1_rxBuffer[i]==0x55){
 8001528:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800152c:	2b63      	cmp	r3, #99	; 0x63
 800152e:	f300 8092 	bgt.w	8001656 <HAL_UART_RxCpltCallback+0x176>
 8001532:	4a94      	ldr	r2, [pc, #592]	; (8001784 <HAL_UART_RxCpltCallback+0x2a4>)
 8001534:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b55      	cmp	r3, #85	; 0x55
 800153e:	f040 808a 	bne.w	8001656 <HAL_UART_RxCpltCallback+0x176>
						state=1; //data received
 8001542:	4b8f      	ldr	r3, [pc, #572]	; (8001780 <HAL_UART_RxCpltCallback+0x2a0>)
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]
					}
				  break;
 8001548:	e085      	b.n	8001656 <HAL_UART_RxCpltCallback+0x176>

				case 1:      //Verification of what type of data it is
					if(UART1_rxBuffer[i]==0x51){
 800154a:	4a8e      	ldr	r2, [pc, #568]	; (8001784 <HAL_UART_RxCpltCallback+0x2a4>)
 800154c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001550:	4413      	add	r3, r2
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b51      	cmp	r3, #81	; 0x51
 8001556:	d103      	bne.n	8001560 <HAL_UART_RxCpltCallback+0x80>
								state=2; //acceleration data
 8001558:	4b89      	ldr	r3, [pc, #548]	; (8001780 <HAL_UART_RxCpltCallback+0x2a0>)
 800155a:	2202      	movs	r2, #2
 800155c:	601a      	str	r2, [r3, #0]
						state=4; //angle data
					}
					else{
						state=0; //Return to searching Data
					}
				 break;
 800155e:	e081      	b.n	8001664 <HAL_UART_RxCpltCallback+0x184>
					else if(UART1_rxBuffer[i]==0x52){
 8001560:	4a88      	ldr	r2, [pc, #544]	; (8001784 <HAL_UART_RxCpltCallback+0x2a4>)
 8001562:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001566:	4413      	add	r3, r2
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b52      	cmp	r3, #82	; 0x52
 800156c:	d103      	bne.n	8001576 <HAL_UART_RxCpltCallback+0x96>
						state=3; //angular velocity data
 800156e:	4b84      	ldr	r3, [pc, #528]	; (8001780 <HAL_UART_RxCpltCallback+0x2a0>)
 8001570:	2203      	movs	r2, #3
 8001572:	601a      	str	r2, [r3, #0]
				 break;
 8001574:	e076      	b.n	8001664 <HAL_UART_RxCpltCallback+0x184>
					else if(UART1_rxBuffer[i]==0x53){
 8001576:	4a83      	ldr	r2, [pc, #524]	; (8001784 <HAL_UART_RxCpltCallback+0x2a4>)
 8001578:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800157c:	4413      	add	r3, r2
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b53      	cmp	r3, #83	; 0x53
 8001582:	d103      	bne.n	800158c <HAL_UART_RxCpltCallback+0xac>
						state=4; //angle data
 8001584:	4b7e      	ldr	r3, [pc, #504]	; (8001780 <HAL_UART_RxCpltCallback+0x2a0>)
 8001586:	2204      	movs	r2, #4
 8001588:	601a      	str	r2, [r3, #0]
				 break;
 800158a:	e06b      	b.n	8001664 <HAL_UART_RxCpltCallback+0x184>
						state=0; //Return to searching Data
 800158c:	4b7c      	ldr	r3, [pc, #496]	; (8001780 <HAL_UART_RxCpltCallback+0x2a0>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
				 break;
 8001592:	e067      	b.n	8001664 <HAL_UART_RxCpltCallback+0x184>

				case 2: //Recuperation of Data in Acc Array
					if (Byte_Num<8){
 8001594:	4b7c      	ldr	r3, [pc, #496]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b07      	cmp	r3, #7
 800159a:	dc0e      	bgt.n	80015ba <HAL_UART_RxCpltCallback+0xda>
						AccData[Byte_Num]=UART1_rxBuffer[i];
 800159c:	4b7a      	ldr	r3, [pc, #488]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4978      	ldr	r1, [pc, #480]	; (8001784 <HAL_UART_RxCpltCallback+0x2a4>)
 80015a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80015a6:	440a      	add	r2, r1
 80015a8:	7811      	ldrb	r1, [r2, #0]
 80015aa:	4a78      	ldr	r2, [pc, #480]	; (800178c <HAL_UART_RxCpltCallback+0x2ac>)
 80015ac:	54d1      	strb	r1, [r2, r3]
						Byte_Num++;
 80015ae:	4b76      	ldr	r3, [pc, #472]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	4a74      	ldr	r2, [pc, #464]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 80015b6:	6013      	str	r3, [r2, #0]
					}
					else if (Byte_Num==8){
						Byte_Num=0;
						state=0;
					}
				 break;
 80015b8:	e04f      	b.n	800165a <HAL_UART_RxCpltCallback+0x17a>
					else if (Byte_Num==8){
 80015ba:	4b73      	ldr	r3, [pc, #460]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d14b      	bne.n	800165a <HAL_UART_RxCpltCallback+0x17a>
						Byte_Num=0;
 80015c2:	4b71      	ldr	r3, [pc, #452]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
						state=0;
 80015c8:	4b6d      	ldr	r3, [pc, #436]	; (8001780 <HAL_UART_RxCpltCallback+0x2a0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
				 break;
 80015ce:	e044      	b.n	800165a <HAL_UART_RxCpltCallback+0x17a>

				case 3:  //Recuperation of Data in AngVel Array
					if (Byte_Num<8){
 80015d0:	4b6d      	ldr	r3, [pc, #436]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b07      	cmp	r3, #7
 80015d6:	dc0e      	bgt.n	80015f6 <HAL_UART_RxCpltCallback+0x116>
						AngVelData[Byte_Num]=UART1_rxBuffer[i];
 80015d8:	4b6b      	ldr	r3, [pc, #428]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4969      	ldr	r1, [pc, #420]	; (8001784 <HAL_UART_RxCpltCallback+0x2a4>)
 80015de:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80015e2:	440a      	add	r2, r1
 80015e4:	7811      	ldrb	r1, [r2, #0]
 80015e6:	4a6a      	ldr	r2, [pc, #424]	; (8001790 <HAL_UART_RxCpltCallback+0x2b0>)
 80015e8:	54d1      	strb	r1, [r2, r3]
						Byte_Num++;
 80015ea:	4b67      	ldr	r3, [pc, #412]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3301      	adds	r3, #1
 80015f0:	4a65      	ldr	r2, [pc, #404]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 80015f2:	6013      	str	r3, [r2, #0]
					}
					else if (Byte_Num==8){
						Byte_Num=0;
						state=0;
					}
				 break;
 80015f4:	e033      	b.n	800165e <HAL_UART_RxCpltCallback+0x17e>
					else if (Byte_Num==8){
 80015f6:	4b64      	ldr	r3, [pc, #400]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d12f      	bne.n	800165e <HAL_UART_RxCpltCallback+0x17e>
						Byte_Num=0;
 80015fe:	4b62      	ldr	r3, [pc, #392]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
						state=0;
 8001604:	4b5e      	ldr	r3, [pc, #376]	; (8001780 <HAL_UART_RxCpltCallback+0x2a0>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
				 break;
 800160a:	e028      	b.n	800165e <HAL_UART_RxCpltCallback+0x17e>

				case 4:  //Recuperation of Data in Ang Array
					if (Byte_Num<8){
 800160c:	4b5e      	ldr	r3, [pc, #376]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b07      	cmp	r3, #7
 8001612:	dc0e      	bgt.n	8001632 <HAL_UART_RxCpltCallback+0x152>
						AngData[Byte_Num]=UART1_rxBuffer[i];
 8001614:	4b5c      	ldr	r3, [pc, #368]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	495a      	ldr	r1, [pc, #360]	; (8001784 <HAL_UART_RxCpltCallback+0x2a4>)
 800161a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800161e:	440a      	add	r2, r1
 8001620:	7811      	ldrb	r1, [r2, #0]
 8001622:	4a5c      	ldr	r2, [pc, #368]	; (8001794 <HAL_UART_RxCpltCallback+0x2b4>)
 8001624:	54d1      	strb	r1, [r2, r3]
						Byte_Num++;
 8001626:	4b58      	ldr	r3, [pc, #352]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	4a56      	ldr	r2, [pc, #344]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 800162e:	6013      	str	r3, [r2, #0]
					}
					else if (Byte_Num==8){
						Byte_Num=0;
						state=0;
					}
				 break;
 8001630:	e017      	b.n	8001662 <HAL_UART_RxCpltCallback+0x182>
					else if (Byte_Num==8){
 8001632:	4b55      	ldr	r3, [pc, #340]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b08      	cmp	r3, #8
 8001638:	d113      	bne.n	8001662 <HAL_UART_RxCpltCallback+0x182>
						Byte_Num=0;
 800163a:	4b53      	ldr	r3, [pc, #332]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
						state=0;
 8001640:	4b4f      	ldr	r3, [pc, #316]	; (8001780 <HAL_UART_RxCpltCallback+0x2a0>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
				 break;
 8001646:	e00c      	b.n	8001662 <HAL_UART_RxCpltCallback+0x182>

				default:
					state=0;
 8001648:	4b4d      	ldr	r3, [pc, #308]	; (8001780 <HAL_UART_RxCpltCallback+0x2a0>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
					Byte_Num=0;
 800164e:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <HAL_UART_RxCpltCallback+0x2a8>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
					break;
 8001654:	e006      	b.n	8001664 <HAL_UART_RxCpltCallback+0x184>
				  break;
 8001656:	bf00      	nop
 8001658:	e004      	b.n	8001664 <HAL_UART_RxCpltCallback+0x184>
				 break;
 800165a:	bf00      	nop
 800165c:	e002      	b.n	8001664 <HAL_UART_RxCpltCallback+0x184>
				 break;
 800165e:	bf00      	nop
 8001660:	e000      	b.n	8001664 <HAL_UART_RxCpltCallback+0x184>
				 break;
 8001662:	bf00      	nop
		for(int i=0;i<sizeof(UART1_rxBuffer);i++){
 8001664:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001668:	3301      	adds	r3, #1
 800166a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800166e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001672:	2b6d      	cmp	r3, #109	; 0x6d
 8001674:	f67f af45 	bls.w	8001502 <HAL_UART_RxCpltCallback+0x22>

		int Value1;
		int Value2;
		int Value3;

		for(int j=0;j<4;j++){
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800167e:	e055      	b.n	800172c <HAL_UART_RxCpltCallback+0x24c>
			Value1=AccData[2*j];
 8001680:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4a41      	ldr	r2, [pc, #260]	; (800178c <HAL_UART_RxCpltCallback+0x2ac>)
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			AccData[2*j]=AccData[2*j+1];
 800168e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	493b      	ldr	r1, [pc, #236]	; (800178c <HAL_UART_RxCpltCallback+0x2ac>)
 800169e:	5c89      	ldrb	r1, [r1, r2]
 80016a0:	4a3a      	ldr	r2, [pc, #232]	; (800178c <HAL_UART_RxCpltCallback+0x2ac>)
 80016a2:	54d1      	strb	r1, [r2, r3]
			AccData[2*j+1]=Value1;
 80016a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	3301      	adds	r3, #1
 80016ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80016b0:	b2d1      	uxtb	r1, r2
 80016b2:	4a36      	ldr	r2, [pc, #216]	; (800178c <HAL_UART_RxCpltCallback+0x2ac>)
 80016b4:	54d1      	strb	r1, [r2, r3]

			Value2=AngVelData[2*j];
 80016b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4a34      	ldr	r2, [pc, #208]	; (8001790 <HAL_UART_RxCpltCallback+0x2b0>)
 80016be:	5cd3      	ldrb	r3, [r2, r3]
 80016c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			AngVelData[2*j]=AngVelData[2*j+1];
 80016c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	492f      	ldr	r1, [pc, #188]	; (8001790 <HAL_UART_RxCpltCallback+0x2b0>)
 80016d4:	5c89      	ldrb	r1, [r1, r2]
 80016d6:	4a2e      	ldr	r2, [pc, #184]	; (8001790 <HAL_UART_RxCpltCallback+0x2b0>)
 80016d8:	54d1      	strb	r1, [r2, r3]
			AngVelData[2*j+1]=Value2;
 80016da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	3301      	adds	r3, #1
 80016e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80016e6:	b2d1      	uxtb	r1, r2
 80016e8:	4a29      	ldr	r2, [pc, #164]	; (8001790 <HAL_UART_RxCpltCallback+0x2b0>)
 80016ea:	54d1      	strb	r1, [r2, r3]

			Value3=AngData[2*j];
 80016ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4a28      	ldr	r2, [pc, #160]	; (8001794 <HAL_UART_RxCpltCallback+0x2b4>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			AngData[2*j]=AngData[2*j+1];
 80016fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4922      	ldr	r1, [pc, #136]	; (8001794 <HAL_UART_RxCpltCallback+0x2b4>)
 800170a:	5c89      	ldrb	r1, [r1, r2]
 800170c:	4a21      	ldr	r2, [pc, #132]	; (8001794 <HAL_UART_RxCpltCallback+0x2b4>)
 800170e:	54d1      	strb	r1, [r2, r3]
			AngData[2*j+1]=Value3;
 8001710:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	3301      	adds	r3, #1
 8001718:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800171c:	b2d1      	uxtb	r1, r2
 800171e:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <HAL_UART_RxCpltCallback+0x2b4>)
 8001720:	54d1      	strb	r1, [r2, r3]
		for(int j=0;j<4;j++){
 8001722:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001726:	3301      	adds	r3, #1
 8001728:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800172c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001730:	2b03      	cmp	r3, #3
 8001732:	dda5      	ble.n	8001680 <HAL_UART_RxCpltCallback+0x1a0>

		}

		//changing the value of Wz to transmit in the I2C transmit buffer
		I2C_TxBuffer[0]='W';
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_UART_RxCpltCallback+0x2b8>)
 8001736:	2257      	movs	r2, #87	; 0x57
 8001738:	701a      	strb	r2, [r3, #0]
		I2C_TxBuffer[1]= (AngVelData[4]);
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_UART_RxCpltCallback+0x2b0>)
 800173c:	791a      	ldrb	r2, [r3, #4]
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_UART_RxCpltCallback+0x2b8>)
 8001740:	705a      	strb	r2, [r3, #1]
		I2C_TxBuffer[2]= (AngVelData[5]);
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <HAL_UART_RxCpltCallback+0x2b0>)
 8001744:	795a      	ldrb	r2, [r3, #5]
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_UART_RxCpltCallback+0x2b8>)
 8001748:	709a      	strb	r2, [r3, #2]
			Wmode='F';

		}

	}
}
 800174a:	f001 b8ef 	b.w	800292c <HAL_UART_RxCpltCallback+0x144c>
	else if (huart->Instance == USART2){ //------UART2 connection (lidar)------
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <HAL_UART_RxCpltCallback+0x2bc>)
 8001754:	4293      	cmp	r3, r2
 8001756:	f041 80e9 	bne.w	800292c <HAL_UART_RxCpltCallback+0x144c>
		Lmode='T';
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_UART_RxCpltCallback+0x2c0>)
 800175c:	2254      	movs	r2, #84	; 0x54
 800175e:	701a      	strb	r2, [r3, #0]
		if (StartLidar==1){
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_UART_RxCpltCallback+0x2c4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d12e      	bne.n	80017c6 <HAL_UART_RxCpltCallback+0x2e6>
			if (ReceiveInfo==0){ //verification of info command
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <HAL_UART_RxCpltCallback+0x2c8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d11d      	bne.n	80017ac <HAL_UART_RxCpltCallback+0x2cc>
				ReceiveInfo=1;
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_UART_RxCpltCallback+0x2c8>)
 8001772:	2201      	movs	r2, #1
 8001774:	601a      	str	r2, [r3, #0]
}
 8001776:	f001 b8d9 	b.w	800292c <HAL_UART_RxCpltCallback+0x144c>
 800177a:	bf00      	nop
 800177c:	40013800 	.word	0x40013800
 8001780:	20001efc 	.word	0x20001efc
 8001784:	200003d8 	.word	0x200003d8
 8001788:	20001f00 	.word	0x20001f00
 800178c:	20001ee4 	.word	0x20001ee4
 8001790:	20001eec 	.word	0x20001eec
 8001794:	20001ef4 	.word	0x20001ef4
 8001798:	20000000 	.word	0x20000000
 800179c:	40004400 	.word	0x40004400
 80017a0:	20000019 	.word	0x20000019
 80017a4:	2000001c 	.word	0x2000001c
 80017a8:	20001f04 	.word	0x20001f04
			else if (ReceiveSync==0){ //verification of scan request first package
 80017ac:	4b98      	ldr	r3, [pc, #608]	; (8001a10 <HAL_UART_RxCpltCallback+0x530>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f041 80bb 	bne.w	800292c <HAL_UART_RxCpltCallback+0x144c>
				ReceiveSync=1;
 80017b6:	4b96      	ldr	r3, [pc, #600]	; (8001a10 <HAL_UART_RxCpltCallback+0x530>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
				StartLidar=0;
 80017bc:	4b95      	ldr	r3, [pc, #596]	; (8001a14 <HAL_UART_RxCpltCallback+0x534>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
}
 80017c2:	f001 b8b3 	b.w	800292c <HAL_UART_RxCpltCallback+0x144c>
			for(int k=0;k<intAngle;k++){
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017cc:	e012      	b.n	80017f4 <HAL_UART_RxCpltCallback+0x314>
				Angle[k]=0;
 80017ce:	4a92      	ldr	r2, [pc, #584]	; (8001a18 <HAL_UART_RxCpltCallback+0x538>)
 80017d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
				Distance[k]=0;
 80017de:	4a8f      	ldr	r2, [pc, #572]	; (8001a1c <HAL_UART_RxCpltCallback+0x53c>)
 80017e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80017e4:	2100      	movs	r1, #0
 80017e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int k=0;k<intAngle;k++){
 80017ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80017ee:	3301      	adds	r3, #1
 80017f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017f4:	4b8a      	ldr	r3, [pc, #552]	; (8001a20 <HAL_UART_RxCpltCallback+0x540>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbe6      	blt.n	80017ce <HAL_UART_RxCpltCallback+0x2ee>
			stateLidar=0;
 8001800:	4b88      	ldr	r3, [pc, #544]	; (8001a24 <HAL_UART_RxCpltCallback+0x544>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
			startSample=1;
 8001806:	4b88      	ldr	r3, [pc, #544]	; (8001a28 <HAL_UART_RxCpltCallback+0x548>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]
			intAngle=0;
 800180c:	4b84      	ldr	r3, [pc, #528]	; (8001a20 <HAL_UART_RxCpltCallback+0x540>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
			intDist=0;
 8001812:	4b86      	ldr	r3, [pc, #536]	; (8001a2c <HAL_UART_RxCpltCallback+0x54c>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
			for(int i=0; i<6800; i++){
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800181e:	e236      	b.n	8001c8e <HAL_UART_RxCpltCallback+0x7ae>
				switch (stateLidar){
 8001820:	4b80      	ldr	r3, [pc, #512]	; (8001a24 <HAL_UART_RxCpltCallback+0x544>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b05      	cmp	r3, #5
 8001826:	f200 822a 	bhi.w	8001c7e <HAL_UART_RxCpltCallback+0x79e>
 800182a:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <HAL_UART_RxCpltCallback+0x350>)
 800182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001830:	08001849 	.word	0x08001849
 8001834:	0800189b 	.word	0x0800189b
 8001838:	0800190f 	.word	0x0800190f
 800183c:	08001941 	.word	0x08001941
 8001840:	08001b91 	.word	0x08001b91
 8001844:	08001bbf 	.word	0x08001bbf
					if(((lidar_Rx[i] >> 4) == 0xa) && (6800-i >= 4)){
 8001848:	4a79      	ldr	r2, [pc, #484]	; (8001a30 <HAL_UART_RxCpltCallback+0x550>)
 800184a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800184e:	4413      	add	r3, r2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	091b      	lsrs	r3, r3, #4
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b0a      	cmp	r3, #10
 8001858:	f040 8213 	bne.w	8001c82 <HAL_UART_RxCpltCallback+0x7a2>
 800185c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001860:	f5c3 53d4 	rsb	r3, r3, #6784	; 0x1a80
 8001864:	3310      	adds	r3, #16
 8001866:	2b03      	cmp	r3, #3
 8001868:	f340 820b 	ble.w	8001c82 <HAL_UART_RxCpltCallback+0x7a2>
						SyncByte= (lidar_Rx[i] >> 4);
 800186c:	4a70      	ldr	r2, [pc, #448]	; (8001a30 <HAL_UART_RxCpltCallback+0x550>)
 800186e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001872:	4413      	add	r3, r2
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b6e      	ldr	r3, [pc, #440]	; (8001a34 <HAL_UART_RxCpltCallback+0x554>)
 800187c:	701a      	strb	r2, [r3, #0]
						Checksum= lidar_Rx[i] & (~0xa0);
 800187e:	4a6c      	ldr	r2, [pc, #432]	; (8001a30 <HAL_UART_RxCpltCallback+0x550>)
 8001880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001884:	4413      	add	r3, r2
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b6a      	ldr	r3, [pc, #424]	; (8001a38 <HAL_UART_RxCpltCallback+0x558>)
 8001890:	701a      	strb	r2, [r3, #0]
						stateLidar=1;
 8001892:	4b64      	ldr	r3, [pc, #400]	; (8001a24 <HAL_UART_RxCpltCallback+0x544>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]
					break;
 8001898:	e1f3      	b.n	8001c82 <HAL_UART_RxCpltCallback+0x7a2>
					if((lidar_Rx[i] >> 4) ==0x5){
 800189a:	4a65      	ldr	r2, [pc, #404]	; (8001a30 <HAL_UART_RxCpltCallback+0x550>)
 800189c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018a0:	4413      	add	r3, r2
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b05      	cmp	r3, #5
 80018aa:	d126      	bne.n	80018fa <HAL_UART_RxCpltCallback+0x41a>
						SyncByte= (SyncByte << 4) | (lidar_Rx[i] >> 4);
 80018ac:	4b61      	ldr	r3, [pc, #388]	; (8001a34 <HAL_UART_RxCpltCallback+0x554>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	b25a      	sxtb	r2, r3
 80018b4:	495e      	ldr	r1, [pc, #376]	; (8001a30 <HAL_UART_RxCpltCallback+0x550>)
 80018b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018ba:	440b      	add	r3, r1
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	b25b      	sxtb	r3, r3
 80018c4:	4313      	orrs	r3, r2
 80018c6:	b25b      	sxtb	r3, r3
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b5a      	ldr	r3, [pc, #360]	; (8001a34 <HAL_UART_RxCpltCallback+0x554>)
 80018cc:	701a      	strb	r2, [r3, #0]
						Checksum= (Checksum | ((lidar_Rx[i] & (~0x50)) << 4));
 80018ce:	4a58      	ldr	r2, [pc, #352]	; (8001a30 <HAL_UART_RxCpltCallback+0x550>)
 80018d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018d4:	4413      	add	r3, r2
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	b25b      	sxtb	r3, r3
 80018dc:	f023 030f 	bic.w	r3, r3, #15
 80018e0:	b25a      	sxtb	r2, r3
 80018e2:	4b55      	ldr	r3, [pc, #340]	; (8001a38 <HAL_UART_RxCpltCallback+0x558>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b52      	ldr	r3, [pc, #328]	; (8001a38 <HAL_UART_RxCpltCallback+0x558>)
 80018f0:	701a      	strb	r2, [r3, #0]
						stateLidar=2;
 80018f2:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <HAL_UART_RxCpltCallback+0x544>)
 80018f4:	2202      	movs	r2, #2
 80018f6:	601a      	str	r2, [r3, #0]
					break;
 80018f8:	e1c4      	b.n	8001c84 <HAL_UART_RxCpltCallback+0x7a4>
						Checksum=0x00;
 80018fa:	4b4f      	ldr	r3, [pc, #316]	; (8001a38 <HAL_UART_RxCpltCallback+0x558>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
						SyncByte=0x00;
 8001900:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <HAL_UART_RxCpltCallback+0x554>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
						stateLidar=0;
 8001906:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <HAL_UART_RxCpltCallback+0x544>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
					break;
 800190c:	e1ba      	b.n	8001c84 <HAL_UART_RxCpltCallback+0x7a4>
					Check=0x0;
 800190e:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <HAL_UART_RxCpltCallback+0x55c>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
					StartAngleLSB = lidar_Rx[i];
 8001914:	4a46      	ldr	r2, [pc, #280]	; (8001a30 <HAL_UART_RxCpltCallback+0x550>)
 8001916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800191a:	4413      	add	r3, r2
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	4b48      	ldr	r3, [pc, #288]	; (8001a40 <HAL_UART_RxCpltCallback+0x560>)
 8001920:	701a      	strb	r2, [r3, #0]
					Check=Check ^ lidar_Rx[i];
 8001922:	4a43      	ldr	r2, [pc, #268]	; (8001a30 <HAL_UART_RxCpltCallback+0x550>)
 8001924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001928:	4413      	add	r3, r2
 800192a:	781a      	ldrb	r2, [r3, #0]
 800192c:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <HAL_UART_RxCpltCallback+0x55c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4053      	eors	r3, r2
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <HAL_UART_RxCpltCallback+0x55c>)
 8001936:	701a      	strb	r2, [r3, #0]
					stateLidar = 3;
 8001938:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <HAL_UART_RxCpltCallback+0x544>)
 800193a:	2203      	movs	r2, #3
 800193c:	601a      	str	r2, [r3, #0]
					break;
 800193e:	e1a1      	b.n	8001c84 <HAL_UART_RxCpltCallback+0x7a4>
					StartAngleMSB = lidar_Rx[i];
 8001940:	4a3b      	ldr	r2, [pc, #236]	; (8001a30 <HAL_UART_RxCpltCallback+0x550>)
 8001942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001946:	4413      	add	r3, r2
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <HAL_UART_RxCpltCallback+0x564>)
 800194c:	701a      	strb	r2, [r3, #0]
					StartAngleByte =((StartAngleMSB << 8 | StartAngleLSB));
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <HAL_UART_RxCpltCallback+0x564>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	b21a      	sxth	r2, r3
 8001956:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <HAL_UART_RxCpltCallback+0x560>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b21b      	sxth	r3, r3
 800195c:	4313      	orrs	r3, r2
 800195e:	b21b      	sxth	r3, r3
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <HAL_UART_RxCpltCallback+0x568>)
 8001964:	801a      	strh	r2, [r3, #0]
					Check=Check ^ lidar_Rx[i];  //verification of the checksum from current response package
 8001966:	4a32      	ldr	r2, [pc, #200]	; (8001a30 <HAL_UART_RxCpltCallback+0x550>)
 8001968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800196c:	4413      	add	r3, r2
 800196e:	781a      	ldrb	r2, [r3, #0]
 8001970:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_UART_RxCpltCallback+0x55c>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4053      	eors	r3, r2
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_UART_RxCpltCallback+0x55c>)
 800197a:	701a      	strb	r2, [r3, #0]
					LastAngle=StartAngle;
 800197c:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <HAL_UART_RxCpltCallback+0x56c>)
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	4933      	ldr	r1, [pc, #204]	; (8001a50 <HAL_UART_RxCpltCallback+0x570>)
 8001984:	e9c1 2300 	strd	r2, r3, [r1]
					StartAngle = (double)StartAngleByte;  //value of start Angle
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_UART_RxCpltCallback+0x568>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fdc9 	bl	8000524 <__aeabi_ui2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	492d      	ldr	r1, [pc, #180]	; (8001a4c <HAL_UART_RxCpltCallback+0x56c>)
 8001998:	e9c1 2300 	strd	r2, r3, [r1]
					if(StartAngle >= 32768){ //verification of S bit (not used here)
 800199c:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <HAL_UART_RxCpltCallback+0x56c>)
 800199e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_UART_RxCpltCallback+0x574>)
 80019a8:	f7ff f8bc 	bl	8000b24 <__aeabi_dcmpge>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d011      	beq.n	80019d6 <HAL_UART_RxCpltCallback+0x4f6>
						StartAngle = StartAngle/2.0;
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_UART_RxCpltCallback+0x56c>)
 80019b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019c0:	f7fe ff54 	bl	800086c <__aeabi_ddiv>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4920      	ldr	r1, [pc, #128]	; (8001a4c <HAL_UART_RxCpltCallback+0x56c>)
 80019ca:	e9c1 2300 	strd	r2, r3, [r1]
						S_bit=1;
 80019ce:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <HAL_UART_RxCpltCallback+0x578>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e002      	b.n	80019dc <HAL_UART_RxCpltCallback+0x4fc>
						S_bit=0;
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_UART_RxCpltCallback+0x578>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
					StartAngle = StartAngle/64.0;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_UART_RxCpltCallback+0x56c>)
 80019de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <HAL_UART_RxCpltCallback+0x57c>)
 80019e8:	f7fe ff40 	bl	800086c <__aeabi_ddiv>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4916      	ldr	r1, [pc, #88]	; (8001a4c <HAL_UART_RxCpltCallback+0x56c>)
 80019f2:	e9c1 2300 	strd	r2, r3, [r1]
					if(startSample==1 || Sample==0){
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_UART_RxCpltCallback+0x548>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d003      	beq.n	8001a06 <HAL_UART_RxCpltCallback+0x526>
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_UART_RxCpltCallback+0x580>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d12e      	bne.n	8001a64 <HAL_UART_RxCpltCallback+0x584>
						startSample=0;
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_UART_RxCpltCallback+0x548>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e0ae      	b.n	8001b6c <HAL_UART_RxCpltCallback+0x68c>
 8001a0e:	bf00      	nop
 8001a10:	20001f08 	.word	0x20001f08
 8001a14:	2000001c 	.word	0x2000001c
 8001a18:	20001f20 	.word	0x20001f20
 8001a1c:	200052b0 	.word	0x200052b0
 8001a20:	20008644 	.word	0x20008644
 8001a24:	20001f10 	.word	0x20001f10
 8001a28:	20000020 	.word	0x20000020
 8001a2c:	20008640 	.word	0x20008640
 8001a30:	20000448 	.word	0x20000448
 8001a34:	20001f0c 	.word	0x20001f0c
 8001a38:	20001f0d 	.word	0x20001f0d
 8001a3c:	20001f0e 	.word	0x20001f0e
 8001a40:	20008648 	.word	0x20008648
 8001a44:	20008649 	.word	0x20008649
 8001a48:	2000864a 	.word	0x2000864a
 8001a4c:	20008650 	.word	0x20008650
 8001a50:	20008658 	.word	0x20008658
 8001a54:	40e00000 	.word	0x40e00000
 8001a58:	20001f18 	.word	0x20001f18
 8001a5c:	40500000 	.word	0x40500000
 8001a60:	20001f1c 	.word	0x20001f1c
						DiffAngle=StartAngle - LastAngle;
 8001a64:	4b9d      	ldr	r3, [pc, #628]	; (8001cdc <HAL_UART_RxCpltCallback+0x7fc>)
 8001a66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a6a:	4b9d      	ldr	r3, [pc, #628]	; (8001ce0 <HAL_UART_RxCpltCallback+0x800>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe fc1a 	bl	80002a8 <__aeabi_dsub>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	499a      	ldr	r1, [pc, #616]	; (8001ce4 <HAL_UART_RxCpltCallback+0x804>)
 8001a7a:	e9c1 2300 	strd	r2, r3, [r1]
						if(DiffAngle<0){
 8001a7e:	4b99      	ldr	r3, [pc, #612]	; (8001ce4 <HAL_UART_RxCpltCallback+0x804>)
 8001a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	f7ff f836 	bl	8000afc <__aeabi_dcmplt>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00c      	beq.n	8001ab0 <HAL_UART_RxCpltCallback+0x5d0>
							DiffAngle+=360;
 8001a96:	4b93      	ldr	r3, [pc, #588]	; (8001ce4 <HAL_UART_RxCpltCallback+0x804>)
 8001a98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	4b91      	ldr	r3, [pc, #580]	; (8001ce8 <HAL_UART_RxCpltCallback+0x808>)
 8001aa2:	f7fe fc03 	bl	80002ac <__adddf3>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	498e      	ldr	r1, [pc, #568]	; (8001ce4 <HAL_UART_RxCpltCallback+0x804>)
 8001aac:	e9c1 2300 	strd	r2, r3, [r1]
						for(int j=0;j<40;j++){
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001ab6:	e055      	b.n	8001b64 <HAL_UART_RxCpltCallback+0x684>
							Angle[intAngle]= LastAngle + (DiffAngle/40)*j;
 8001ab8:	4b8a      	ldr	r3, [pc, #552]	; (8001ce4 <HAL_UART_RxCpltCallback+0x804>)
 8001aba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	4b8a      	ldr	r3, [pc, #552]	; (8001cec <HAL_UART_RxCpltCallback+0x80c>)
 8001ac4:	f7fe fed2 	bl	800086c <__aeabi_ddiv>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4614      	mov	r4, r2
 8001ace:	461d      	mov	r5, r3
 8001ad0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001ad4:	f7fe fd36 	bl	8000544 <__aeabi_i2d>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fd9a 	bl	8000618 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	4b7c      	ldr	r3, [pc, #496]	; (8001ce0 <HAL_UART_RxCpltCallback+0x800>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fbdb 	bl	80002ac <__adddf3>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	497d      	ldr	r1, [pc, #500]	; (8001cf0 <HAL_UART_RxCpltCallback+0x810>)
 8001afc:	680c      	ldr	r4, [r1, #0]
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f7ff f881 	bl	8000c08 <__aeabi_d2f>
 8001b06:	4602      	mov	r2, r0
 8001b08:	497a      	ldr	r1, [pc, #488]	; (8001cf4 <HAL_UART_RxCpltCallback+0x814>)
 8001b0a:	00a3      	lsls	r3, r4, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	601a      	str	r2, [r3, #0]
							if (Angle[intAngle]>360){
 8001b10:	4b77      	ldr	r3, [pc, #476]	; (8001cf0 <HAL_UART_RxCpltCallback+0x810>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a77      	ldr	r2, [pc, #476]	; (8001cf4 <HAL_UART_RxCpltCallback+0x814>)
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001cf8 <HAL_UART_RxCpltCallback+0x818>
 8001b22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	dd11      	ble.n	8001b50 <HAL_UART_RxCpltCallback+0x670>
								Angle[intAngle]-=360;
 8001b2c:	4b70      	ldr	r3, [pc, #448]	; (8001cf0 <HAL_UART_RxCpltCallback+0x810>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a70      	ldr	r2, [pc, #448]	; (8001cf4 <HAL_UART_RxCpltCallback+0x814>)
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	4b6d      	ldr	r3, [pc, #436]	; (8001cf0 <HAL_UART_RxCpltCallback+0x810>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001cf8 <HAL_UART_RxCpltCallback+0x818>
 8001b42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b46:	4a6b      	ldr	r2, [pc, #428]	; (8001cf4 <HAL_UART_RxCpltCallback+0x814>)
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	edc3 7a00 	vstr	s15, [r3]
							intAngle++;
 8001b50:	4b67      	ldr	r3, [pc, #412]	; (8001cf0 <HAL_UART_RxCpltCallback+0x810>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	4a66      	ldr	r2, [pc, #408]	; (8001cf0 <HAL_UART_RxCpltCallback+0x810>)
 8001b58:	6013      	str	r3, [r2, #0]
						for(int j=0;j<40;j++){
 8001b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b68:	2b27      	cmp	r3, #39	; 0x27
 8001b6a:	dda5      	ble.n	8001ab8 <HAL_UART_RxCpltCallback+0x5d8>
					indexLidar=0;
 8001b6c:	4b63      	ldr	r3, [pc, #396]	; (8001cfc <HAL_UART_RxCpltCallback+0x81c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
					if(6800-i >= 85){ //verification of data still to receive (if not enough then default state and wait for end of for)
 8001b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b76:	f5c3 53d4 	rsb	r3, r3, #6784	; 0x1a80
 8001b7a:	3310      	adds	r3, #16
 8001b7c:	2b54      	cmp	r3, #84	; 0x54
 8001b7e:	dd03      	ble.n	8001b88 <HAL_UART_RxCpltCallback+0x6a8>
						stateLidar = 4;
 8001b80:	4b5f      	ldr	r3, [pc, #380]	; (8001d00 <HAL_UART_RxCpltCallback+0x820>)
 8001b82:	2204      	movs	r2, #4
 8001b84:	601a      	str	r2, [r3, #0]
					break;
 8001b86:	e07d      	b.n	8001c84 <HAL_UART_RxCpltCallback+0x7a4>
						stateLidar=10; //default state
 8001b88:	4b5d      	ldr	r3, [pc, #372]	; (8001d00 <HAL_UART_RxCpltCallback+0x820>)
 8001b8a:	220a      	movs	r2, #10
 8001b8c:	601a      	str	r2, [r3, #0]
					break;
 8001b8e:	e079      	b.n	8001c84 <HAL_UART_RxCpltCallback+0x7a4>
					DistanceByte = lidar_Rx[i];
 8001b90:	4a5c      	ldr	r2, [pc, #368]	; (8001d04 <HAL_UART_RxCpltCallback+0x824>)
 8001b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b96:	4413      	add	r3, r2
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	4b5a      	ldr	r3, [pc, #360]	; (8001d08 <HAL_UART_RxCpltCallback+0x828>)
 8001b9e:	801a      	strh	r2, [r3, #0]
					Check=Check ^ lidar_Rx[i];  //verification of the checksum from current response package
 8001ba0:	4a58      	ldr	r2, [pc, #352]	; (8001d04 <HAL_UART_RxCpltCallback+0x824>)
 8001ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ba6:	4413      	add	r3, r2
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	4b58      	ldr	r3, [pc, #352]	; (8001d0c <HAL_UART_RxCpltCallback+0x82c>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	4053      	eors	r3, r2
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b56      	ldr	r3, [pc, #344]	; (8001d0c <HAL_UART_RxCpltCallback+0x82c>)
 8001bb4:	701a      	strb	r2, [r3, #0]
					stateLidar=5;
 8001bb6:	4b52      	ldr	r3, [pc, #328]	; (8001d00 <HAL_UART_RxCpltCallback+0x820>)
 8001bb8:	2205      	movs	r2, #5
 8001bba:	601a      	str	r2, [r3, #0]
					break;
 8001bbc:	e062      	b.n	8001c84 <HAL_UART_RxCpltCallback+0x7a4>
					Check=Check ^ lidar_Rx[i];  //verification of the checksum from current response package
 8001bbe:	4a51      	ldr	r2, [pc, #324]	; (8001d04 <HAL_UART_RxCpltCallback+0x824>)
 8001bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bc4:	4413      	add	r3, r2
 8001bc6:	781a      	ldrb	r2, [r3, #0]
 8001bc8:	4b50      	ldr	r3, [pc, #320]	; (8001d0c <HAL_UART_RxCpltCallback+0x82c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4053      	eors	r3, r2
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b4e      	ldr	r3, [pc, #312]	; (8001d0c <HAL_UART_RxCpltCallback+0x82c>)
 8001bd2:	701a      	strb	r2, [r3, #0]
					DistanceByte = (lidar_Rx[i] << 8 | DistanceByte);
 8001bd4:	4a4b      	ldr	r2, [pc, #300]	; (8001d04 <HAL_UART_RxCpltCallback+0x824>)
 8001bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bda:	4413      	add	r3, r2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	b21a      	sxth	r2, r3
 8001be2:	4b49      	ldr	r3, [pc, #292]	; (8001d08 <HAL_UART_RxCpltCallback+0x828>)
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	4313      	orrs	r3, r2
 8001bea:	b21b      	sxth	r3, r3
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <HAL_UART_RxCpltCallback+0x828>)
 8001bf0:	801a      	strh	r2, [r3, #0]
					Distance[intDist] = (int)(DistanceByte);  //value of current distance
 8001bf2:	4b45      	ldr	r3, [pc, #276]	; (8001d08 <HAL_UART_RxCpltCallback+0x828>)
 8001bf4:	881a      	ldrh	r2, [r3, #0]
 8001bf6:	4b46      	ldr	r3, [pc, #280]	; (8001d10 <HAL_UART_RxCpltCallback+0x830>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4a45      	ldr	r2, [pc, #276]	; (8001d14 <HAL_UART_RxCpltCallback+0x834>)
 8001bfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					intDist++;
 8001c02:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <HAL_UART_RxCpltCallback+0x830>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	4a41      	ldr	r2, [pc, #260]	; (8001d10 <HAL_UART_RxCpltCallback+0x830>)
 8001c0a:	6013      	str	r3, [r2, #0]
					if(indexLidar<39){  //verification of the end of current response package
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <HAL_UART_RxCpltCallback+0x81c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b26      	cmp	r3, #38	; 0x26
 8001c12:	dc08      	bgt.n	8001c26 <HAL_UART_RxCpltCallback+0x746>
						indexLidar++;
 8001c14:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <HAL_UART_RxCpltCallback+0x81c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	4a38      	ldr	r2, [pc, #224]	; (8001cfc <HAL_UART_RxCpltCallback+0x81c>)
 8001c1c:	6013      	str	r3, [r2, #0]
						stateLidar=4;
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_UART_RxCpltCallback+0x820>)
 8001c20:	2204      	movs	r2, #4
 8001c22:	601a      	str	r2, [r3, #0]
					break;
 8001c24:	e02e      	b.n	8001c84 <HAL_UART_RxCpltCallback+0x7a4>
						if(Check==Checksum){ //verification of checksum (if not good then sample not valid)
 8001c26:	4b39      	ldr	r3, [pc, #228]	; (8001d0c <HAL_UART_RxCpltCallback+0x82c>)
 8001c28:	781a      	ldrb	r2, [r3, #0]
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <HAL_UART_RxCpltCallback+0x838>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d103      	bne.n	8001c3a <HAL_UART_RxCpltCallback+0x75a>
							Sample=1;
 8001c32:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <HAL_UART_RxCpltCallback+0x83c>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e01d      	b.n	8001c76 <HAL_UART_RxCpltCallback+0x796>
							for(int j=0;j<40;j++){
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c40:	e00d      	b.n	8001c5e <HAL_UART_RxCpltCallback+0x77e>
								Distance[intDist-j] = '\0';
 8001c42:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <HAL_UART_RxCpltCallback+0x830>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	4a31      	ldr	r2, [pc, #196]	; (8001d14 <HAL_UART_RxCpltCallback+0x834>)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							for(int j=0;j<40;j++){
 8001c54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c62:	2b27      	cmp	r3, #39	; 0x27
 8001c64:	dded      	ble.n	8001c42 <HAL_UART_RxCpltCallback+0x762>
							intDist-=40;
 8001c66:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <HAL_UART_RxCpltCallback+0x830>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	3b28      	subs	r3, #40	; 0x28
 8001c6c:	4a28      	ldr	r2, [pc, #160]	; (8001d10 <HAL_UART_RxCpltCallback+0x830>)
 8001c6e:	6013      	str	r3, [r2, #0]
							Sample=0;
 8001c70:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <HAL_UART_RxCpltCallback+0x83c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
						stateLidar=0;
 8001c76:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_UART_RxCpltCallback+0x820>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
					break;
 8001c7c:	e002      	b.n	8001c84 <HAL_UART_RxCpltCallback+0x7a4>
					break;
 8001c7e:	bf00      	nop
 8001c80:	e000      	b.n	8001c84 <HAL_UART_RxCpltCallback+0x7a4>
					break;
 8001c82:	bf00      	nop
			for(int i=0; i<6800; i++){
 8001c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c88:	3301      	adds	r3, #1
 8001c8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c92:	f641 228f 	movw	r2, #6799	; 0x1a8f
 8001c96:	4293      	cmp	r3, r2
 8001c98:	f77f adc2 	ble.w	8001820 <HAL_UART_RxCpltCallback+0x340>
			for(int k = 0;k<sizeTableMoy;k++){
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001ca2:	e012      	b.n	8001cca <HAL_UART_RxCpltCallback+0x7ea>
				DistMoy[k]=0;
 8001ca4:	4a1e      	ldr	r2, [pc, #120]	; (8001d20 <HAL_UART_RxCpltCallback+0x840>)
 8001ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
				intMoy[k]=0;
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_UART_RxCpltCallback+0x844>)
 8001cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001cba:	2100      	movs	r1, #0
 8001cbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int k = 0;k<sizeTableMoy;k++){
 8001cc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001cce:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001cd2:	dde7      	ble.n	8001ca4 <HAL_UART_RxCpltCallback+0x7c4>
			for(int j=0;j<3300;j++){
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001cda:	e0a0      	b.n	8001e1e <HAL_UART_RxCpltCallback+0x93e>
 8001cdc:	20008650 	.word	0x20008650
 8001ce0:	20008658 	.word	0x20008658
 8001ce4:	20008660 	.word	0x20008660
 8001ce8:	40768000 	.word	0x40768000
 8001cec:	40440000 	.word	0x40440000
 8001cf0:	20008644 	.word	0x20008644
 8001cf4:	20001f20 	.word	0x20001f20
 8001cf8:	43b40000 	.word	0x43b40000
 8001cfc:	20001f14 	.word	0x20001f14
 8001d00:	20001f10 	.word	0x20001f10
 8001d04:	20000448 	.word	0x20000448
 8001d08:	2000864c 	.word	0x2000864c
 8001d0c:	20001f0e 	.word	0x20001f0e
 8001d10:	20008640 	.word	0x20008640
 8001d14:	200052b0 	.word	0x200052b0
 8001d18:	20001f0d 	.word	0x20001f0d
 8001d1c:	20001f1c 	.word	0x20001f1c
 8001d20:	20008668 	.word	0x20008668
 8001d24:	20008c0c 	.word	0x20008c0c
				if(Distance[j]!=0){
 8001d28:	4a7b      	ldr	r2, [pc, #492]	; (8001f18 <HAL_UART_RxCpltCallback+0xa38>)
 8001d2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d06e      	beq.n	8001e14 <HAL_UART_RxCpltCallback+0x934>
					if((int)Angle[j]>=0 && (int)Angle[j]<=360)
 8001d36:	4a79      	ldr	r2, [pc, #484]	; (8001f1c <HAL_UART_RxCpltCallback+0xa3c>)
 8001d38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	edd3 7a00 	vldr	s15, [r3]
 8001d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d48:	ee17 3a90 	vmov	r3, s15
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db4f      	blt.n	8001df0 <HAL_UART_RxCpltCallback+0x910>
 8001d50:	4a72      	ldr	r2, [pc, #456]	; (8001f1c <HAL_UART_RxCpltCallback+0xa3c>)
 8001d52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d62:	ee17 3a90 	vmov	r3, s15
 8001d66:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001d6a:	dc41      	bgt.n	8001df0 <HAL_UART_RxCpltCallback+0x910>
					DistMoy[(int)(Angle[j])]+=(float)Distance[j]/1000.0;
 8001d6c:	4a6b      	ldr	r2, [pc, #428]	; (8001f1c <HAL_UART_RxCpltCallback+0xa3c>)
 8001d6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d7e:	ee17 3a90 	vmov	r3, s15
 8001d82:	4a67      	ldr	r2, [pc, #412]	; (8001f20 <HAL_UART_RxCpltCallback+0xa40>)
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbec 	bl	8000568 <__aeabi_f2d>
 8001d90:	4604      	mov	r4, r0
 8001d92:	460d      	mov	r5, r1
 8001d94:	4a60      	ldr	r2, [pc, #384]	; (8001f18 <HAL_UART_RxCpltCallback+0xa38>)
 8001d96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da6:	ee17 0a90 	vmov	r0, s15
 8001daa:	f7fe fbdd 	bl	8000568 <__aeabi_f2d>
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	4b5c      	ldr	r3, [pc, #368]	; (8001f24 <HAL_UART_RxCpltCallback+0xa44>)
 8001db4:	f7fe fd5a 	bl	800086c <__aeabi_ddiv>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	f7fe fa74 	bl	80002ac <__adddf3>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4a53      	ldr	r2, [pc, #332]	; (8001f1c <HAL_UART_RxCpltCallback+0xa3c>)
 8001dce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dde:	ee17 4a90 	vmov	r4, s15
 8001de2:	f7fe ff11 	bl	8000c08 <__aeabi_d2f>
 8001de6:	4602      	mov	r2, r0
 8001de8:	494d      	ldr	r1, [pc, #308]	; (8001f20 <HAL_UART_RxCpltCallback+0xa40>)
 8001dea:	00a3      	lsls	r3, r4, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	601a      	str	r2, [r3, #0]
					intMoy[(int)(Angle[j])]++;
 8001df0:	4a4a      	ldr	r2, [pc, #296]	; (8001f1c <HAL_UART_RxCpltCallback+0xa3c>)
 8001df2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e02:	ee17 1a90 	vmov	r1, s15
 8001e06:	4b48      	ldr	r3, [pc, #288]	; (8001f28 <HAL_UART_RxCpltCallback+0xa48>)
 8001e08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	4a46      	ldr	r2, [pc, #280]	; (8001f28 <HAL_UART_RxCpltCallback+0xa48>)
 8001e10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			for(int j=0;j<3300;j++){
 8001e14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e22:	f640 42e3 	movw	r2, #3299	; 0xce3
 8001e26:	4293      	cmp	r3, r2
 8001e28:	f77f af7e 	ble.w	8001d28 <HAL_UART_RxCpltCallback+0x848>
			for(int n=0;n<sizeTableMoy;n++){
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001e32:	e024      	b.n	8001e7e <HAL_UART_RxCpltCallback+0x99e>
				if (intMoy[n]!=0){
 8001e34:	4a3c      	ldr	r2, [pc, #240]	; (8001f28 <HAL_UART_RxCpltCallback+0xa48>)
 8001e36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d018      	beq.n	8001e74 <HAL_UART_RxCpltCallback+0x994>
					DistMoy[n]=DistMoy[n]/intMoy[n];
 8001e42:	4a37      	ldr	r2, [pc, #220]	; (8001f20 <HAL_UART_RxCpltCallback+0xa40>)
 8001e44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	edd3 6a00 	vldr	s13, [r3]
 8001e50:	4a35      	ldr	r2, [pc, #212]	; (8001f28 <HAL_UART_RxCpltCallback+0xa48>)
 8001e52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e66:	4a2e      	ldr	r2, [pc, #184]	; (8001f20 <HAL_UART_RxCpltCallback+0xa40>)
 8001e68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	edc3 7a00 	vstr	s15, [r3]
			for(int n=0;n<sizeTableMoy;n++){
 8001e74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001e7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e82:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001e86:	ddd5      	ble.n	8001e34 <HAL_UART_RxCpltCallback+0x954>
			int intplot=0; //number of true obstacle
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			for(int n=0;n<4;n++){ //initialization of arrays
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e94:	e038      	b.n	8001f08 <HAL_UART_RxCpltCallback+0xa28>
				AnglePlot[n]=0;
 8001e96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	33f0      	adds	r3, #240	; 0xf0
 8001e9e:	443b      	add	r3, r7
 8001ea0:	f1a3 01a8 	sub.w	r1, r3, #168	; 0xa8
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	e9c1 2300 	strd	r2, r3, [r1]
				DistPlot[n]=0;
 8001eb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	33f0      	adds	r3, #240	; 0xf0
 8001eb8:	443b      	add	r3, r7
 8001eba:	f1a3 0188 	sub.w	r1, r3, #136	; 0x88
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	e9c1 2300 	strd	r2, r3, [r1]
				x[n]=0;
 8001eca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	33f0      	adds	r3, #240	; 0xf0
 8001ed2:	443b      	add	r3, r7
 8001ed4:	f1a3 01e8 	sub.w	r1, r3, #232	; 0xe8
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	e9c1 2300 	strd	r2, r3, [r1]
				y[n]=0;
 8001ee4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	33f0      	adds	r3, #240	; 0xf0
 8001eec:	443b      	add	r3, r7
 8001eee:	f1a3 01c8 	sub.w	r1, r3, #200	; 0xc8
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	e9c1 2300 	strd	r2, r3, [r1]
			for(int n=0;n<4;n++){ //initialization of arrays
 8001efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f02:	3301      	adds	r3, #1
 8001f04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	ddc2      	ble.n	8001e96 <HAL_UART_RxCpltCallback+0x9b6>
			for(int i = 0; i < indexLidar; i++){
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f16:	e2ce      	b.n	80024b6 <HAL_UART_RxCpltCallback+0xfd6>
 8001f18:	200052b0 	.word	0x200052b0
 8001f1c:	20001f20 	.word	0x20001f20
 8001f20:	20008668 	.word	0x20008668
 8001f24:	408f4000 	.word	0x408f4000
 8001f28:	20008c0c 	.word	0x20008c0c
				newangle = (double)Angle[i]-Theta_N*180/M_PI; //angle on the same position as the beginning
 8001f2c:	4abc      	ldr	r2, [pc, #752]	; (8002220 <HAL_UART_RxCpltCallback+0xd40>)
 8001f2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fb15 	bl	8000568 <__aeabi_f2d>
 8001f3e:	4604      	mov	r4, r0
 8001f40:	460d      	mov	r5, r1
 8001f42:	4bb8      	ldr	r3, [pc, #736]	; (8002224 <HAL_UART_RxCpltCallback+0xd44>)
 8001f44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	4bb6      	ldr	r3, [pc, #728]	; (8002228 <HAL_UART_RxCpltCallback+0xd48>)
 8001f4e:	f7fe fb63 	bl	8000618 <__aeabi_dmul>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	a3ab      	add	r3, pc, #684	; (adr r3, 8002208 <HAL_UART_RxCpltCallback+0xd28>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe fc84 	bl	800086c <__aeabi_ddiv>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4620      	mov	r0, r4
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	f7fe f99c 	bl	80002a8 <__aeabi_dsub>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
				dist=(double)Distance[i]/1000.0;  //value of distance
 8001f78:	4aac      	ldr	r2, [pc, #688]	; (800222c <HAL_UART_RxCpltCallback+0xd4c>)
 8001f7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fade 	bl	8000544 <__aeabi_i2d>
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4ba8      	ldr	r3, [pc, #672]	; (8002230 <HAL_UART_RxCpltCallback+0xd50>)
 8001f8e:	f7fe fc6d 	bl	800086c <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
				if (newangle < 0) {
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001fa6:	f7fe fda9 	bl	8000afc <__aeabi_dcmplt>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00a      	beq.n	8001fc6 <HAL_UART_RxCpltCallback+0xae6>
					newangle += 360;
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	4b9f      	ldr	r3, [pc, #636]	; (8002234 <HAL_UART_RxCpltCallback+0xd54>)
 8001fb6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001fba:	f7fe f977 	bl	80002ac <__adddf3>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
				if (90 < newangle && newangle < 180 && dist < 23) { //verification of first obstacle
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	4b9b      	ldr	r3, [pc, #620]	; (8002238 <HAL_UART_RxCpltCallback+0xd58>)
 8001fcc:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001fd0:	f7fe fdb2 	bl	8000b38 <__aeabi_dcmpgt>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 8091 	beq.w	80020fe <HAL_UART_RxCpltCallback+0xc1e>
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	4b91      	ldr	r3, [pc, #580]	; (8002228 <HAL_UART_RxCpltCallback+0xd48>)
 8001fe2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001fe6:	f7fe fd89 	bl	8000afc <__aeabi_dcmplt>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 8086 	beq.w	80020fe <HAL_UART_RxCpltCallback+0xc1e>
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	4b91      	ldr	r3, [pc, #580]	; (800223c <HAL_UART_RxCpltCallback+0xd5c>)
 8001ff8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001ffc:	f7fe fd7e 	bl	8000afc <__aeabi_dcmplt>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d07b      	beq.n	80020fe <HAL_UART_RxCpltCallback+0xc1e>
					obstaclex = X - (cos(newangle-90)*dist);
 8002006:	4b8e      	ldr	r3, [pc, #568]	; (8002240 <HAL_UART_RxCpltCallback+0xd60>)
 8002008:	e9d3 4500 	ldrd	r4, r5, [r3]
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	4b89      	ldr	r3, [pc, #548]	; (8002238 <HAL_UART_RxCpltCallback+0xd58>)
 8002012:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002016:	f7fe f947 	bl	80002a8 <__aeabi_dsub>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	ec43 2b17 	vmov	d7, r2, r3
 8002022:	eeb0 0a47 	vmov.f32	s0, s14
 8002026:	eef0 0a67 	vmov.f32	s1, s15
 800202a:	f008 fe25 	bl	800ac78 <cos>
 800202e:	ec51 0b10 	vmov	r0, r1, d0
 8002032:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002036:	f7fe faef 	bl	8000618 <__aeabi_dmul>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4620      	mov	r0, r4
 8002040:	4629      	mov	r1, r5
 8002042:	f7fe f931 	bl	80002a8 <__aeabi_dsub>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
					obstacley = Y - (sin(newangle-90)*dist);
 800204e:	4b7d      	ldr	r3, [pc, #500]	; (8002244 <HAL_UART_RxCpltCallback+0xd64>)
 8002050:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	4b77      	ldr	r3, [pc, #476]	; (8002238 <HAL_UART_RxCpltCallback+0xd58>)
 800205a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800205e:	f7fe f923 	bl	80002a8 <__aeabi_dsub>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	ec43 2b17 	vmov	d7, r2, r3
 800206a:	eeb0 0a47 	vmov.f32	s0, s14
 800206e:	eef0 0a67 	vmov.f32	s1, s15
 8002072:	f008 fe55 	bl	800ad20 <sin>
 8002076:	ec51 0b10 	vmov	r0, r1, d0
 800207a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800207e:	f7fe facb 	bl	8000618 <__aeabi_dmul>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4620      	mov	r0, r4
 8002088:	4629      	mov	r1, r5
 800208a:	f7fe f90d 	bl	80002a8 <__aeabi_dsub>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
					if (obstaclex > -2 && obstaclex < 0 && obstacley > -2 && obstacley < 0) { //verification if current obstacle is possible
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800209e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80020a2:	f7fe fd49 	bl	8000b38 <__aeabi_dcmpgt>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d028      	beq.n	80020fe <HAL_UART_RxCpltCallback+0xc1e>
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80020b8:	f7fe fd20 	bl	8000afc <__aeabi_dcmplt>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01d      	beq.n	80020fe <HAL_UART_RxCpltCallback+0xc1e>
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80020ca:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80020ce:	f7fe fd33 	bl	8000b38 <__aeabi_dcmpgt>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d012      	beq.n	80020fe <HAL_UART_RxCpltCallback+0xc1e>
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80020e4:	f7fe fd0a 	bl	8000afc <__aeabi_dcmplt>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_UART_RxCpltCallback+0xc1e>
						AnglePlot[0] = newangle;
 80020ee:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80020f2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
						DistPlot[0] = dist;
 80020f6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80020fa:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				if (0 < newangle && newangle < 90 && dist < 23) { //verification of second obstacle
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800210a:	f7fe fd15 	bl	8000b38 <__aeabi_dcmpgt>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8099 	beq.w	8002248 <HAL_UART_RxCpltCallback+0xd68>
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	4b47      	ldr	r3, [pc, #284]	; (8002238 <HAL_UART_RxCpltCallback+0xd58>)
 800211c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002120:	f7fe fcec 	bl	8000afc <__aeabi_dcmplt>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 808e 	beq.w	8002248 <HAL_UART_RxCpltCallback+0xd68>
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	4b42      	ldr	r3, [pc, #264]	; (800223c <HAL_UART_RxCpltCallback+0xd5c>)
 8002132:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002136:	f7fe fce1 	bl	8000afc <__aeabi_dcmplt>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8083 	beq.w	8002248 <HAL_UART_RxCpltCallback+0xd68>
					obstaclex = X + (cos(newangle)*dist);
 8002142:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8002146:	f008 fd97 	bl	800ac78 <cos>
 800214a:	ec51 0b10 	vmov	r0, r1, d0
 800214e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002152:	f7fe fa61 	bl	8000618 <__aeabi_dmul>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	4b38      	ldr	r3, [pc, #224]	; (8002240 <HAL_UART_RxCpltCallback+0xd60>)
 8002160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002164:	f7fe f8a2 	bl	80002ac <__adddf3>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
					obstacley = Y - (sin(newangle)*dist);
 8002170:	4b34      	ldr	r3, [pc, #208]	; (8002244 <HAL_UART_RxCpltCallback+0xd64>)
 8002172:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002176:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 800217a:	f008 fdd1 	bl	800ad20 <sin>
 800217e:	ec51 0b10 	vmov	r0, r1, d0
 8002182:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002186:	f7fe fa47 	bl	8000618 <__aeabi_dmul>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4620      	mov	r0, r4
 8002190:	4629      	mov	r1, r5
 8002192:	f7fe f889 	bl	80002a8 <__aeabi_dsub>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
					if (obstaclex > 15.6 && obstaclex < 17.6 && obstacley > -2 && obstacley < 0) { //verification if current obstacle is possible
 800219e:	a31c      	add	r3, pc, #112	; (adr r3, 8002210 <HAL_UART_RxCpltCallback+0xd30>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80021a8:	f7fe fcc6 	bl	8000b38 <__aeabi_dcmpgt>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d04a      	beq.n	8002248 <HAL_UART_RxCpltCallback+0xd68>
 80021b2:	a319      	add	r3, pc, #100	; (adr r3, 8002218 <HAL_UART_RxCpltCallback+0xd38>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80021bc:	f7fe fc9e 	bl	8000afc <__aeabi_dcmplt>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d040      	beq.n	8002248 <HAL_UART_RxCpltCallback+0xd68>
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80021ce:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80021d2:	f7fe fcb1 	bl	8000b38 <__aeabi_dcmpgt>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d035      	beq.n	8002248 <HAL_UART_RxCpltCallback+0xd68>
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80021e8:	f7fe fc88 	bl	8000afc <__aeabi_dcmplt>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d02a      	beq.n	8002248 <HAL_UART_RxCpltCallback+0xd68>
						AnglePlot[1] = newangle;
 80021f2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80021f6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
						DistPlot[1] = dist;
 80021fa:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80021fe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8002202:	e021      	b.n	8002248 <HAL_UART_RxCpltCallback+0xd68>
 8002204:	f3af 8000 	nop.w
 8002208:	54442d18 	.word	0x54442d18
 800220c:	400921fb 	.word	0x400921fb
 8002210:	33333333 	.word	0x33333333
 8002214:	402f3333 	.word	0x402f3333
 8002218:	9999999a 	.word	0x9999999a
 800221c:	40319999 	.word	0x40319999
 8002220:	20001f20 	.word	0x20001f20
 8002224:	200091c0 	.word	0x200091c0
 8002228:	40668000 	.word	0x40668000
 800222c:	200052b0 	.word	0x200052b0
 8002230:	408f4000 	.word	0x408f4000
 8002234:	40768000 	.word	0x40768000
 8002238:	40568000 	.word	0x40568000
 800223c:	40370000 	.word	0x40370000
 8002240:	200091b0 	.word	0x200091b0
 8002244:	200091b8 	.word	0x200091b8
				if (270 < newangle && newangle < 360 && dist < 23) { //verification of third obstacle
 8002248:	a3bb      	add	r3, pc, #748	; (adr r3, 8002538 <HAL_UART_RxCpltCallback+0x1058>)
 800224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002252:	f7fe fc71 	bl	8000b38 <__aeabi_dcmpgt>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 808d 	beq.w	8002378 <HAL_UART_RxCpltCallback+0xe98>
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	4bbb      	ldr	r3, [pc, #748]	; (8002550 <HAL_UART_RxCpltCallback+0x1070>)
 8002264:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002268:	f7fe fc48 	bl	8000afc <__aeabi_dcmplt>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8082 	beq.w	8002378 <HAL_UART_RxCpltCallback+0xe98>
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	4bb6      	ldr	r3, [pc, #728]	; (8002554 <HAL_UART_RxCpltCallback+0x1074>)
 800227a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800227e:	f7fe fc3d 	bl	8000afc <__aeabi_dcmplt>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d077      	beq.n	8002378 <HAL_UART_RxCpltCallback+0xe98>
					obstaclex = X + (cos(newangle-270)*dist);
 8002288:	a3ab      	add	r3, pc, #684	; (adr r3, 8002538 <HAL_UART_RxCpltCallback+0x1058>)
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002292:	f7fe f809 	bl	80002a8 <__aeabi_dsub>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	ec43 2b17 	vmov	d7, r2, r3
 800229e:	eeb0 0a47 	vmov.f32	s0, s14
 80022a2:	eef0 0a67 	vmov.f32	s1, s15
 80022a6:	f008 fce7 	bl	800ac78 <cos>
 80022aa:	ec51 0b10 	vmov	r0, r1, d0
 80022ae:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80022b2:	f7fe f9b1 	bl	8000618 <__aeabi_dmul>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	4ba6      	ldr	r3, [pc, #664]	; (8002558 <HAL_UART_RxCpltCallback+0x1078>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	f7fd fff2 	bl	80002ac <__adddf3>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
					obstacley = Y + (sin(newangle-270)*dist);
 80022d0:	a399      	add	r3, pc, #612	; (adr r3, 8002538 <HAL_UART_RxCpltCallback+0x1058>)
 80022d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80022da:	f7fd ffe5 	bl	80002a8 <__aeabi_dsub>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	ec43 2b17 	vmov	d7, r2, r3
 80022e6:	eeb0 0a47 	vmov.f32	s0, s14
 80022ea:	eef0 0a67 	vmov.f32	s1, s15
 80022ee:	f008 fd17 	bl	800ad20 <sin>
 80022f2:	ec51 0b10 	vmov	r0, r1, d0
 80022f6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80022fa:	f7fe f98d 	bl	8000618 <__aeabi_dmul>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	4b95      	ldr	r3, [pc, #596]	; (800255c <HAL_UART_RxCpltCallback+0x107c>)
 8002308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230c:	f7fd ffce 	bl	80002ac <__adddf3>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
					if (obstaclex > 15.6 && obstaclex < 17.6 && obstacley > 14 && obstacley < 16) { //verification if current obstacle is possible
 8002318:	a389      	add	r3, pc, #548	; (adr r3, 8002540 <HAL_UART_RxCpltCallback+0x1060>)
 800231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002322:	f7fe fc09 	bl	8000b38 <__aeabi_dcmpgt>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d025      	beq.n	8002378 <HAL_UART_RxCpltCallback+0xe98>
 800232c:	a386      	add	r3, pc, #536	; (adr r3, 8002548 <HAL_UART_RxCpltCallback+0x1068>)
 800232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002332:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002336:	f7fe fbe1 	bl	8000afc <__aeabi_dcmplt>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01b      	beq.n	8002378 <HAL_UART_RxCpltCallback+0xe98>
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	4b86      	ldr	r3, [pc, #536]	; (8002560 <HAL_UART_RxCpltCallback+0x1080>)
 8002346:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800234a:	f7fe fbf5 	bl	8000b38 <__aeabi_dcmpgt>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d011      	beq.n	8002378 <HAL_UART_RxCpltCallback+0xe98>
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	4b82      	ldr	r3, [pc, #520]	; (8002564 <HAL_UART_RxCpltCallback+0x1084>)
 800235a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800235e:	f7fe fbcd 	bl	8000afc <__aeabi_dcmplt>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d007      	beq.n	8002378 <HAL_UART_RxCpltCallback+0xe98>
						AnglePlot[2] = newangle;
 8002368:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800236c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
						DistPlot[2] = dist;
 8002370:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002374:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
				if (180 < newangle && newangle < 270 && dist < 23) { //verification of fourth obstacle
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	4b7a      	ldr	r3, [pc, #488]	; (8002568 <HAL_UART_RxCpltCallback+0x1088>)
 800237e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002382:	f7fe fbd9 	bl	8000b38 <__aeabi_dcmpgt>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 808f 	beq.w	80024ac <HAL_UART_RxCpltCallback+0xfcc>
 800238e:	a36a      	add	r3, pc, #424	; (adr r3, 8002538 <HAL_UART_RxCpltCallback+0x1058>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002398:	f7fe fbb0 	bl	8000afc <__aeabi_dcmplt>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 8084 	beq.w	80024ac <HAL_UART_RxCpltCallback+0xfcc>
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_UART_RxCpltCallback+0x1074>)
 80023aa:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80023ae:	f7fe fba5 	bl	8000afc <__aeabi_dcmplt>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d079      	beq.n	80024ac <HAL_UART_RxCpltCallback+0xfcc>
					obstaclex = X - (cos(newangle-180)*dist);
 80023b8:	4b67      	ldr	r3, [pc, #412]	; (8002558 <HAL_UART_RxCpltCallback+0x1078>)
 80023ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	4b69      	ldr	r3, [pc, #420]	; (8002568 <HAL_UART_RxCpltCallback+0x1088>)
 80023c4:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80023c8:	f7fd ff6e 	bl	80002a8 <__aeabi_dsub>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	ec43 2b17 	vmov	d7, r2, r3
 80023d4:	eeb0 0a47 	vmov.f32	s0, s14
 80023d8:	eef0 0a67 	vmov.f32	s1, s15
 80023dc:	f008 fc4c 	bl	800ac78 <cos>
 80023e0:	ec51 0b10 	vmov	r0, r1, d0
 80023e4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80023e8:	f7fe f916 	bl	8000618 <__aeabi_dmul>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4620      	mov	r0, r4
 80023f2:	4629      	mov	r1, r5
 80023f4:	f7fd ff58 	bl	80002a8 <__aeabi_dsub>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
					obstacley = Y + (sin(newangle-180)*dist);
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	4b58      	ldr	r3, [pc, #352]	; (8002568 <HAL_UART_RxCpltCallback+0x1088>)
 8002406:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800240a:	f7fd ff4d 	bl	80002a8 <__aeabi_dsub>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	ec43 2b17 	vmov	d7, r2, r3
 8002416:	eeb0 0a47 	vmov.f32	s0, s14
 800241a:	eef0 0a67 	vmov.f32	s1, s15
 800241e:	f008 fc7f 	bl	800ad20 <sin>
 8002422:	ec51 0b10 	vmov	r0, r1, d0
 8002426:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800242a:	f7fe f8f5 	bl	8000618 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	4b49      	ldr	r3, [pc, #292]	; (800255c <HAL_UART_RxCpltCallback+0x107c>)
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	f7fd ff36 	bl	80002ac <__adddf3>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
					if (obstaclex > -2 && obstaclex < 0 && obstacley > 14 && obstacley < 16) { //verification if current obstacle is possible
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002450:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002454:	f7fe fb70 	bl	8000b38 <__aeabi_dcmpgt>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d026      	beq.n	80024ac <HAL_UART_RxCpltCallback+0xfcc>
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800246a:	f7fe fb47 	bl	8000afc <__aeabi_dcmplt>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01b      	beq.n	80024ac <HAL_UART_RxCpltCallback+0xfcc>
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	4b39      	ldr	r3, [pc, #228]	; (8002560 <HAL_UART_RxCpltCallback+0x1080>)
 800247a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800247e:	f7fe fb5b 	bl	8000b38 <__aeabi_dcmpgt>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d011      	beq.n	80024ac <HAL_UART_RxCpltCallback+0xfcc>
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	4b35      	ldr	r3, [pc, #212]	; (8002564 <HAL_UART_RxCpltCallback+0x1084>)
 800248e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002492:	f7fe fb33 	bl	8000afc <__aeabi_dcmplt>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_UART_RxCpltCallback+0xfcc>
						AnglePlot[3] = newangle;
 800249c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80024a0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
						DistPlot[3] = dist;
 80024a4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80024a8:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			for(int i = 0; i < indexLidar; i++){
 80024ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024b0:	3301      	adds	r3, #1
 80024b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024b6:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_UART_RxCpltCallback+0x108c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024be:	429a      	cmp	r2, r3
 80024c0:	f6ff ad34 	blt.w	8001f2c <HAL_UART_RxCpltCallback+0xa4c>
			x[0] = DistPlot[0]*cos(AnglePlot[0]-90)-1;
 80024c4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80024c8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	4b27      	ldr	r3, [pc, #156]	; (8002570 <HAL_UART_RxCpltCallback+0x1090>)
 80024d2:	f7fd fee9 	bl	80002a8 <__aeabi_dsub>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	ec43 2b17 	vmov	d7, r2, r3
 80024de:	eeb0 0a47 	vmov.f32	s0, s14
 80024e2:	eef0 0a67 	vmov.f32	s1, s15
 80024e6:	f008 fbc7 	bl	800ac78 <cos>
 80024ea:	ec53 2b10 	vmov	r2, r3, d0
 80024ee:	4620      	mov	r0, r4
 80024f0:	4629      	mov	r1, r5
 80024f2:	f7fe f891 	bl	8000618 <__aeabi_dmul>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4610      	mov	r0, r2
 80024fc:	4619      	mov	r1, r3
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <HAL_UART_RxCpltCallback+0x1094>)
 8002504:	f7fd fed0 	bl	80002a8 <__aeabi_dsub>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	e9c7 2302 	strd	r2, r3, [r7, #8]
			y[0] = DistPlot[0]*sin(AnglePlot[0]-90)-1;
 8002510:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8002514:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <HAL_UART_RxCpltCallback+0x1090>)
 800251e:	f7fd fec3 	bl	80002a8 <__aeabi_dsub>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	ec43 2b17 	vmov	d7, r2, r3
 800252a:	eeb0 0a47 	vmov.f32	s0, s14
 800252e:	eef0 0a67 	vmov.f32	s1, s15
 8002532:	f008 fbf5 	bl	800ad20 <sin>
 8002536:	e01f      	b.n	8002578 <HAL_UART_RxCpltCallback+0x1098>
 8002538:	00000000 	.word	0x00000000
 800253c:	4070e000 	.word	0x4070e000
 8002540:	33333333 	.word	0x33333333
 8002544:	402f3333 	.word	0x402f3333
 8002548:	9999999a 	.word	0x9999999a
 800254c:	40319999 	.word	0x40319999
 8002550:	40768000 	.word	0x40768000
 8002554:	40370000 	.word	0x40370000
 8002558:	200091b0 	.word	0x200091b0
 800255c:	200091b8 	.word	0x200091b8
 8002560:	402c0000 	.word	0x402c0000
 8002564:	40300000 	.word	0x40300000
 8002568:	40668000 	.word	0x40668000
 800256c:	20001f14 	.word	0x20001f14
 8002570:	40568000 	.word	0x40568000
 8002574:	3ff00000 	.word	0x3ff00000
 8002578:	ec53 2b10 	vmov	r2, r3, d0
 800257c:	4620      	mov	r0, r4
 800257e:	4629      	mov	r1, r5
 8002580:	f7fe f84a 	bl	8000618 <__aeabi_dmul>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	4bbf      	ldr	r3, [pc, #764]	; (8002890 <HAL_UART_RxCpltCallback+0x13b0>)
 8002592:	f7fd fe89 	bl	80002a8 <__aeabi_dsub>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			x[1] = 15.6-(DistPlot[1]*cos(AnglePlot[1])-1);
 800259e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80025a2:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80025a6:	eeb0 0a47 	vmov.f32	s0, s14
 80025aa:	eef0 0a67 	vmov.f32	s1, s15
 80025ae:	f008 fb63 	bl	800ac78 <cos>
 80025b2:	ec53 2b10 	vmov	r2, r3, d0
 80025b6:	4620      	mov	r0, r4
 80025b8:	4629      	mov	r1, r5
 80025ba:	f7fe f82d 	bl	8000618 <__aeabi_dmul>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	4bb1      	ldr	r3, [pc, #708]	; (8002890 <HAL_UART_RxCpltCallback+0x13b0>)
 80025cc:	f7fd fe6c 	bl	80002a8 <__aeabi_dsub>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	a1aa      	add	r1, pc, #680	; (adr r1, 8002880 <HAL_UART_RxCpltCallback+0x13a0>)
 80025d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025da:	f7fd fe65 	bl	80002a8 <__aeabi_dsub>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
			y[1] = DistPlot[1]*sin(AnglePlot[1])-1;
 80025e6:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80025ea:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80025ee:	eeb0 0a47 	vmov.f32	s0, s14
 80025f2:	eef0 0a67 	vmov.f32	s1, s15
 80025f6:	f008 fb93 	bl	800ad20 <sin>
 80025fa:	ec53 2b10 	vmov	r2, r3, d0
 80025fe:	4620      	mov	r0, r4
 8002600:	4629      	mov	r1, r5
 8002602:	f7fe f809 	bl	8000618 <__aeabi_dmul>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	4b9f      	ldr	r3, [pc, #636]	; (8002890 <HAL_UART_RxCpltCallback+0x13b0>)
 8002614:	f7fd fe48 	bl	80002a8 <__aeabi_dsub>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			x[2] = 15.6-(DistPlot[2]*cos(AnglePlot[2]-270)-1);
 8002620:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002624:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002628:	a397      	add	r3, pc, #604	; (adr r3, 8002888 <HAL_UART_RxCpltCallback+0x13a8>)
 800262a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262e:	f7fd fe3b 	bl	80002a8 <__aeabi_dsub>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	ec43 2b17 	vmov	d7, r2, r3
 800263a:	eeb0 0a47 	vmov.f32	s0, s14
 800263e:	eef0 0a67 	vmov.f32	s1, s15
 8002642:	f008 fb19 	bl	800ac78 <cos>
 8002646:	ec53 2b10 	vmov	r2, r3, d0
 800264a:	4620      	mov	r0, r4
 800264c:	4629      	mov	r1, r5
 800264e:	f7fd ffe3 	bl	8000618 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	4b8c      	ldr	r3, [pc, #560]	; (8002890 <HAL_UART_RxCpltCallback+0x13b0>)
 8002660:	f7fd fe22 	bl	80002a8 <__aeabi_dsub>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	a185      	add	r1, pc, #532	; (adr r1, 8002880 <HAL_UART_RxCpltCallback+0x13a0>)
 800266a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800266e:	f7fd fe1b 	bl	80002a8 <__aeabi_dsub>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	e9c7 2306 	strd	r2, r3, [r7, #24]
			y[2] = 15-(DistPlot[2]*sin(AnglePlot[2]-270)-1);
 800267a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800267e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002682:	a381      	add	r3, pc, #516	; (adr r3, 8002888 <HAL_UART_RxCpltCallback+0x13a8>)
 8002684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002688:	f7fd fe0e 	bl	80002a8 <__aeabi_dsub>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	ec43 2b17 	vmov	d7, r2, r3
 8002694:	eeb0 0a47 	vmov.f32	s0, s14
 8002698:	eef0 0a67 	vmov.f32	s1, s15
 800269c:	f008 fb40 	bl	800ad20 <sin>
 80026a0:	ec53 2b10 	vmov	r2, r3, d0
 80026a4:	4620      	mov	r0, r4
 80026a6:	4629      	mov	r1, r5
 80026a8:	f7fd ffb6 	bl	8000618 <__aeabi_dmul>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	4b75      	ldr	r3, [pc, #468]	; (8002890 <HAL_UART_RxCpltCallback+0x13b0>)
 80026ba:	f7fd fdf5 	bl	80002a8 <__aeabi_dsub>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	f04f 0000 	mov.w	r0, #0
 80026c6:	4973      	ldr	r1, [pc, #460]	; (8002894 <HAL_UART_RxCpltCallback+0x13b4>)
 80026c8:	f7fd fdee 	bl	80002a8 <__aeabi_dsub>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			x[3] = DistPlot[3]*cos(AnglePlot[3]-180)-1;
 80026d4:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80026d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	4b6d      	ldr	r3, [pc, #436]	; (8002898 <HAL_UART_RxCpltCallback+0x13b8>)
 80026e2:	f7fd fde1 	bl	80002a8 <__aeabi_dsub>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	ec43 2b17 	vmov	d7, r2, r3
 80026ee:	eeb0 0a47 	vmov.f32	s0, s14
 80026f2:	eef0 0a67 	vmov.f32	s1, s15
 80026f6:	f008 fabf 	bl	800ac78 <cos>
 80026fa:	ec53 2b10 	vmov	r2, r3, d0
 80026fe:	4620      	mov	r0, r4
 8002700:	4629      	mov	r1, r5
 8002702:	f7fd ff89 	bl	8000618 <__aeabi_dmul>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	4b5f      	ldr	r3, [pc, #380]	; (8002890 <HAL_UART_RxCpltCallback+0x13b0>)
 8002714:	f7fd fdc8 	bl	80002a8 <__aeabi_dsub>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	e9c7 2308 	strd	r2, r3, [r7, #32]
			y[3] = 15-(DistPlot[3]*sin(AnglePlot[3]-180)-1);
 8002720:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002724:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	4b5a      	ldr	r3, [pc, #360]	; (8002898 <HAL_UART_RxCpltCallback+0x13b8>)
 800272e:	f7fd fdbb 	bl	80002a8 <__aeabi_dsub>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	ec43 2b17 	vmov	d7, r2, r3
 800273a:	eeb0 0a47 	vmov.f32	s0, s14
 800273e:	eef0 0a67 	vmov.f32	s1, s15
 8002742:	f008 faed 	bl	800ad20 <sin>
 8002746:	ec53 2b10 	vmov	r2, r3, d0
 800274a:	4620      	mov	r0, r4
 800274c:	4629      	mov	r1, r5
 800274e:	f7fd ff63 	bl	8000618 <__aeabi_dmul>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <HAL_UART_RxCpltCallback+0x13b0>)
 8002760:	f7fd fda2 	bl	80002a8 <__aeabi_dsub>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	f04f 0000 	mov.w	r0, #0
 800276c:	4949      	ldr	r1, [pc, #292]	; (8002894 <HAL_UART_RxCpltCallback+0x13b4>)
 800276e:	f7fd fd9b 	bl	80002a8 <__aeabi_dsub>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			for(int n=0;n<4;n++){
 800277a:	2300      	movs	r3, #0
 800277c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002780:	e03e      	b.n	8002800 <HAL_UART_RxCpltCallback+0x1320>
				if(DistPlot[n]!=0){
 8002782:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	33f0      	adds	r3, #240	; 0xf0
 800278a:	443b      	add	r3, r7
 800278c:	3b88      	subs	r3, #136	; 0x88
 800278e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	f7fe f9a5 	bl	8000ae8 <__aeabi_dcmpeq>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d128      	bne.n	80027f6 <HAL_UART_RxCpltCallback+0x1316>
					X+=x[n];
 80027a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	33f0      	adds	r3, #240	; 0xf0
 80027ac:	443b      	add	r3, r7
 80027ae:	3be8      	subs	r3, #232	; 0xe8
 80027b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027b4:	4b39      	ldr	r3, [pc, #228]	; (800289c <HAL_UART_RxCpltCallback+0x13bc>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fd fd77 	bl	80002ac <__adddf3>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4936      	ldr	r1, [pc, #216]	; (800289c <HAL_UART_RxCpltCallback+0x13bc>)
 80027c4:	e9c1 2300 	strd	r2, r3, [r1]
					Y+=y[n];
 80027c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	33f0      	adds	r3, #240	; 0xf0
 80027d0:	443b      	add	r3, r7
 80027d2:	3bc8      	subs	r3, #200	; 0xc8
 80027d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027d8:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <HAL_UART_RxCpltCallback+0x13c0>)
 80027da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027de:	f7fd fd65 	bl	80002ac <__adddf3>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	492e      	ldr	r1, [pc, #184]	; (80028a0 <HAL_UART_RxCpltCallback+0x13c0>)
 80027e8:	e9c1 2300 	strd	r2, r3, [r1]
					intplot++;
 80027ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027f0:	3301      	adds	r3, #1
 80027f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			for(int n=0;n<4;n++){
 80027f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027fa:	3301      	adds	r3, #1
 80027fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002800:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002804:	2b03      	cmp	r3, #3
 8002806:	ddbc      	ble.n	8002782 <HAL_UART_RxCpltCallback+0x12a2>
			if(intplot!=0){
 8002808:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800280c:	2b00      	cmp	r3, #0
 800280e:	d04b      	beq.n	80028a8 <HAL_UART_RxCpltCallback+0x13c8>
				X = (X/intplot)*1000.0;
 8002810:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_UART_RxCpltCallback+0x13bc>)
 8002812:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002816:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800281a:	f7fd fe93 	bl	8000544 <__aeabi_i2d>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4620      	mov	r0, r4
 8002824:	4629      	mov	r1, r5
 8002826:	f7fe f821 	bl	800086c <__aeabi_ddiv>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4610      	mov	r0, r2
 8002830:	4619      	mov	r1, r3
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <HAL_UART_RxCpltCallback+0x13c4>)
 8002838:	f7fd feee 	bl	8000618 <__aeabi_dmul>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4916      	ldr	r1, [pc, #88]	; (800289c <HAL_UART_RxCpltCallback+0x13bc>)
 8002842:	e9c1 2300 	strd	r2, r3, [r1]
				Y = (Y/intplot)*1000.0;
 8002846:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <HAL_UART_RxCpltCallback+0x13c0>)
 8002848:	e9d3 4500 	ldrd	r4, r5, [r3]
 800284c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8002850:	f7fd fe78 	bl	8000544 <__aeabi_i2d>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4620      	mov	r0, r4
 800285a:	4629      	mov	r1, r5
 800285c:	f7fe f806 	bl	800086c <__aeabi_ddiv>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_UART_RxCpltCallback+0x13c4>)
 800286e:	f7fd fed3 	bl	8000618 <__aeabi_dmul>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	490a      	ldr	r1, [pc, #40]	; (80028a0 <HAL_UART_RxCpltCallback+0x13c0>)
 8002878:	e9c1 2300 	strd	r2, r3, [r1]
 800287c:	e022      	b.n	80028c4 <HAL_UART_RxCpltCallback+0x13e4>
 800287e:	bf00      	nop
 8002880:	33333333 	.word	0x33333333
 8002884:	402f3333 	.word	0x402f3333
 8002888:	00000000 	.word	0x00000000
 800288c:	4070e000 	.word	0x4070e000
 8002890:	3ff00000 	.word	0x3ff00000
 8002894:	402e0000 	.word	0x402e0000
 8002898:	40668000 	.word	0x40668000
 800289c:	200091b0 	.word	0x200091b0
 80028a0:	200091b8 	.word	0x200091b8
 80028a4:	408f4000 	.word	0x408f4000
				X=0;
 80028a8:	4922      	ldr	r1, [pc, #136]	; (8002934 <HAL_UART_RxCpltCallback+0x1454>)
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	e9c1 2300 	strd	r2, r3, [r1]
				Y=0;
 80028b6:	4920      	ldr	r1, [pc, #128]	; (8002938 <HAL_UART_RxCpltCallback+0x1458>)
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	e9c1 2300 	strd	r2, r3, [r1]
			I2C_TxBuffer[3]='L';
 80028c4:	4b1d      	ldr	r3, [pc, #116]	; (800293c <HAL_UART_RxCpltCallback+0x145c>)
 80028c6:	224c      	movs	r2, #76	; 0x4c
 80028c8:	70da      	strb	r2, [r3, #3]
			I2C_TxBuffer[4]= (((unsigned long)X >> 8) & 0xff);
 80028ca:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <HAL_UART_RxCpltCallback+0x1454>)
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	f7fe f978 	bl	8000bc8 <__aeabi_d2uiz>
 80028d8:	4603      	mov	r3, r0
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_UART_RxCpltCallback+0x145c>)
 80028e0:	711a      	strb	r2, [r3, #4]
			I2C_TxBuffer[5]= ((unsigned long)X & 0xff);
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <HAL_UART_RxCpltCallback+0x1454>)
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	f7fe f96c 	bl	8000bc8 <__aeabi_d2uiz>
 80028f0:	4603      	mov	r3, r0
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_UART_RxCpltCallback+0x145c>)
 80028f6:	715a      	strb	r2, [r3, #5]
			I2C_TxBuffer[6]= (((unsigned long)Y >> 8) & 0xff);
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <HAL_UART_RxCpltCallback+0x1458>)
 80028fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	f7fe f961 	bl	8000bc8 <__aeabi_d2uiz>
 8002906:	4603      	mov	r3, r0
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	b2da      	uxtb	r2, r3
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_UART_RxCpltCallback+0x145c>)
 800290e:	719a      	strb	r2, [r3, #6]
			I2C_TxBuffer[7]= ((unsigned long)Y & 0xff);
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_UART_RxCpltCallback+0x1458>)
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	f7fe f955 	bl	8000bc8 <__aeabi_d2uiz>
 800291e:	4603      	mov	r3, r0
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_UART_RxCpltCallback+0x145c>)
 8002924:	71da      	strb	r2, [r3, #7]
			Wmode='F';
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_UART_RxCpltCallback+0x1460>)
 8002928:	2246      	movs	r2, #70	; 0x46
 800292a:	701a      	strb	r2, [r3, #0]
}
 800292c:	bf00      	nop
 800292e:	37f0      	adds	r7, #240	; 0xf0
 8002930:	46bd      	mov	sp, r7
 8002932:	bdb0      	pop	{r4, r5, r7, pc}
 8002934:	200091b0 	.word	0x200091b0
 8002938:	200091b8 	.word	0x200091b8
 800293c:	20000000 	.word	0x20000000
 8002940:	20000018 	.word	0x20000018

08002944 <HAL_I2C_AddrCallback>:


//-----I2C connection management------
//command from master is received
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
 8002950:	4613      	mov	r3, r2
 8002952:	803b      	strh	r3, [r7, #0]
	dir=TransferDirection; //request type (reception=0 ; transmission=1)
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_I2C_AddrCallback+0x24>)
 8002958:	6013      	str	r3, [r2, #0]
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000014 	.word	0x20000014

0800296c <HAL_I2C_SlaveTxCpltCallback>:

//activated when i2c transmit_IT is called
void HAL_I2C_SlaveTxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
	strcpy((char*)I2C_RxBuffer,""); //emptying the i2c rx buffer
 8002974:	4b04      	ldr	r3, [pc, #16]	; (8002988 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	200003c4 	.word	0x200003c4

0800298c <HAL_I2C_SlaveRxCpltCallback>:


//activated when i2c receive_IT is called
void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	//Verification of information needed
	if (strcmp((char*)I2C_RxBuffer, "WL:") == 0){
 8002994:	490e      	ldr	r1, [pc, #56]	; (80029d0 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8002996:	480f      	ldr	r0, [pc, #60]	; (80029d4 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 8002998:	f7fd fc1a 	bl	80001d0 <strcmp>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d112      	bne.n	80029c8 <HAL_I2C_SlaveRxCpltCallback+0x3c>
		Theta_N = (double)((I2C_RxBuffer[3] << 8) & I2C_RxBuffer[4])/1000.0; //recuperation of angle theta measured by the ctrl stm32
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 80029a4:	78db      	ldrb	r3, [r3, #3]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 80029aa:	7912      	ldrb	r2, [r2, #4]
 80029ac:	4013      	ands	r3, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fd fdc8 	bl	8000544 <__aeabi_i2d>
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80029ba:	f7fd ff57 	bl	800086c <__aeabi_ddiv>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4906      	ldr	r1, [pc, #24]	; (80029dc <HAL_I2C_SlaveRxCpltCallback+0x50>)
 80029c4:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	0800bdd0 	.word	0x0800bdd0
 80029d4:	200003c4 	.word	0x200003c4
 80029d8:	408f4000 	.word	0x408f4000
 80029dc:	200091c0 	.word	0x200091c0

080029e0 <Heartbeat>:


void Heartbeat() {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - beat > 500) { //verification of time for 500ms
 80029e4:	f000 fb50 	bl	8003088 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <Heartbeat+0x2c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029f4:	d908      	bls.n	8002a08 <Heartbeat+0x28>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //inversion of led (on/off)
 80029f6:	2108      	movs	r1, #8
 80029f8:	4805      	ldr	r0, [pc, #20]	; (8002a10 <Heartbeat+0x30>)
 80029fa:	f000 fe71 	bl	80036e0 <HAL_GPIO_TogglePin>
		beat = HAL_GetTick(); //restarting the process
 80029fe:	f000 fb43 	bl	8003088 <HAL_GetTick>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4a01      	ldr	r2, [pc, #4]	; (8002a0c <Heartbeat+0x2c>)
 8002a06:	6013      	str	r3, [r2, #0]
	}
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	200091c8 	.word	0x200091c8
 8002a10:	48000400 	.word	0x48000400

08002a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a18:	b672      	cpsid	i
}
 8002a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <Error_Handler+0x8>
	...

08002a20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a26:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <HAL_MspInit+0x44>)
 8002a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2a:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <HAL_MspInit+0x44>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6613      	str	r3, [r2, #96]	; 0x60
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_MspInit+0x44>)
 8002a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_MspInit+0x44>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <HAL_MspInit+0x44>)
 8002a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a48:	6593      	str	r3, [r2, #88]	; 0x58
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_MspInit+0x44>)
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000

08002a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b09e      	sub	sp, #120	; 0x78
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a80:	f107 0310 	add.w	r3, r7, #16
 8002a84:	2254      	movs	r2, #84	; 0x54
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f005 fbd5 	bl	8008238 <memset>
  if(hi2c->Instance==I2C1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a22      	ldr	r2, [pc, #136]	; (8002b1c <HAL_I2C_MspInit+0xb4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d13d      	bne.n	8002b14 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a98:	2340      	movs	r3, #64	; 0x40
 8002a9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aa0:	f107 0310 	add.w	r3, r7, #16
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f003 f815 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002ab0:	f7ff ffb0 	bl	8002a14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_I2C_MspInit+0xb8>)
 8002ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab8:	4a19      	ldr	r2, [pc, #100]	; (8002b20 <HAL_I2C_MspInit+0xb8>)
 8002aba:	f043 0302 	orr.w	r3, r3, #2
 8002abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ac0:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <HAL_I2C_MspInit+0xb8>)
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002acc:	23c0      	movs	r3, #192	; 0xc0
 8002ace:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad0:	2312      	movs	r3, #18
 8002ad2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002adc:	2304      	movs	r3, #4
 8002ade:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	480f      	ldr	r0, [pc, #60]	; (8002b24 <HAL_I2C_MspInit+0xbc>)
 8002ae8:	f000 fc78 	bl	80033dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <HAL_I2C_MspInit+0xb8>)
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	4a0b      	ldr	r2, [pc, #44]	; (8002b20 <HAL_I2C_MspInit+0xb8>)
 8002af2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002af6:	6593      	str	r3, [r2, #88]	; 0x58
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_I2C_MspInit+0xb8>)
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002b04:	2200      	movs	r2, #0
 8002b06:	2100      	movs	r1, #0
 8002b08:	201f      	movs	r0, #31
 8002b0a:	f000 fba4 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002b0e:	201f      	movs	r0, #31
 8002b10:	f000 fbbd 	bl	800328e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b14:	bf00      	nop
 8002b16:	3778      	adds	r7, #120	; 0x78
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40005400 	.word	0x40005400
 8002b20:	40021000 	.word	0x40021000
 8002b24:	48000400 	.word	0x48000400

08002b28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <HAL_TIM_Base_MspInit+0x38>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d10b      	bne.n	8002b52 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_TIM_Base_MspInit+0x3c>)
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3e:	4a09      	ldr	r2, [pc, #36]	; (8002b64 <HAL_TIM_Base_MspInit+0x3c>)
 8002b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b44:	6613      	str	r3, [r2, #96]	; 0x60
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_TIM_Base_MspInit+0x3c>)
 8002b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40014400 	.word	0x40014400
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 030c 	add.w	r3, r7, #12
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a11      	ldr	r2, [pc, #68]	; (8002bcc <HAL_TIM_MspPostInit+0x64>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d11c      	bne.n	8002bc4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_TIM_MspPostInit+0x68>)
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	4a10      	ldr	r2, [pc, #64]	; (8002bd0 <HAL_TIM_MspPostInit+0x68>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <HAL_TIM_MspPostInit+0x68>)
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ba2:	2340      	movs	r3, #64	; 0x40
 8002ba4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002bb2:	230e      	movs	r3, #14
 8002bb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb6:	f107 030c 	add.w	r3, r7, #12
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc0:	f000 fc0c 	bl	80033dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002bc4:	bf00      	nop
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40014400 	.word	0x40014400
 8002bd0:	40021000 	.word	0x40021000

08002bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b0a0      	sub	sp, #128	; 0x80
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bec:	f107 0318 	add.w	r3, r7, #24
 8002bf0:	2254      	movs	r2, #84	; 0x54
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f005 fb1f 	bl	8008238 <memset>
  if(huart->Instance==USART1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a46      	ldr	r2, [pc, #280]	; (8002d18 <HAL_UART_MspInit+0x144>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d140      	bne.n	8002c86 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c04:	2301      	movs	r3, #1
 8002c06:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c0c:	f107 0318 	add.w	r3, r7, #24
 8002c10:	4618      	mov	r0, r3
 8002c12:	f002 ff5f 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c1c:	f7ff fefa 	bl	8002a14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c20:	4b3e      	ldr	r3, [pc, #248]	; (8002d1c <HAL_UART_MspInit+0x148>)
 8002c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c24:	4a3d      	ldr	r2, [pc, #244]	; (8002d1c <HAL_UART_MspInit+0x148>)
 8002c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c2a:	6613      	str	r3, [r2, #96]	; 0x60
 8002c2c:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_UART_MspInit+0x148>)
 8002c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c38:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <HAL_UART_MspInit+0x148>)
 8002c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3c:	4a37      	ldr	r2, [pc, #220]	; (8002d1c <HAL_UART_MspInit+0x148>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c44:	4b35      	ldr	r3, [pc, #212]	; (8002d1c <HAL_UART_MspInit+0x148>)
 8002c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c54:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c62:	2307      	movs	r3, #7
 8002c64:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c70:	f000 fbb4 	bl	80033dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c74:	2200      	movs	r2, #0
 8002c76:	2100      	movs	r1, #0
 8002c78:	2025      	movs	r0, #37	; 0x25
 8002c7a:	f000 faec 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c7e:	2025      	movs	r0, #37	; 0x25
 8002c80:	f000 fb05 	bl	800328e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c84:	e043      	b.n	8002d0e <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <HAL_UART_MspInit+0x14c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d13e      	bne.n	8002d0e <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c90:	2302      	movs	r3, #2
 8002c92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c94:	2300      	movs	r3, #0
 8002c96:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c98:	f107 0318 	add.w	r3, r7, #24
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f002 ff19 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002ca8:	f7ff feb4 	bl	8002a14 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_UART_MspInit+0x148>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	4a1a      	ldr	r2, [pc, #104]	; (8002d1c <HAL_UART_MspInit+0x148>)
 8002cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cb8:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <HAL_UART_MspInit+0x148>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc4:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <HAL_UART_MspInit+0x148>)
 8002cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_UART_MspInit+0x148>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_UART_MspInit+0x148>)
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002cdc:	230c      	movs	r3, #12
 8002cde:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cec:	2307      	movs	r3, #7
 8002cee:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cfa:	f000 fb6f 	bl	80033dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2100      	movs	r1, #0
 8002d02:	2026      	movs	r0, #38	; 0x26
 8002d04:	f000 faa7 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d08:	2026      	movs	r0, #38	; 0x26
 8002d0a:	f000 fac0 	bl	800328e <HAL_NVIC_EnableIRQ>
}
 8002d0e:	bf00      	nop
 8002d10:	3780      	adds	r7, #128	; 0x80
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40013800 	.word	0x40013800
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40004400 	.word	0x40004400

08002d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <NMI_Handler+0x4>

08002d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <HardFault_Handler+0x4>

08002d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <MemManage_Handler+0x4>

08002d36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3a:	e7fe      	b.n	8002d3a <BusFault_Handler+0x4>

08002d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <UsageFault_Handler+0x4>

08002d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d70:	f000 f976 	bl	8003060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002d7c:	4802      	ldr	r0, [pc, #8]	; (8002d88 <I2C1_EV_IRQHandler+0x10>)
 8002d7e:	f000 fec1 	bl	8003b04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	2000021c 	.word	0x2000021c

08002d8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d90:	4802      	ldr	r0, [pc, #8]	; (8002d9c <USART1_IRQHandler+0x10>)
 8002d92:	f003 ffbf 	bl	8006d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200002bc 	.word	0x200002bc

08002da0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <USART2_IRQHandler+0x10>)
 8002da6:	f003 ffb5 	bl	8006d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000340 	.word	0x20000340

08002db4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return 1;
 8002db8:	2301      	movs	r3, #1
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <_kill>:

int _kill(int pid, int sig)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dce:	f005 fa09 	bl	80081e4 <__errno>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2216      	movs	r2, #22
 8002dd6:	601a      	str	r2, [r3, #0]
  return -1;
 8002dd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <_exit>:

void _exit (int status)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dec:	f04f 31ff 	mov.w	r1, #4294967295
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff ffe7 	bl	8002dc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002df6:	e7fe      	b.n	8002df6 <_exit+0x12>

08002df8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e00a      	b.n	8002e20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e0a:	f3af 8000 	nop.w
 8002e0e:	4601      	mov	r1, r0
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	60ba      	str	r2, [r7, #8]
 8002e16:	b2ca      	uxtb	r2, r1
 8002e18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	dbf0      	blt.n	8002e0a <_read+0x12>
  }

  return len;
 8002e28:	687b      	ldr	r3, [r7, #4]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b086      	sub	sp, #24
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	e009      	b.n	8002e58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	60ba      	str	r2, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3301      	adds	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	dbf1      	blt.n	8002e44 <_write+0x12>
  }
  return len;
 8002e60:	687b      	ldr	r3, [r7, #4]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <_close>:

int _close(int file)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e92:	605a      	str	r2, [r3, #4]
  return 0;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <_isatty>:

int _isatty(int file)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002eaa:	2301      	movs	r3, #1
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002edc:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <_sbrk+0x5c>)
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <_sbrk+0x60>)
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ee8:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <_sbrk+0x64>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <_sbrk+0x64>)
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <_sbrk+0x68>)
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <_sbrk+0x64>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d207      	bcs.n	8002f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f04:	f005 f96e 	bl	80081e4 <__errno>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	e009      	b.n	8002f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <_sbrk+0x64>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	4a05      	ldr	r2, [pc, #20]	; (8002f38 <_sbrk+0x64>)
 8002f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f26:	68fb      	ldr	r3, [r7, #12]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20010000 	.word	0x20010000
 8002f34:	00000400 	.word	0x00000400
 8002f38:	200091cc 	.word	0x200091cc
 8002f3c:	200091e8 	.word	0x200091e8

08002f40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <SystemInit+0x20>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <SystemInit+0x20>)
 8002f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f68:	f7ff ffea 	bl	8002f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f6c:	480c      	ldr	r0, [pc, #48]	; (8002fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f6e:	490d      	ldr	r1, [pc, #52]	; (8002fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f70:	4a0d      	ldr	r2, [pc, #52]	; (8002fa8 <LoopForever+0xe>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f74:	e002      	b.n	8002f7c <LoopCopyDataInit>

08002f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f7a:	3304      	adds	r3, #4

08002f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f80:	d3f9      	bcc.n	8002f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f82:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f84:	4c0a      	ldr	r4, [pc, #40]	; (8002fb0 <LoopForever+0x16>)
  movs r3, #0
 8002f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f88:	e001      	b.n	8002f8e <LoopFillZerobss>

08002f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f8c:	3204      	adds	r2, #4

08002f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f90:	d3fb      	bcc.n	8002f8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f92:	f005 f92d 	bl	80081f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f96:	f7fe f809 	bl	8000fac <main>

08002f9a <LoopForever>:

LoopForever:
    b LoopForever
 8002f9a:	e7fe      	b.n	8002f9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f9c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fa4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002fa8:	0800c3e0 	.word	0x0800c3e0
  ldr r2, =_sbss
 8002fac:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002fb0:	200091e4 	.word	0x200091e4

08002fb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fb4:	e7fe      	b.n	8002fb4 <ADC1_IRQHandler>

08002fb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fc0:	2003      	movs	r0, #3
 8002fc2:	f000 f93d 	bl	8003240 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fc6:	200f      	movs	r0, #15
 8002fc8:	f000 f80e 	bl	8002fe8 <HAL_InitTick>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	71fb      	strb	r3, [r7, #7]
 8002fd6:	e001      	b.n	8002fdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fd8:	f7ff fd22 	bl	8002a20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ff4:	4b17      	ldr	r3, [pc, #92]	; (8003054 <HAL_InitTick+0x6c>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d023      	beq.n	8003044 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ffc:	4b16      	ldr	r3, [pc, #88]	; (8003058 <HAL_InitTick+0x70>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_InitTick+0x6c>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	4619      	mov	r1, r3
 8003006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800300a:	fbb3 f3f1 	udiv	r3, r3, r1
 800300e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f949 	bl	80032aa <HAL_SYSTICK_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10f      	bne.n	800303e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b0f      	cmp	r3, #15
 8003022:	d809      	bhi.n	8003038 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003024:	2200      	movs	r2, #0
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	f000 f913 	bl	8003256 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003030:	4a0a      	ldr	r2, [pc, #40]	; (800305c <HAL_InitTick+0x74>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	e007      	b.n	8003048 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e004      	b.n	8003048 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
 8003042:	e001      	b.n	8003048 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	2000002c 	.word	0x2000002c
 8003058:	20000024 	.word	0x20000024
 800305c:	20000028 	.word	0x20000028

08003060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_IncTick+0x20>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_IncTick+0x24>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4413      	add	r3, r2
 8003070:	4a04      	ldr	r2, [pc, #16]	; (8003084 <HAL_IncTick+0x24>)
 8003072:	6013      	str	r3, [r2, #0]
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	2000002c 	.word	0x2000002c
 8003084:	200091d0 	.word	0x200091d0

08003088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  return uwTick;
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_GetTick+0x14>)
 800308e:	681b      	ldr	r3, [r3, #0]
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	200091d0 	.word	0x200091d0

080030a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030bc:	4013      	ands	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d2:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	60d3      	str	r3, [r2, #12]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ec:	4b04      	ldr	r3, [pc, #16]	; (8003100 <__NVIC_GetPriorityGrouping+0x18>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	f003 0307 	and.w	r3, r3, #7
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	2b00      	cmp	r3, #0
 8003114:	db0b      	blt.n	800312e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	f003 021f 	and.w	r2, r3, #31
 800311c:	4907      	ldr	r1, [pc, #28]	; (800313c <__NVIC_EnableIRQ+0x38>)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2001      	movs	r0, #1
 8003126:	fa00 f202 	lsl.w	r2, r0, r2
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000e100 	.word	0xe000e100

08003140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	db0a      	blt.n	800316a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	490c      	ldr	r1, [pc, #48]	; (800318c <__NVIC_SetPriority+0x4c>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	0112      	lsls	r2, r2, #4
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	440b      	add	r3, r1
 8003164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003168:	e00a      	b.n	8003180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4908      	ldr	r1, [pc, #32]	; (8003190 <__NVIC_SetPriority+0x50>)
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	3b04      	subs	r3, #4
 8003178:	0112      	lsls	r2, r2, #4
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	440b      	add	r3, r1
 800317e:	761a      	strb	r2, [r3, #24]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000e100 	.word	0xe000e100
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f1c3 0307 	rsb	r3, r3, #7
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	bf28      	it	cs
 80031b2:	2304      	movcs	r3, #4
 80031b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d902      	bls.n	80031c4 <NVIC_EncodePriority+0x30>
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3b03      	subs	r3, #3
 80031c2:	e000      	b.n	80031c6 <NVIC_EncodePriority+0x32>
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	401a      	ands	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031dc:	f04f 31ff 	mov.w	r1, #4294967295
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	43d9      	mvns	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	4313      	orrs	r3, r2
         );
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800320c:	d301      	bcc.n	8003212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320e:	2301      	movs	r3, #1
 8003210:	e00f      	b.n	8003232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <SysTick_Config+0x40>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800321a:	210f      	movs	r1, #15
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	f7ff ff8e 	bl	8003140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <SysTick_Config+0x40>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <SysTick_Config+0x40>)
 800322c:	2207      	movs	r2, #7
 800322e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000e010 	.word	0xe000e010

08003240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ff29 	bl	80030a0 <__NVIC_SetPriorityGrouping>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003268:	f7ff ff3e 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 800326c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	6978      	ldr	r0, [r7, #20]
 8003274:	f7ff ff8e 	bl	8003194 <NVIC_EncodePriority>
 8003278:	4602      	mov	r2, r0
 800327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff5d 	bl	8003140 <__NVIC_SetPriority>
}
 8003286:	bf00      	nop
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff31 	bl	8003104 <__NVIC_EnableIRQ>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ffa2 	bl	80031fc <SysTick_Config>
 80032b8:	4603      	mov	r3, r0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d008      	beq.n	80032ec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2204      	movs	r2, #4
 80032de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e022      	b.n	8003332 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 020e 	bic.w	r2, r2, #14
 80032fa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0201 	bic.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003310:	f003 021c 	and.w	r2, r3, #28
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	2101      	movs	r1, #1
 800331a:	fa01 f202 	lsl.w	r2, r1, r2
 800331e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003330:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d005      	beq.n	8003362 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2204      	movs	r2, #4
 800335a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	e029      	b.n	80033b6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 020e 	bic.w	r2, r2, #14
 8003370:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0201 	bic.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f003 021c 	and.w	r2, r3, #28
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2101      	movs	r1, #1
 8003390:	fa01 f202 	lsl.w	r2, r1, r2
 8003394:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
    }
  }
  return status;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033ce:	b2db      	uxtb	r3, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ea:	e148      	b.n	800367e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	2101      	movs	r1, #1
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	4013      	ands	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 813a 	beq.w	8003678 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d005      	beq.n	800341c <HAL_GPIO_Init+0x40>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d130      	bne.n	800347e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003452:	2201      	movs	r2, #1
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4013      	ands	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	f003 0201 	and.w	r2, r3, #1
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b03      	cmp	r3, #3
 8003488:	d017      	beq.n	80034ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	2203      	movs	r2, #3
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4013      	ands	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d123      	bne.n	800350e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	08da      	lsrs	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3208      	adds	r2, #8
 80034ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	220f      	movs	r2, #15
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	08da      	lsrs	r2, r3, #3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3208      	adds	r2, #8
 8003508:	6939      	ldr	r1, [r7, #16]
 800350a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	2203      	movs	r2, #3
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0203 	and.w	r2, r3, #3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8094 	beq.w	8003678 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003550:	4b52      	ldr	r3, [pc, #328]	; (800369c <HAL_GPIO_Init+0x2c0>)
 8003552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003554:	4a51      	ldr	r2, [pc, #324]	; (800369c <HAL_GPIO_Init+0x2c0>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6613      	str	r3, [r2, #96]	; 0x60
 800355c:	4b4f      	ldr	r3, [pc, #316]	; (800369c <HAL_GPIO_Init+0x2c0>)
 800355e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003568:	4a4d      	ldr	r2, [pc, #308]	; (80036a0 <HAL_GPIO_Init+0x2c4>)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	089b      	lsrs	r3, r3, #2
 800356e:	3302      	adds	r3, #2
 8003570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003574:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	220f      	movs	r2, #15
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003592:	d00d      	beq.n	80035b0 <HAL_GPIO_Init+0x1d4>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a43      	ldr	r2, [pc, #268]	; (80036a4 <HAL_GPIO_Init+0x2c8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d007      	beq.n	80035ac <HAL_GPIO_Init+0x1d0>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a42      	ldr	r2, [pc, #264]	; (80036a8 <HAL_GPIO_Init+0x2cc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d101      	bne.n	80035a8 <HAL_GPIO_Init+0x1cc>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e004      	b.n	80035b2 <HAL_GPIO_Init+0x1d6>
 80035a8:	2307      	movs	r3, #7
 80035aa:	e002      	b.n	80035b2 <HAL_GPIO_Init+0x1d6>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <HAL_GPIO_Init+0x1d6>
 80035b0:	2300      	movs	r3, #0
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	f002 0203 	and.w	r2, r2, #3
 80035b8:	0092      	lsls	r2, r2, #2
 80035ba:	4093      	lsls	r3, r2
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035c2:	4937      	ldr	r1, [pc, #220]	; (80036a0 <HAL_GPIO_Init+0x2c4>)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	3302      	adds	r3, #2
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035d0:	4b36      	ldr	r3, [pc, #216]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	43db      	mvns	r3, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035f4:	4a2d      	ldr	r2, [pc, #180]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035fa:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	43db      	mvns	r3, r3
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4013      	ands	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800361e:	4a23      	ldr	r2, [pc, #140]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003624:	4b21      	ldr	r3, [pc, #132]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	43db      	mvns	r3, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003648:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800364e:	4b17      	ldr	r3, [pc, #92]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	43db      	mvns	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003672:	4a0e      	ldr	r2, [pc, #56]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	3301      	adds	r3, #1
 800367c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	f47f aeaf 	bne.w	80033ec <HAL_GPIO_Init+0x10>
  }
}
 800368e:	bf00      	nop
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	40021000 	.word	0x40021000
 80036a0:	40010000 	.word	0x40010000
 80036a4:	48000400 	.word	0x48000400
 80036a8:	48000800 	.word	0x48000800
 80036ac:	40010400 	.word	0x40010400

080036b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	807b      	strh	r3, [r7, #2]
 80036bc:	4613      	mov	r3, r2
 80036be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c0:	787b      	ldrb	r3, [r7, #1]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036c6:	887a      	ldrh	r2, [r7, #2]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036cc:	e002      	b.n	80036d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036ce:	887a      	ldrh	r2, [r7, #2]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036f2:	887a      	ldrh	r2, [r7, #2]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4013      	ands	r3, r2
 80036f8:	041a      	lsls	r2, r3, #16
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	43d9      	mvns	r1, r3
 80036fe:	887b      	ldrh	r3, [r7, #2]
 8003700:	400b      	ands	r3, r1
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	619a      	str	r2, [r3, #24]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e081      	b.n	800382a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff f994 	bl	8002a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2224      	movs	r2, #36	; 0x24
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0201 	bic.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003764:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003774:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d107      	bne.n	800378e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	e006      	b.n	800379c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800379a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d104      	bne.n	80037ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69d9      	ldr	r1, [r3, #28]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003850:	2b28      	cmp	r3, #40	; 0x28
 8003852:	f040 808a 	bne.w	800396a <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d105      	bne.n	800386e <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e07e      	b.n	800396c <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800386e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f001 f99c 	bl	8004bb0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8003882:	2302      	movs	r3, #2
 8003884:	e072      	b.n	800396c <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b2a      	cmp	r3, #42	; 0x2a
 8003898:	d12a      	bne.n	80038f0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800389a:	2102      	movs	r1, #2
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f001 f987 	bl	8004bb0 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b0:	d11e      	bne.n	80038f0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038c0:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d012      	beq.n	80038f0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	4a29      	ldr	r2, [pc, #164]	; (8003974 <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fd31 	bl	800333e <HAL_DMA_Abort_IT>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d006      	beq.n	80038f0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038ec:	4610      	mov	r0, r2
 80038ee:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2229      	movs	r2, #41	; 0x29
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003914:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	88fa      	ldrh	r2, [r7, #6]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4a10      	ldr	r2, [pc, #64]	; (8003978 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
 8003936:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	0c1b      	lsrs	r3, r3, #16
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	d103      	bne.n	8003954 <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2208      	movs	r2, #8
 8003952:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 800395c:	f248 0101 	movw	r1, #32769	; 0x8001
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f001 f8bb 	bl	8004adc <I2C_Enable_IRQ>

    return HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	e000      	b.n	800396c <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
  }
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	08004a3b 	.word	0x08004a3b
 8003978:	08003bc5 	.word	0x08003bc5

0800397c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003992:	b2db      	uxtb	r3, r3
 8003994:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003998:	2b28      	cmp	r3, #40	; 0x28
 800399a:	f040 808a 	bne.w	8003ab2 <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d105      	bne.n	80039b6 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e07e      	b.n	8003ab4 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80039b6:	f248 0102 	movw	r1, #32770	; 0x8002
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f001 f8f8 	bl	8004bb0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e072      	b.n	8003ab4 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b29      	cmp	r3, #41	; 0x29
 80039e0:	d12a      	bne.n	8003a38 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80039e2:	2101      	movs	r1, #1
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f001 f8e3 	bl	8004bb0 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f8:	d11e      	bne.n	8003a38 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a08:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d012      	beq.n	8003a38 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	4a29      	ldr	r2, [pc, #164]	; (8003abc <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fc8d 	bl	800333e <HAL_DMA_Abort_IT>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d006      	beq.n	8003a38 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a34:	4610      	mov	r0, r2
 8003a36:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	222a      	movs	r2, #42	; 0x2a
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a5c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	88fa      	ldrh	r2, [r7, #6]
 8003a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4a10      	ldr	r2, [pc, #64]	; (8003ac0 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
 8003a7e:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	0c1b      	lsrs	r3, r3, #16
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2208      	movs	r2, #8
 8003a9a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8003aa4:	f248 0102 	movw	r1, #32770	; 0x8002
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f001 f817 	bl	8004adc <I2C_Enable_IRQ>

    return HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e000      	b.n	8003ab4 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
  }
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	08004a3b 	.word	0x08004a3b
 8003ac0:	08003bc5 	.word	0x08003bc5

08003ac4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d10d      	bne.n	8003af4 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2228      	movs	r2, #40	; 0x28
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a07      	ldr	r2, [pc, #28]	; (8003b00 <HAL_I2C_EnableListen_IT+0x3c>)
 8003ae4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003ae6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fff6 	bl	8004adc <I2C_Enable_IRQ>

    return HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e000      	b.n	8003af6 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
  }
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	08003bc5 	.word	0x08003bc5

08003b04 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
  }
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <I2C_Slave_ISR_IT+0x24>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e0ec      	b.n	8003dc2 <I2C_Slave_ISR_IT+0x1fe>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003c08:	6939      	ldr	r1, [r7, #16]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fc9a 	bl	8004544 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	091b      	lsrs	r3, r3, #4
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d04d      	beq.n	8003cb8 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d047      	beq.n	8003cb8 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d128      	bne.n	8003c84 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b28      	cmp	r3, #40	; 0x28
 8003c3c:	d108      	bne.n	8003c50 <I2C_Slave_ISR_IT+0x8c>
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c44:	d104      	bne.n	8003c50 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c46:	6939      	ldr	r1, [r7, #16]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 fd85 	bl	8004758 <I2C_ITListenCplt>
 8003c4e:	e032      	b.n	8003cb6 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b29      	cmp	r3, #41	; 0x29
 8003c5a:	d10e      	bne.n	8003c7a <I2C_Slave_ISR_IT+0xb6>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c62:	d00a      	beq.n	8003c7a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2210      	movs	r2, #16
 8003c6a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fec0 	bl	80049f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 fb3d 	bl	80042f2 <I2C_ITSlaveSeqCplt>
 8003c78:	e01d      	b.n	8003cb6 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2210      	movs	r2, #16
 8003c80:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003c82:	e096      	b.n	8003db2 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c90:	f043 0204 	orr.w	r2, r3, #4
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d004      	beq.n	8003ca8 <I2C_Slave_ISR_IT+0xe4>
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ca4:	f040 8085 	bne.w	8003db2 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cac:	4619      	mov	r1, r3
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fda8 	bl	8004804 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003cb4:	e07d      	b.n	8003db2 <I2C_Slave_ISR_IT+0x1ee>
 8003cb6:	e07c      	b.n	8003db2 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	089b      	lsrs	r3, r3, #2
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d030      	beq.n	8003d26 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	089b      	lsrs	r3, r3, #2
 8003cc8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d02a      	beq.n	8003d26 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d018      	beq.n	8003d0c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d14f      	bne.n	8003db6 <I2C_Slave_ISR_IT+0x1f2>
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d1c:	d04b      	beq.n	8003db6 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 fae7 	bl	80042f2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003d24:	e047      	b.n	8003db6 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	08db      	lsrs	r3, r3, #3
 8003d36:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d004      	beq.n	8003d48 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003d3e:	6939      	ldr	r1, [r7, #16]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fa15 	bl	8004170 <I2C_ITAddrCplt>
 8003d46:	e037      	b.n	8003db8 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d031      	beq.n	8003db8 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	085b      	lsrs	r3, r3, #1
 8003d58:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d02b      	beq.n	8003db8 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d018      	beq.n	8003d9c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	781a      	ldrb	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	851a      	strh	r2, [r3, #40]	; 0x28
 8003d9a:	e00d      	b.n	8003db8 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da2:	d002      	beq.n	8003daa <I2C_Slave_ISR_IT+0x1e6>
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 faa1 	bl	80042f2 <I2C_ITSlaveSeqCplt>
 8003db0:	e002      	b.n	8003db8 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003db2:	bf00      	nop
 8003db4:	e000      	b.n	8003db8 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003db6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b088      	sub	sp, #32
 8003dce:	af02      	add	r7, sp, #8
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <I2C_Master_ISR_DMA+0x1a>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e0e1      	b.n	8003fa8 <I2C_Master_ISR_DMA+0x1de>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	091b      	lsrs	r3, r3, #4
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d017      	beq.n	8003e28 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	091b      	lsrs	r3, r3, #4
 8003dfc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d011      	beq.n	8003e28 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2210      	movs	r2, #16
 8003e0a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e10:	f043 0204 	orr.w	r2, r3, #4
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003e18:	2120      	movs	r1, #32
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fe5e 	bl	8004adc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 fde6 	bl	80049f2 <I2C_Flush_TXDR>
 8003e26:	e0ba      	b.n	8003f9e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	09db      	lsrs	r3, r3, #7
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d072      	beq.n	8003f1a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	099b      	lsrs	r3, r3, #6
 8003e38:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d06c      	beq.n	8003f1a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e4e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d04e      	beq.n	8003ef8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e66:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2bff      	cmp	r3, #255	; 0xff
 8003e70:	d906      	bls.n	8003e80 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	22ff      	movs	r2, #255	; 0xff
 8003e76:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003e78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	e010      	b.n	8003ea2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e92:	d003      	beq.n	8003e9c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	e002      	b.n	8003ea2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003e9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ea0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	8a79      	ldrh	r1, [r7, #18]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fde1 	bl	8004a78 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b22      	cmp	r3, #34	; 0x22
 8003ed2:	d108      	bne.n	8003ee6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ee2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003ee4:	e05b      	b.n	8003f9e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ef4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003ef6:	e052      	b.n	8003f9e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f06:	d003      	beq.n	8003f10 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f9b5 	bl	8004278 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003f0e:	e046      	b.n	8003f9e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f10:	2140      	movs	r1, #64	; 0x40
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fc76 	bl	8004804 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003f18:	e041      	b.n	8003f9e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	099b      	lsrs	r3, r3, #6
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d029      	beq.n	8003f7a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	099b      	lsrs	r3, r3, #6
 8003f2a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d023      	beq.n	8003f7a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d119      	bne.n	8003f70 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f4a:	d027      	beq.n	8003f9c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f54:	d108      	bne.n	8003f68 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f64:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003f66:	e019      	b.n	8003f9c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f985 	bl	8004278 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003f6e:	e015      	b.n	8003f9c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f70:	2140      	movs	r1, #64	; 0x40
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 fc46 	bl	8004804 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f78:	e010      	b.n	8003f9c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 fa0b 	bl	80043b0 <I2C_ITMasterCplt>
 8003f9a:	e000      	b.n	8003f9e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003f9c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <I2C_Slave_ISR_DMA+0x24>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e0c9      	b.n	8004168 <I2C_Slave_ISR_DMA+0x1b8>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d009      	beq.n	8003ffc <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 faa4 	bl	8004544 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 809a 	beq.w	800413e <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8093 	beq.w	800413e <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	0b9b      	lsrs	r3, r3, #14
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d105      	bne.n	8004030 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	0bdb      	lsrs	r3, r3, #15
 8004028:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800402c:	2b00      	cmp	r3, #0
 800402e:	d07f      	beq.n	8004130 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00d      	beq.n	8004054 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	0bdb      	lsrs	r3, r3, #15
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004050:	2301      	movs	r3, #1
 8004052:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00d      	beq.n	8004078 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	0b9b      	lsrs	r3, r3, #14
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8004074:	2301      	movs	r3, #1
 8004076:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d128      	bne.n	80040d0 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b28      	cmp	r3, #40	; 0x28
 8004088:	d108      	bne.n	800409c <I2C_Slave_ISR_DMA+0xec>
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004090:	d104      	bne.n	800409c <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fb5f 	bl	8004758 <I2C_ITListenCplt>
 800409a:	e048      	b.n	800412e <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b29      	cmp	r3, #41	; 0x29
 80040a6:	d10e      	bne.n	80040c6 <I2C_Slave_ISR_DMA+0x116>
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040ae:	d00a      	beq.n	80040c6 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2210      	movs	r2, #16
 80040b6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fc9a 	bl	80049f2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f917 	bl	80042f2 <I2C_ITSlaveSeqCplt>
 80040c4:	e033      	b.n	800412e <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2210      	movs	r2, #16
 80040cc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80040ce:	e034      	b.n	800413a <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2210      	movs	r2, #16
 80040d6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	f043 0204 	orr.w	r2, r3, #4
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ea:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <I2C_Slave_ISR_DMA+0x14a>
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040f8:	d11f      	bne.n	800413a <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
 80040fc:	2b21      	cmp	r3, #33	; 0x21
 80040fe:	d002      	beq.n	8004106 <I2C_Slave_ISR_DMA+0x156>
 8004100:	7dfb      	ldrb	r3, [r7, #23]
 8004102:	2b29      	cmp	r3, #41	; 0x29
 8004104:	d103      	bne.n	800410e <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2221      	movs	r2, #33	; 0x21
 800410a:	631a      	str	r2, [r3, #48]	; 0x30
 800410c:	e008      	b.n	8004120 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800410e:	7dfb      	ldrb	r3, [r7, #23]
 8004110:	2b22      	cmp	r3, #34	; 0x22
 8004112:	d002      	beq.n	800411a <I2C_Slave_ISR_DMA+0x16a>
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	2b2a      	cmp	r3, #42	; 0x2a
 8004118:	d102      	bne.n	8004120 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2222      	movs	r2, #34	; 0x22
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	4619      	mov	r1, r3
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fb6c 	bl	8004804 <I2C_ITError>
      if (treatdmanack == 1U)
 800412c:	e005      	b.n	800413a <I2C_Slave_ISR_DMA+0x18a>
 800412e:	e004      	b.n	800413a <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2210      	movs	r2, #16
 8004136:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004138:	e011      	b.n	800415e <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800413a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800413c:	e00f      	b.n	800415e <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	08db      	lsrs	r3, r3, #3
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	08db      	lsrs	r3, r3, #3
 800414e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f809 	bl	8004170 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004186:	2b28      	cmp	r3, #40	; 0x28
 8004188:	d16a      	bne.n	8004260 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80041a8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041b6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80041c4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d138      	bne.n	8004240 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80041ce:	897b      	ldrh	r3, [r7, #10]
 80041d0:	09db      	lsrs	r3, r3, #7
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	89bb      	ldrh	r3, [r7, #12]
 80041d6:	4053      	eors	r3, r2
 80041d8:	b29b      	uxth	r3, r3
 80041da:	f003 0306 	and.w	r3, r3, #6
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d11c      	bne.n	800421c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80041e2:	897b      	ldrh	r3, [r7, #10]
 80041e4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d13b      	bne.n	8004270 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2208      	movs	r2, #8
 8004204:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800420e:	89ba      	ldrh	r2, [r7, #12]
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fe fb95 	bl	8002944 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800421a:	e029      	b.n	8004270 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800421c:	893b      	ldrh	r3, [r7, #8]
 800421e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004220:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fcc3 	bl	8004bb0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004232:	89ba      	ldrh	r2, [r7, #12]
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	4619      	mov	r1, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7fe fb83 	bl	8002944 <HAL_I2C_AddrCallback>
}
 800423e:	e017      	b.n	8004270 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fcb3 	bl	8004bb0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004252:	89ba      	ldrh	r2, [r7, #12]
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	4619      	mov	r1, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7fe fb73 	bl	8002944 <HAL_I2C_AddrCallback>
}
 800425e:	e007      	b.n	8004270 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2208      	movs	r2, #8
 8004266:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b21      	cmp	r3, #33	; 0x21
 8004292:	d115      	bne.n	80042c0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2211      	movs	r2, #17
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042a8:	2101      	movs	r1, #1
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fc80 	bl	8004bb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff fc3d 	bl	8003b38 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042be:	e014      	b.n	80042ea <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2212      	movs	r2, #18
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80042d4:	2102      	movs	r1, #2
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fc6a 	bl	8004bb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff fc31 	bl	8003b4c <HAL_I2C_MasterRxCpltCallback>
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	0b9b      	lsrs	r3, r3, #14
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d008      	beq.n	8004328 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	e00d      	b.n	8004344 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	0bdb      	lsrs	r3, r3, #15
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d007      	beq.n	8004344 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004342:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b29      	cmp	r3, #41	; 0x29
 800434e:	d112      	bne.n	8004376 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2228      	movs	r2, #40	; 0x28
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2221      	movs	r2, #33	; 0x21
 800435c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800435e:	2101      	movs	r1, #1
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fc25 	bl	8004bb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fe fafc 	bl	800296c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004374:	e017      	b.n	80043a6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b2a      	cmp	r3, #42	; 0x2a
 8004380:	d111      	bne.n	80043a6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2228      	movs	r2, #40	; 0x28
 8004386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2222      	movs	r2, #34	; 0x22
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004390:	2102      	movs	r1, #2
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fc0c 	bl	8004bb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7fe faf3 	bl	800298c <HAL_I2C_SlaveRxCpltCallback>
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2220      	movs	r2, #32
 80043c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b21      	cmp	r3, #33	; 0x21
 80043d0:	d107      	bne.n	80043e2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80043d2:	2101      	movs	r1, #1
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fbeb 	bl	8004bb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2211      	movs	r2, #17
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
 80043e0:	e00c      	b.n	80043fc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b22      	cmp	r3, #34	; 0x22
 80043ec:	d106      	bne.n	80043fc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80043ee:	2102      	movs	r1, #2
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fbdd 	bl	8004bb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2212      	movs	r2, #18
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6859      	ldr	r1, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b4d      	ldr	r3, [pc, #308]	; (800453c <I2C_ITMasterCplt+0x18c>)
 8004408:	400b      	ands	r3, r1
 800440a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a4a      	ldr	r2, [pc, #296]	; (8004540 <I2C_ITMasterCplt+0x190>)
 8004416:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2210      	movs	r2, #16
 800442a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004430:	f043 0204 	orr.w	r2, r3, #4
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b60      	cmp	r3, #96	; 0x60
 8004442:	d10b      	bne.n	800445c <I2C_ITMasterCplt+0xac>
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	089b      	lsrs	r3, r3, #2
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	b2db      	uxtb	r3, r3
 8004458:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800445a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fac8 	bl	80049f2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b60      	cmp	r3, #96	; 0x60
 8004472:	d002      	beq.n	800447a <I2C_ITMasterCplt+0xca>
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d006      	beq.n	8004488 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	4619      	mov	r1, r3
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f9bf 	bl	8004804 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004486:	e054      	b.n	8004532 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b21      	cmp	r3, #33	; 0x21
 8004492:	d124      	bne.n	80044de <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b40      	cmp	r3, #64	; 0x40
 80044ac:	d10b      	bne.n	80044c6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff fb58 	bl	8003b74 <HAL_I2C_MemTxCpltCallback>
}
 80044c4:	e035      	b.n	8004532 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff fb2e 	bl	8003b38 <HAL_I2C_MasterTxCpltCallback>
}
 80044dc:	e029      	b.n	8004532 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b22      	cmp	r3, #34	; 0x22
 80044e8:	d123      	bne.n	8004532 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	d10b      	bne.n	800451c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff fb37 	bl	8003b88 <HAL_I2C_MemRxCpltCallback>
}
 800451a:	e00a      	b.n	8004532 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff fb0d 	bl	8003b4c <HAL_I2C_MasterRxCpltCallback>
}
 8004532:	bf00      	nop
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	fe00e800 	.word	0xfe00e800
 8004540:	ffff0000 	.word	0xffff0000

08004544 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004560:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2220      	movs	r2, #32
 8004568:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	2b21      	cmp	r3, #33	; 0x21
 800456e:	d002      	beq.n	8004576 <I2C_ITSlaveCplt+0x32>
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b29      	cmp	r3, #41	; 0x29
 8004574:	d108      	bne.n	8004588 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004576:	f248 0101 	movw	r1, #32769	; 0x8001
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fb18 	bl	8004bb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2221      	movs	r2, #33	; 0x21
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
 8004586:	e00d      	b.n	80045a4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b22      	cmp	r3, #34	; 0x22
 800458c:	d002      	beq.n	8004594 <I2C_ITSlaveCplt+0x50>
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b2a      	cmp	r3, #42	; 0x2a
 8004592:	d107      	bne.n	80045a4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004594:	f248 0102 	movw	r1, #32770	; 0x8002
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fb09 	bl	8004bb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2222      	movs	r2, #34	; 0x22
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045b2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6859      	ldr	r1, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4b64      	ldr	r3, [pc, #400]	; (8004750 <I2C_ITSlaveCplt+0x20c>)
 80045c0:	400b      	ands	r3, r1
 80045c2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fa14 	bl	80049f2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	0b9b      	lsrs	r3, r3, #14
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d013      	beq.n	80045fe <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045e4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d020      	beq.n	8004630 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045fc:	e018      	b.n	8004630 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	0bdb      	lsrs	r3, r3, #15
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d012      	beq.n	8004630 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004618:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d006      	beq.n	8004630 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	b29a      	uxth	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d020      	beq.n	800467e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0304 	bic.w	r3, r3, #4
 8004642:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00c      	beq.n	800467e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468c:	f043 0204 	orr.w	r2, r3, #4
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d010      	beq.n	80046cc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	4619      	mov	r1, r3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f8a7 	bl	8004804 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b28      	cmp	r3, #40	; 0x28
 80046c0:	d141      	bne.n	8004746 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80046c2:	6979      	ldr	r1, [r7, #20]
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f847 	bl	8004758 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046ca:	e03c      	b.n	8004746 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046d4:	d014      	beq.n	8004700 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff fe0b 	bl	80042f2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a1d      	ldr	r2, [pc, #116]	; (8004754 <I2C_ITSlaveCplt+0x210>)
 80046e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff fa31 	bl	8003b60 <HAL_I2C_ListenCpltCallback>
}
 80046fe:	e022      	b.n	8004746 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b22      	cmp	r3, #34	; 0x22
 800470a:	d10e      	bne.n	800472a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fe f932 	bl	800298c <HAL_I2C_SlaveRxCpltCallback>
}
 8004728:	e00d      	b.n	8004746 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fe f913 	bl	800296c <HAL_I2C_SlaveTxCpltCallback>
}
 8004746:	bf00      	nop
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	fe00e800 	.word	0xfe00e800
 8004754:	ffff0000 	.word	0xffff0000

08004758 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a26      	ldr	r2, [pc, #152]	; (8004800 <I2C_ITListenCplt+0xa8>)
 8004766:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	089b      	lsrs	r3, r3, #2
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d022      	beq.n	80047d6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d012      	beq.n	80047d6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	f043 0204 	orr.w	r2, r3, #4
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047d6:	f248 0103 	movw	r1, #32771	; 0x8003
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f9e8 	bl	8004bb0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2210      	movs	r2, #16
 80047e6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff f9b5 	bl	8003b60 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	ffff0000 	.word	0xffff0000

08004804 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a5d      	ldr	r2, [pc, #372]	; (8004998 <I2C_ITError+0x194>)
 8004822:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	2b28      	cmp	r3, #40	; 0x28
 800483a:	d005      	beq.n	8004848 <I2C_ITError+0x44>
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	2b29      	cmp	r3, #41	; 0x29
 8004840:	d002      	beq.n	8004848 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	2b2a      	cmp	r3, #42	; 0x2a
 8004846:	d10b      	bne.n	8004860 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004848:	2103      	movs	r1, #3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f9b0 	bl	8004bb0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2228      	movs	r2, #40	; 0x28
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a50      	ldr	r2, [pc, #320]	; (800499c <I2C_ITError+0x198>)
 800485c:	635a      	str	r2, [r3, #52]	; 0x34
 800485e:	e011      	b.n	8004884 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004860:	f248 0103 	movw	r1, #32771	; 0x8003
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f9a3 	bl	8004bb0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b60      	cmp	r3, #96	; 0x60
 8004874:	d003      	beq.n	800487e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	2b00      	cmp	r3, #0
 8004890:	d039      	beq.n	8004906 <I2C_ITError+0x102>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b11      	cmp	r3, #17
 8004896:	d002      	beq.n	800489e <I2C_ITError+0x9a>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b21      	cmp	r3, #33	; 0x21
 800489c:	d133      	bne.n	8004906 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048ac:	d107      	bne.n	80048be <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048bc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fe fd7c 	bl	80033c0 <HAL_DMA_GetState>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d017      	beq.n	80048fe <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	4a33      	ldr	r2, [pc, #204]	; (80049a0 <I2C_ITError+0x19c>)
 80048d4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fe fd2b 	bl	800333e <HAL_DMA_Abort_IT>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d04d      	beq.n	800498a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048f8:	4610      	mov	r0, r2
 80048fa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048fc:	e045      	b.n	800498a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f850 	bl	80049a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004904:	e041      	b.n	800498a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d039      	beq.n	8004982 <I2C_ITError+0x17e>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b12      	cmp	r3, #18
 8004912:	d002      	beq.n	800491a <I2C_ITError+0x116>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b22      	cmp	r3, #34	; 0x22
 8004918:	d133      	bne.n	8004982 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004928:	d107      	bne.n	800493a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004938:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493e:	4618      	mov	r0, r3
 8004940:	f7fe fd3e 	bl	80033c0 <HAL_DMA_GetState>
 8004944:	4603      	mov	r3, r0
 8004946:	2b01      	cmp	r3, #1
 8004948:	d017      	beq.n	800497a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494e:	4a14      	ldr	r2, [pc, #80]	; (80049a0 <I2C_ITError+0x19c>)
 8004950:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe fced 	bl	800333e <HAL_DMA_Abort_IT>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d011      	beq.n	800498e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004974:	4610      	mov	r0, r2
 8004976:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004978:	e009      	b.n	800498e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f812 	bl	80049a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004980:	e005      	b.n	800498e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f80e 	bl	80049a4 <I2C_TreatErrorCallback>
  }
}
 8004988:	e002      	b.n	8004990 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800498a:	bf00      	nop
 800498c:	e000      	b.n	8004990 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800498e:	bf00      	nop
}
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	ffff0000 	.word	0xffff0000
 800499c:	08003bc5 	.word	0x08003bc5
 80049a0:	08004a3b 	.word	0x08004a3b

080049a4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b60      	cmp	r3, #96	; 0x60
 80049b6:	d10e      	bne.n	80049d6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff f8ee 	bl	8003bb0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049d4:	e009      	b.n	80049ea <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff f8d9 	bl	8003b9c <HAL_I2C_ErrorCallback>
}
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d103      	bne.n	8004a10 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d007      	beq.n	8004a2e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	699a      	ldr	r2, [r3, #24]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0201 	orr.w	r2, r2, #1
 8004a2c:	619a      	str	r2, [r3, #24]
  }
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	2200      	movs	r2, #0
 8004a56:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a64:	2200      	movs	r2, #0
 8004a66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff ff9b 	bl	80049a4 <I2C_TreatErrorCallback>
}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	607b      	str	r3, [r7, #4]
 8004a82:	460b      	mov	r3, r1
 8004a84:	817b      	strh	r3, [r7, #10]
 8004a86:	4613      	mov	r3, r2
 8004a88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a8a:	897b      	ldrh	r3, [r7, #10]
 8004a8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a90:	7a7b      	ldrb	r3, [r7, #9]
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004aa6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	0d5b      	lsrs	r3, r3, #21
 8004ab2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ab6:	4b08      	ldr	r3, [pc, #32]	; (8004ad8 <I2C_TransferConfig+0x60>)
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	43db      	mvns	r3, r3
 8004abc:	ea02 0103 	and.w	r1, r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004aca:	bf00      	nop
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	03ff63ff 	.word	0x03ff63ff

08004adc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af0:	4a2d      	ldr	r2, [pc, #180]	; (8004ba8 <I2C_Enable_IRQ+0xcc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d004      	beq.n	8004b00 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004afa:	4a2c      	ldr	r2, [pc, #176]	; (8004bac <I2C_Enable_IRQ+0xd0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d11d      	bne.n	8004b3c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	da03      	bge.n	8004b10 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004b0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b10:	887b      	ldrh	r3, [r7, #2]
 8004b12:	2b10      	cmp	r3, #16
 8004b14:	d103      	bne.n	8004b1e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004b1c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b1e:	887b      	ldrh	r3, [r7, #2]
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d103      	bne.n	8004b2c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b2a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b2c:	887b      	ldrh	r3, [r7, #2]
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d12c      	bne.n	8004b8c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b38:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b3a:	e027      	b.n	8004b8c <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	da03      	bge.n	8004b4c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004b4a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b4c:	887b      	ldrh	r3, [r7, #2]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004b5c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004b5e:	887b      	ldrh	r3, [r7, #2]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004b6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b70:	887b      	ldrh	r3, [r7, #2]
 8004b72:	2b10      	cmp	r3, #16
 8004b74:	d103      	bne.n	8004b7e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004b7c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b7e:	887b      	ldrh	r3, [r7, #2]
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d103      	bne.n	8004b8c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f043 0320 	orr.w	r3, r3, #32
 8004b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6819      	ldr	r1, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]
}
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	08003dcb 	.word	0x08003dcb
 8004bac:	08003fb1 	.word	0x08003fb1

08004bb0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004bc0:	887b      	ldrh	r3, [r7, #2]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00f      	beq.n	8004bea <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004bd0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bde:	2b28      	cmp	r3, #40	; 0x28
 8004be0:	d003      	beq.n	8004bea <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004be8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004bea:	887b      	ldrh	r3, [r7, #2]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00f      	beq.n	8004c14 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004bfa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c08:	2b28      	cmp	r3, #40	; 0x28
 8004c0a:	d003      	beq.n	8004c14 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004c12:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	da03      	bge.n	8004c24 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004c22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c24:	887b      	ldrh	r3, [r7, #2]
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d103      	bne.n	8004c32 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004c30:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c32:	887b      	ldrh	r3, [r7, #2]
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d103      	bne.n	8004c40 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f043 0320 	orr.w	r3, r3, #32
 8004c3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004c40:	887b      	ldrh	r3, [r7, #2]
 8004c42:	2b40      	cmp	r3, #64	; 0x40
 8004c44:	d103      	bne.n	8004c4e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c4c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	43da      	mvns	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	400a      	ands	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d138      	bne.n	8004cf4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e032      	b.n	8004cf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2224      	movs	r2, #36	; 0x24
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0201 	bic.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6819      	ldr	r1, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e000      	b.n	8004cf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cf4:	2302      	movs	r3, #2
  }
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b085      	sub	sp, #20
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d139      	bne.n	8004d8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e033      	b.n	8004d8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2224      	movs	r2, #36	; 0x24
 8004d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0201 	bic.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	e000      	b.n	8004d8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d8c:	2302      	movs	r3, #2
  }
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004da0:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40007000 	.word	0x40007000

08004db8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc6:	d130      	bne.n	8004e2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dc8:	4b23      	ldr	r3, [pc, #140]	; (8004e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd4:	d038      	beq.n	8004e48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dd6:	4b20      	ldr	r3, [pc, #128]	; (8004e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dde:	4a1e      	ldr	r2, [pc, #120]	; (8004e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004de0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004de4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004de6:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2232      	movs	r2, #50	; 0x32
 8004dec:	fb02 f303 	mul.w	r3, r2, r3
 8004df0:	4a1b      	ldr	r2, [pc, #108]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	0c9b      	lsrs	r3, r3, #18
 8004df8:	3301      	adds	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dfc:	e002      	b.n	8004e04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e04:	4b14      	ldr	r3, [pc, #80]	; (8004e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e10:	d102      	bne.n	8004e18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f2      	bne.n	8004dfe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e18:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e24:	d110      	bne.n	8004e48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e00f      	b.n	8004e4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e36:	d007      	beq.n	8004e48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e38:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e40:	4a05      	ldr	r2, [pc, #20]	; (8004e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	20000024 	.word	0x20000024
 8004e60:	431bde83 	.word	0x431bde83

08004e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f000 bc02 	b.w	800567c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e78:	4b96      	ldr	r3, [pc, #600]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 030c 	and.w	r3, r3, #12
 8004e80:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e82:	4b94      	ldr	r3, [pc, #592]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80e4 	beq.w	8005062 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d007      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x4c>
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	2b0c      	cmp	r3, #12
 8004ea4:	f040 808b 	bne.w	8004fbe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	f040 8087 	bne.w	8004fbe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004eb0:	4b88      	ldr	r3, [pc, #544]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x64>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e3d9      	b.n	800567c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1a      	ldr	r2, [r3, #32]
 8004ecc:	4b81      	ldr	r3, [pc, #516]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d004      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x7e>
 8004ed8:	4b7e      	ldr	r3, [pc, #504]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ee0:	e005      	b.n	8004eee <HAL_RCC_OscConfig+0x8a>
 8004ee2:	4b7c      	ldr	r3, [pc, #496]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee8:	091b      	lsrs	r3, r3, #4
 8004eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d223      	bcs.n	8004f3a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fd8c 	bl	8005a14 <RCC_SetFlashLatencyFromMSIRange>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e3ba      	b.n	800567c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f06:	4b73      	ldr	r3, [pc, #460]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a72      	ldr	r2, [pc, #456]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f0c:	f043 0308 	orr.w	r3, r3, #8
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	4b70      	ldr	r3, [pc, #448]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	496d      	ldr	r1, [pc, #436]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f24:	4b6b      	ldr	r3, [pc, #428]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	4968      	ldr	r1, [pc, #416]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
 8004f38:	e025      	b.n	8004f86 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f3a:	4b66      	ldr	r3, [pc, #408]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a65      	ldr	r2, [pc, #404]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f40:	f043 0308 	orr.w	r3, r3, #8
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	4b63      	ldr	r3, [pc, #396]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	4960      	ldr	r1, [pc, #384]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f58:	4b5e      	ldr	r3, [pc, #376]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	495b      	ldr	r1, [pc, #364]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d109      	bne.n	8004f86 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fd4c 	bl	8005a14 <RCC_SetFlashLatencyFromMSIRange>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e37a      	b.n	800567c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f86:	f000 fc81 	bl	800588c <HAL_RCC_GetSysClockFreq>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	4b51      	ldr	r3, [pc, #324]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	4950      	ldr	r1, [pc, #320]	; (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004f98:	5ccb      	ldrb	r3, [r1, r3]
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa2:	4a4e      	ldr	r2, [pc, #312]	; (80050dc <HAL_RCC_OscConfig+0x278>)
 8004fa4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fa6:	4b4e      	ldr	r3, [pc, #312]	; (80050e0 <HAL_RCC_OscConfig+0x27c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fe f81c 	bl	8002fe8 <HAL_InitTick>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d052      	beq.n	8005060 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	e35e      	b.n	800567c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d032      	beq.n	800502c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fc6:	4b43      	ldr	r3, [pc, #268]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a42      	ldr	r2, [pc, #264]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fd2:	f7fe f859 	bl	8003088 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fda:	f7fe f855 	bl	8003088 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e347      	b.n	800567c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fec:	4b39      	ldr	r3, [pc, #228]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ff8:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a35      	ldr	r2, [pc, #212]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004ffe:	f043 0308 	orr.w	r3, r3, #8
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4b33      	ldr	r3, [pc, #204]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	4930      	ldr	r1, [pc, #192]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8005012:	4313      	orrs	r3, r2
 8005014:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005016:	4b2f      	ldr	r3, [pc, #188]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	492b      	ldr	r1, [pc, #172]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8005026:	4313      	orrs	r3, r2
 8005028:	604b      	str	r3, [r1, #4]
 800502a:	e01a      	b.n	8005062 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800502c:	4b29      	ldr	r3, [pc, #164]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a28      	ldr	r2, [pc, #160]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8005032:	f023 0301 	bic.w	r3, r3, #1
 8005036:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005038:	f7fe f826 	bl	8003088 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005040:	f7fe f822 	bl	8003088 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e314      	b.n	800567c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005052:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x1dc>
 800505e:	e000      	b.n	8005062 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005060:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d073      	beq.n	8005156 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d005      	beq.n	8005080 <HAL_RCC_OscConfig+0x21c>
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	2b0c      	cmp	r3, #12
 8005078:	d10e      	bne.n	8005098 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d10b      	bne.n	8005098 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005080:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d063      	beq.n	8005154 <HAL_RCC_OscConfig+0x2f0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d15f      	bne.n	8005154 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e2f1      	b.n	800567c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a0:	d106      	bne.n	80050b0 <HAL_RCC_OscConfig+0x24c>
 80050a2:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a0b      	ldr	r2, [pc, #44]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e025      	b.n	80050fc <HAL_RCC_OscConfig+0x298>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050b8:	d114      	bne.n	80050e4 <HAL_RCC_OscConfig+0x280>
 80050ba:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a05      	ldr	r2, [pc, #20]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 80050c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	4b03      	ldr	r3, [pc, #12]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a02      	ldr	r2, [pc, #8]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 80050cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	e013      	b.n	80050fc <HAL_RCC_OscConfig+0x298>
 80050d4:	40021000 	.word	0x40021000
 80050d8:	0800bdd4 	.word	0x0800bdd4
 80050dc:	20000024 	.word	0x20000024
 80050e0:	20000028 	.word	0x20000028
 80050e4:	4ba0      	ldr	r3, [pc, #640]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a9f      	ldr	r2, [pc, #636]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80050ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	4b9d      	ldr	r3, [pc, #628]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a9c      	ldr	r2, [pc, #624]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80050f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d013      	beq.n	800512c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fd ffc0 	bl	8003088 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800510c:	f7fd ffbc 	bl	8003088 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b64      	cmp	r3, #100	; 0x64
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e2ae      	b.n	800567c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800511e:	4b92      	ldr	r3, [pc, #584]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0x2a8>
 800512a:	e014      	b.n	8005156 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512c:	f7fd ffac 	bl	8003088 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005134:	f7fd ffa8 	bl	8003088 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b64      	cmp	r3, #100	; 0x64
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e29a      	b.n	800567c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005146:	4b88      	ldr	r3, [pc, #544]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f0      	bne.n	8005134 <HAL_RCC_OscConfig+0x2d0>
 8005152:	e000      	b.n	8005156 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d060      	beq.n	8005224 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b04      	cmp	r3, #4
 8005166:	d005      	beq.n	8005174 <HAL_RCC_OscConfig+0x310>
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	2b0c      	cmp	r3, #12
 800516c:	d119      	bne.n	80051a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d116      	bne.n	80051a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005174:	4b7c      	ldr	r3, [pc, #496]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_RCC_OscConfig+0x328>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e277      	b.n	800567c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518c:	4b76      	ldr	r3, [pc, #472]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	061b      	lsls	r3, r3, #24
 800519a:	4973      	ldr	r1, [pc, #460]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800519c:	4313      	orrs	r3, r2
 800519e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051a0:	e040      	b.n	8005224 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d023      	beq.n	80051f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051aa:	4b6f      	ldr	r3, [pc, #444]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a6e      	ldr	r2, [pc, #440]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80051b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b6:	f7fd ff67 	bl	8003088 <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051be:	f7fd ff63 	bl	8003088 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e255      	b.n	800567c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051d0:	4b65      	ldr	r3, [pc, #404]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0f0      	beq.n	80051be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051dc:	4b62      	ldr	r3, [pc, #392]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	061b      	lsls	r3, r3, #24
 80051ea:	495f      	ldr	r1, [pc, #380]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	604b      	str	r3, [r1, #4]
 80051f0:	e018      	b.n	8005224 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051f2:	4b5d      	ldr	r3, [pc, #372]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a5c      	ldr	r2, [pc, #368]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80051f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fe:	f7fd ff43 	bl	8003088 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005206:	f7fd ff3f 	bl	8003088 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e231      	b.n	800567c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005218:	4b53      	ldr	r3, [pc, #332]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1f0      	bne.n	8005206 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d03c      	beq.n	80052aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01c      	beq.n	8005272 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005238:	4b4b      	ldr	r3, [pc, #300]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800523a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800523e:	4a4a      	ldr	r2, [pc, #296]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005248:	f7fd ff1e 	bl	8003088 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005250:	f7fd ff1a 	bl	8003088 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e20c      	b.n	800567c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005262:	4b41      	ldr	r3, [pc, #260]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005264:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0ef      	beq.n	8005250 <HAL_RCC_OscConfig+0x3ec>
 8005270:	e01b      	b.n	80052aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005272:	4b3d      	ldr	r3, [pc, #244]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005278:	4a3b      	ldr	r2, [pc, #236]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005282:	f7fd ff01 	bl	8003088 <HAL_GetTick>
 8005286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800528a:	f7fd fefd 	bl	8003088 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e1ef      	b.n	800567c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800529c:	4b32      	ldr	r3, [pc, #200]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800529e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1ef      	bne.n	800528a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 80a6 	beq.w	8005404 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052b8:	2300      	movs	r3, #0
 80052ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052bc:	4b2a      	ldr	r3, [pc, #168]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80052be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10d      	bne.n	80052e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c8:	4b27      	ldr	r3, [pc, #156]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80052ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052cc:	4a26      	ldr	r2, [pc, #152]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80052ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d2:	6593      	str	r3, [r2, #88]	; 0x58
 80052d4:	4b24      	ldr	r3, [pc, #144]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80052d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e0:	2301      	movs	r3, #1
 80052e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052e4:	4b21      	ldr	r3, [pc, #132]	; (800536c <HAL_RCC_OscConfig+0x508>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d118      	bne.n	8005322 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052f0:	4b1e      	ldr	r3, [pc, #120]	; (800536c <HAL_RCC_OscConfig+0x508>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1d      	ldr	r2, [pc, #116]	; (800536c <HAL_RCC_OscConfig+0x508>)
 80052f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052fc:	f7fd fec4 	bl	8003088 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005304:	f7fd fec0 	bl	8003088 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e1b2      	b.n	800567c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005316:	4b15      	ldr	r3, [pc, #84]	; (800536c <HAL_RCC_OscConfig+0x508>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f0      	beq.n	8005304 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d108      	bne.n	800533c <HAL_RCC_OscConfig+0x4d8>
 800532a:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800532c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005330:	4a0d      	ldr	r2, [pc, #52]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800533a:	e029      	b.n	8005390 <HAL_RCC_OscConfig+0x52c>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b05      	cmp	r3, #5
 8005342:	d115      	bne.n	8005370 <HAL_RCC_OscConfig+0x50c>
 8005344:	4b08      	ldr	r3, [pc, #32]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534a:	4a07      	ldr	r2, [pc, #28]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800534c:	f043 0304 	orr.w	r3, r3, #4
 8005350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005354:	4b04      	ldr	r3, [pc, #16]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535a:	4a03      	ldr	r2, [pc, #12]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800535c:	f043 0301 	orr.w	r3, r3, #1
 8005360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005364:	e014      	b.n	8005390 <HAL_RCC_OscConfig+0x52c>
 8005366:	bf00      	nop
 8005368:	40021000 	.word	0x40021000
 800536c:	40007000 	.word	0x40007000
 8005370:	4b9a      	ldr	r3, [pc, #616]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 8005372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005376:	4a99      	ldr	r2, [pc, #612]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 8005378:	f023 0301 	bic.w	r3, r3, #1
 800537c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005380:	4b96      	ldr	r3, [pc, #600]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	4a95      	ldr	r2, [pc, #596]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 8005388:	f023 0304 	bic.w	r3, r3, #4
 800538c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d016      	beq.n	80053c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005398:	f7fd fe76 	bl	8003088 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800539e:	e00a      	b.n	80053b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a0:	f7fd fe72 	bl	8003088 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e162      	b.n	800567c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053b6:	4b89      	ldr	r3, [pc, #548]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0ed      	beq.n	80053a0 <HAL_RCC_OscConfig+0x53c>
 80053c4:	e015      	b.n	80053f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c6:	f7fd fe5f 	bl	8003088 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fd fe5b 	bl	8003088 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e14b      	b.n	800567c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053e4:	4b7d      	ldr	r3, [pc, #500]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 80053e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1ed      	bne.n	80053ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053f2:	7ffb      	ldrb	r3, [r7, #31]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d105      	bne.n	8005404 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f8:	4b78      	ldr	r3, [pc, #480]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 80053fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fc:	4a77      	ldr	r2, [pc, #476]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 80053fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005402:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d03c      	beq.n	800548a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01c      	beq.n	8005452 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005418:	4b70      	ldr	r3, [pc, #448]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 800541a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800541e:	4a6f      	ldr	r2, [pc, #444]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005428:	f7fd fe2e 	bl	8003088 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005430:	f7fd fe2a 	bl	8003088 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e11c      	b.n	800567c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005442:	4b66      	ldr	r3, [pc, #408]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 8005444:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0ef      	beq.n	8005430 <HAL_RCC_OscConfig+0x5cc>
 8005450:	e01b      	b.n	800548a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005452:	4b62      	ldr	r3, [pc, #392]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 8005454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005458:	4a60      	ldr	r2, [pc, #384]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 800545a:	f023 0301 	bic.w	r3, r3, #1
 800545e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005462:	f7fd fe11 	bl	8003088 <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800546a:	f7fd fe0d 	bl	8003088 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e0ff      	b.n	800567c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800547c:	4b57      	ldr	r3, [pc, #348]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 800547e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1ef      	bne.n	800546a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 80f3 	beq.w	800567a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005498:	2b02      	cmp	r3, #2
 800549a:	f040 80c9 	bne.w	8005630 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800549e:	4b4f      	ldr	r3, [pc, #316]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f003 0203 	and.w	r2, r3, #3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d12c      	bne.n	800550c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	3b01      	subs	r3, #1
 80054be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d123      	bne.n	800550c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d11b      	bne.n	800550c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d113      	bne.n	800550c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	3b01      	subs	r3, #1
 80054f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d109      	bne.n	800550c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	085b      	lsrs	r3, r3, #1
 8005504:	3b01      	subs	r3, #1
 8005506:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005508:	429a      	cmp	r2, r3
 800550a:	d06b      	beq.n	80055e4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	2b0c      	cmp	r3, #12
 8005510:	d062      	beq.n	80055d8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005512:	4b32      	ldr	r3, [pc, #200]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e0ac      	b.n	800567c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005522:	4b2e      	ldr	r3, [pc, #184]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a2d      	ldr	r2, [pc, #180]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 8005528:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800552c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800552e:	f7fd fdab 	bl	8003088 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005536:	f7fd fda7 	bl	8003088 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e099      	b.n	800567c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005548:	4b24      	ldr	r3, [pc, #144]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f0      	bne.n	8005536 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005554:	4b21      	ldr	r3, [pc, #132]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	4b21      	ldr	r3, [pc, #132]	; (80055e0 <HAL_RCC_OscConfig+0x77c>)
 800555a:	4013      	ands	r3, r2
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005564:	3a01      	subs	r2, #1
 8005566:	0112      	lsls	r2, r2, #4
 8005568:	4311      	orrs	r1, r2
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800556e:	0212      	lsls	r2, r2, #8
 8005570:	4311      	orrs	r1, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005576:	0852      	lsrs	r2, r2, #1
 8005578:	3a01      	subs	r2, #1
 800557a:	0552      	lsls	r2, r2, #21
 800557c:	4311      	orrs	r1, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005582:	0852      	lsrs	r2, r2, #1
 8005584:	3a01      	subs	r2, #1
 8005586:	0652      	lsls	r2, r2, #25
 8005588:	4311      	orrs	r1, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800558e:	06d2      	lsls	r2, r2, #27
 8005590:	430a      	orrs	r2, r1
 8005592:	4912      	ldr	r1, [pc, #72]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 8005594:	4313      	orrs	r3, r2
 8005596:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005598:	4b10      	ldr	r3, [pc, #64]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a0f      	ldr	r2, [pc, #60]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 800559e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055a4:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4a0c      	ldr	r2, [pc, #48]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 80055aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055b0:	f7fd fd6a 	bl	8003088 <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b8:	f7fd fd66 	bl	8003088 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e058      	b.n	800567c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ca:	4b04      	ldr	r3, [pc, #16]	; (80055dc <HAL_RCC_OscConfig+0x778>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0f0      	beq.n	80055b8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055d6:	e050      	b.n	800567a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e04f      	b.n	800567c <HAL_RCC_OscConfig+0x818>
 80055dc:	40021000 	.word	0x40021000
 80055e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055e4:	4b27      	ldr	r3, [pc, #156]	; (8005684 <HAL_RCC_OscConfig+0x820>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d144      	bne.n	800567a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80055f0:	4b24      	ldr	r3, [pc, #144]	; (8005684 <HAL_RCC_OscConfig+0x820>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a23      	ldr	r2, [pc, #140]	; (8005684 <HAL_RCC_OscConfig+0x820>)
 80055f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055fc:	4b21      	ldr	r3, [pc, #132]	; (8005684 <HAL_RCC_OscConfig+0x820>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	4a20      	ldr	r2, [pc, #128]	; (8005684 <HAL_RCC_OscConfig+0x820>)
 8005602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005606:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005608:	f7fd fd3e 	bl	8003088 <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800560e:	e008      	b.n	8005622 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005610:	f7fd fd3a 	bl	8003088 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e02c      	b.n	800567c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005622:	4b18      	ldr	r3, [pc, #96]	; (8005684 <HAL_RCC_OscConfig+0x820>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0f0      	beq.n	8005610 <HAL_RCC_OscConfig+0x7ac>
 800562e:	e024      	b.n	800567a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	2b0c      	cmp	r3, #12
 8005634:	d01f      	beq.n	8005676 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005636:	4b13      	ldr	r3, [pc, #76]	; (8005684 <HAL_RCC_OscConfig+0x820>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a12      	ldr	r2, [pc, #72]	; (8005684 <HAL_RCC_OscConfig+0x820>)
 800563c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005642:	f7fd fd21 	bl	8003088 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564a:	f7fd fd1d 	bl	8003088 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e00f      	b.n	800567c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800565c:	4b09      	ldr	r3, [pc, #36]	; (8005684 <HAL_RCC_OscConfig+0x820>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f0      	bne.n	800564a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005668:	4b06      	ldr	r3, [pc, #24]	; (8005684 <HAL_RCC_OscConfig+0x820>)
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	4905      	ldr	r1, [pc, #20]	; (8005684 <HAL_RCC_OscConfig+0x820>)
 800566e:	4b06      	ldr	r3, [pc, #24]	; (8005688 <HAL_RCC_OscConfig+0x824>)
 8005670:	4013      	ands	r3, r2
 8005672:	60cb      	str	r3, [r1, #12]
 8005674:	e001      	b.n	800567a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3720      	adds	r7, #32
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40021000 	.word	0x40021000
 8005688:	feeefffc 	.word	0xfeeefffc

0800568c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e0e7      	b.n	8005870 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056a0:	4b75      	ldr	r3, [pc, #468]	; (8005878 <HAL_RCC_ClockConfig+0x1ec>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d910      	bls.n	80056d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ae:	4b72      	ldr	r3, [pc, #456]	; (8005878 <HAL_RCC_ClockConfig+0x1ec>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f023 0207 	bic.w	r2, r3, #7
 80056b6:	4970      	ldr	r1, [pc, #448]	; (8005878 <HAL_RCC_ClockConfig+0x1ec>)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056be:	4b6e      	ldr	r3, [pc, #440]	; (8005878 <HAL_RCC_ClockConfig+0x1ec>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d001      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0cf      	b.n	8005870 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d010      	beq.n	80056fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	4b66      	ldr	r3, [pc, #408]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d908      	bls.n	80056fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ec:	4b63      	ldr	r3, [pc, #396]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	4960      	ldr	r1, [pc, #384]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d04c      	beq.n	80057a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b03      	cmp	r3, #3
 8005710:	d107      	bne.n	8005722 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005712:	4b5a      	ldr	r3, [pc, #360]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d121      	bne.n	8005762 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e0a6      	b.n	8005870 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d107      	bne.n	800573a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800572a:	4b54      	ldr	r3, [pc, #336]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d115      	bne.n	8005762 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e09a      	b.n	8005870 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d107      	bne.n	8005752 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005742:	4b4e      	ldr	r3, [pc, #312]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d109      	bne.n	8005762 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e08e      	b.n	8005870 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005752:	4b4a      	ldr	r3, [pc, #296]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e086      	b.n	8005870 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005762:	4b46      	ldr	r3, [pc, #280]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f023 0203 	bic.w	r2, r3, #3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	4943      	ldr	r1, [pc, #268]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 8005770:	4313      	orrs	r3, r2
 8005772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005774:	f7fd fc88 	bl	8003088 <HAL_GetTick>
 8005778:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577a:	e00a      	b.n	8005792 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800577c:	f7fd fc84 	bl	8003088 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	f241 3288 	movw	r2, #5000	; 0x1388
 800578a:	4293      	cmp	r3, r2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e06e      	b.n	8005870 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005792:	4b3a      	ldr	r3, [pc, #232]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 020c 	and.w	r2, r3, #12
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d1eb      	bne.n	800577c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d010      	beq.n	80057d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	4b31      	ldr	r3, [pc, #196]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057bc:	429a      	cmp	r2, r3
 80057be:	d208      	bcs.n	80057d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c0:	4b2e      	ldr	r3, [pc, #184]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	492b      	ldr	r1, [pc, #172]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057d2:	4b29      	ldr	r3, [pc, #164]	; (8005878 <HAL_RCC_ClockConfig+0x1ec>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d210      	bcs.n	8005802 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e0:	4b25      	ldr	r3, [pc, #148]	; (8005878 <HAL_RCC_ClockConfig+0x1ec>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f023 0207 	bic.w	r2, r3, #7
 80057e8:	4923      	ldr	r1, [pc, #140]	; (8005878 <HAL_RCC_ClockConfig+0x1ec>)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f0:	4b21      	ldr	r3, [pc, #132]	; (8005878 <HAL_RCC_ClockConfig+0x1ec>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d001      	beq.n	8005802 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e036      	b.n	8005870 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d008      	beq.n	8005820 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800580e:	4b1b      	ldr	r3, [pc, #108]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	4918      	ldr	r1, [pc, #96]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 800581c:	4313      	orrs	r3, r2
 800581e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b00      	cmp	r3, #0
 800582a:	d009      	beq.n	8005840 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800582c:	4b13      	ldr	r3, [pc, #76]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	4910      	ldr	r1, [pc, #64]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 800583c:	4313      	orrs	r3, r2
 800583e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005840:	f000 f824 	bl	800588c <HAL_RCC_GetSysClockFreq>
 8005844:	4602      	mov	r2, r0
 8005846:	4b0d      	ldr	r3, [pc, #52]	; (800587c <HAL_RCC_ClockConfig+0x1f0>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	091b      	lsrs	r3, r3, #4
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	490b      	ldr	r1, [pc, #44]	; (8005880 <HAL_RCC_ClockConfig+0x1f4>)
 8005852:	5ccb      	ldrb	r3, [r1, r3]
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	4a09      	ldr	r2, [pc, #36]	; (8005884 <HAL_RCC_ClockConfig+0x1f8>)
 800585e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005860:	4b09      	ldr	r3, [pc, #36]	; (8005888 <HAL_RCC_ClockConfig+0x1fc>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f7fd fbbf 	bl	8002fe8 <HAL_InitTick>
 800586a:	4603      	mov	r3, r0
 800586c:	72fb      	strb	r3, [r7, #11]

  return status;
 800586e:	7afb      	ldrb	r3, [r7, #11]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40022000 	.word	0x40022000
 800587c:	40021000 	.word	0x40021000
 8005880:	0800bdd4 	.word	0x0800bdd4
 8005884:	20000024 	.word	0x20000024
 8005888:	20000028 	.word	0x20000028

0800588c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800588c:	b480      	push	{r7}
 800588e:	b089      	sub	sp, #36	; 0x24
 8005890:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	2300      	movs	r3, #0
 8005898:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800589a:	4b3e      	ldr	r3, [pc, #248]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 030c 	and.w	r3, r3, #12
 80058a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058a4:	4b3b      	ldr	r3, [pc, #236]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0303 	and.w	r3, r3, #3
 80058ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_GetSysClockFreq+0x34>
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2b0c      	cmp	r3, #12
 80058b8:	d121      	bne.n	80058fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d11e      	bne.n	80058fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058c0:	4b34      	ldr	r3, [pc, #208]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d107      	bne.n	80058dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058cc:	4b31      	ldr	r3, [pc, #196]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 80058ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058d2:	0a1b      	lsrs	r3, r3, #8
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	61fb      	str	r3, [r7, #28]
 80058da:	e005      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058dc:	4b2d      	ldr	r3, [pc, #180]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	091b      	lsrs	r3, r3, #4
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058e8:	4a2b      	ldr	r2, [pc, #172]	; (8005998 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10d      	bne.n	8005914 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058fc:	e00a      	b.n	8005914 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b04      	cmp	r3, #4
 8005902:	d102      	bne.n	800590a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005904:	4b25      	ldr	r3, [pc, #148]	; (800599c <HAL_RCC_GetSysClockFreq+0x110>)
 8005906:	61bb      	str	r3, [r7, #24]
 8005908:	e004      	b.n	8005914 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b08      	cmp	r3, #8
 800590e:	d101      	bne.n	8005914 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005910:	4b23      	ldr	r3, [pc, #140]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005912:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b0c      	cmp	r3, #12
 8005918:	d134      	bne.n	8005984 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800591a:	4b1e      	ldr	r3, [pc, #120]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d003      	beq.n	8005932 <HAL_RCC_GetSysClockFreq+0xa6>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b03      	cmp	r3, #3
 800592e:	d003      	beq.n	8005938 <HAL_RCC_GetSysClockFreq+0xac>
 8005930:	e005      	b.n	800593e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005932:	4b1a      	ldr	r3, [pc, #104]	; (800599c <HAL_RCC_GetSysClockFreq+0x110>)
 8005934:	617b      	str	r3, [r7, #20]
      break;
 8005936:	e005      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005938:	4b19      	ldr	r3, [pc, #100]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800593a:	617b      	str	r3, [r7, #20]
      break;
 800593c:	e002      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	617b      	str	r3, [r7, #20]
      break;
 8005942:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005944:	4b13      	ldr	r3, [pc, #76]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	091b      	lsrs	r3, r3, #4
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	3301      	adds	r3, #1
 8005950:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005952:	4b10      	ldr	r3, [pc, #64]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	0a1b      	lsrs	r3, r3, #8
 8005958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	fb03 f202 	mul.w	r2, r3, r2
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	0e5b      	lsrs	r3, r3, #25
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	3301      	adds	r3, #1
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005982:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005984:	69bb      	ldr	r3, [r7, #24]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3724      	adds	r7, #36	; 0x24
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40021000 	.word	0x40021000
 8005998:	0800bdec 	.word	0x0800bdec
 800599c:	00f42400 	.word	0x00f42400
 80059a0:	007a1200 	.word	0x007a1200

080059a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059a8:	4b03      	ldr	r3, [pc, #12]	; (80059b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80059aa:	681b      	ldr	r3, [r3, #0]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20000024 	.word	0x20000024

080059bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059c0:	f7ff fff0 	bl	80059a4 <HAL_RCC_GetHCLKFreq>
 80059c4:	4602      	mov	r2, r0
 80059c6:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	0a1b      	lsrs	r3, r3, #8
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	4904      	ldr	r1, [pc, #16]	; (80059e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059d2:	5ccb      	ldrb	r3, [r1, r3]
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059dc:	4618      	mov	r0, r3
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40021000 	.word	0x40021000
 80059e4:	0800bde4 	.word	0x0800bde4

080059e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059ec:	f7ff ffda 	bl	80059a4 <HAL_RCC_GetHCLKFreq>
 80059f0:	4602      	mov	r2, r0
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	0adb      	lsrs	r3, r3, #11
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	4904      	ldr	r1, [pc, #16]	; (8005a10 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059fe:	5ccb      	ldrb	r3, [r1, r3]
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	0800bde4 	.word	0x0800bde4

08005a14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005a20:	4b2a      	ldr	r3, [pc, #168]	; (8005acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a2c:	f7ff f9b6 	bl	8004d9c <HAL_PWREx_GetVoltageRange>
 8005a30:	6178      	str	r0, [r7, #20]
 8005a32:	e014      	b.n	8005a5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a34:	4b25      	ldr	r3, [pc, #148]	; (8005acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a38:	4a24      	ldr	r2, [pc, #144]	; (8005acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8005a40:	4b22      	ldr	r3, [pc, #136]	; (8005acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a4c:	f7ff f9a6 	bl	8004d9c <HAL_PWREx_GetVoltageRange>
 8005a50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a52:	4b1e      	ldr	r3, [pc, #120]	; (8005acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a56:	4a1d      	ldr	r2, [pc, #116]	; (8005acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a64:	d10b      	bne.n	8005a7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b80      	cmp	r3, #128	; 0x80
 8005a6a:	d919      	bls.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2ba0      	cmp	r3, #160	; 0xa0
 8005a70:	d902      	bls.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a72:	2302      	movs	r3, #2
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	e013      	b.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a78:	2301      	movs	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	e010      	b.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b80      	cmp	r3, #128	; 0x80
 8005a82:	d902      	bls.n	8005a8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a84:	2303      	movs	r3, #3
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	e00a      	b.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b80      	cmp	r3, #128	; 0x80
 8005a8e:	d102      	bne.n	8005a96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a90:	2302      	movs	r3, #2
 8005a92:	613b      	str	r3, [r7, #16]
 8005a94:	e004      	b.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b70      	cmp	r3, #112	; 0x70
 8005a9a:	d101      	bne.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f023 0207 	bic.w	r2, r3, #7
 8005aa8:	4909      	ldr	r1, [pc, #36]	; (8005ad0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d001      	beq.n	8005ac2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	40022000 	.word	0x40022000

08005ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005adc:	2300      	movs	r3, #0
 8005ade:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d031      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005af8:	d01a      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005afa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005afe:	d814      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d009      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005b04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b08:	d10f      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005b0a:	4b5d      	ldr	r3, [pc, #372]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	4a5c      	ldr	r2, [pc, #368]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b14:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b16:	e00c      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 f9ce 	bl	8005ec0 <RCCEx_PLLSAI1_Config>
 8005b24:	4603      	mov	r3, r0
 8005b26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b28:	e003      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	74fb      	strb	r3, [r7, #19]
      break;
 8005b2e:	e000      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b32:	7cfb      	ldrb	r3, [r7, #19]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10b      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b38:	4b51      	ldr	r3, [pc, #324]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b46:	494e      	ldr	r1, [pc, #312]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b4e:	e001      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b50:	7cfb      	ldrb	r3, [r7, #19]
 8005b52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 809e 	beq.w	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b62:	2300      	movs	r3, #0
 8005b64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b66:	4b46      	ldr	r3, [pc, #280]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005b76:	2300      	movs	r3, #0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00d      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b7c:	4b40      	ldr	r3, [pc, #256]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b80:	4a3f      	ldr	r2, [pc, #252]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b86:	6593      	str	r3, [r2, #88]	; 0x58
 8005b88:	4b3d      	ldr	r3, [pc, #244]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b94:	2301      	movs	r3, #1
 8005b96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b98:	4b3a      	ldr	r3, [pc, #232]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a39      	ldr	r2, [pc, #228]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ba4:	f7fd fa70 	bl	8003088 <HAL_GetTick>
 8005ba8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005baa:	e009      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bac:	f7fd fa6c 	bl	8003088 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d902      	bls.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	74fb      	strb	r3, [r7, #19]
        break;
 8005bbe:	e005      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005bc0:	4b30      	ldr	r3, [pc, #192]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0ef      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005bcc:	7cfb      	ldrb	r3, [r7, #19]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d15a      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bd2:	4b2b      	ldr	r3, [pc, #172]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bdc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01e      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d019      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bee:	4b24      	ldr	r3, [pc, #144]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bfa:	4b21      	ldr	r3, [pc, #132]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c00:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c10:	4a1b      	ldr	r2, [pc, #108]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c1a:	4a19      	ldr	r2, [pc, #100]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d016      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2c:	f7fd fa2c 	bl	8003088 <HAL_GetTick>
 8005c30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c32:	e00b      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c34:	f7fd fa28 	bl	8003088 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d902      	bls.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	74fb      	strb	r3, [r7, #19]
            break;
 8005c4a:	e006      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c4c:	4b0c      	ldr	r3, [pc, #48]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0ec      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005c5a:	7cfb      	ldrb	r3, [r7, #19]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10b      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c60:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c6e:	4904      	ldr	r1, [pc, #16]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c76:	e009      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c78:	7cfb      	ldrb	r3, [r7, #19]
 8005c7a:	74bb      	strb	r3, [r7, #18]
 8005c7c:	e006      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005c7e:	bf00      	nop
 8005c80:	40021000 	.word	0x40021000
 8005c84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c88:	7cfb      	ldrb	r3, [r7, #19]
 8005c8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c8c:	7c7b      	ldrb	r3, [r7, #17]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d105      	bne.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c92:	4b8a      	ldr	r3, [pc, #552]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c96:	4a89      	ldr	r2, [pc, #548]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005caa:	4b84      	ldr	r3, [pc, #528]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb0:	f023 0203 	bic.w	r2, r3, #3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	4980      	ldr	r1, [pc, #512]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ccc:	4b7b      	ldr	r3, [pc, #492]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd2:	f023 020c 	bic.w	r2, r3, #12
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	4978      	ldr	r1, [pc, #480]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cee:	4b73      	ldr	r3, [pc, #460]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfc:	496f      	ldr	r1, [pc, #444]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d10:	4b6a      	ldr	r3, [pc, #424]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d16:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1e:	4967      	ldr	r1, [pc, #412]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d32:	4b62      	ldr	r3, [pc, #392]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	495e      	ldr	r1, [pc, #376]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d54:	4b59      	ldr	r3, [pc, #356]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	4956      	ldr	r1, [pc, #344]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d76:	4b51      	ldr	r3, [pc, #324]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	494d      	ldr	r1, [pc, #308]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d028      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d98:	4b48      	ldr	r3, [pc, #288]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	4945      	ldr	r1, [pc, #276]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005db6:	d106      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005db8:	4b40      	ldr	r3, [pc, #256]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	4a3f      	ldr	r2, [pc, #252]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dc2:	60d3      	str	r3, [r2, #12]
 8005dc4:	e011      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dce:	d10c      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 f872 	bl	8005ec0 <RCCEx_PLLSAI1_Config>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005de0:	7cfb      	ldrb	r3, [r7, #19]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005de6:	7cfb      	ldrb	r3, [r7, #19]
 8005de8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d028      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005df6:	4b31      	ldr	r3, [pc, #196]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e04:	492d      	ldr	r1, [pc, #180]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e14:	d106      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e16:	4b29      	ldr	r3, [pc, #164]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	4a28      	ldr	r2, [pc, #160]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e20:	60d3      	str	r3, [r2, #12]
 8005e22:	e011      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e2c:	d10c      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3304      	adds	r3, #4
 8005e32:	2101      	movs	r1, #1
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 f843 	bl	8005ec0 <RCCEx_PLLSAI1_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e3e:	7cfb      	ldrb	r3, [r7, #19]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005e44:	7cfb      	ldrb	r3, [r7, #19]
 8005e46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01c      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e54:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e62:	4916      	ldr	r1, [pc, #88]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e72:	d10c      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3304      	adds	r3, #4
 8005e78:	2102      	movs	r1, #2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 f820 	bl	8005ec0 <RCCEx_PLLSAI1_Config>
 8005e80:	4603      	mov	r3, r0
 8005e82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e84:	7cfb      	ldrb	r3, [r7, #19]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005e8a:	7cfb      	ldrb	r3, [r7, #19]
 8005e8c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e9a:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea8:	4904      	ldr	r1, [pc, #16]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005eb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40021000 	.word	0x40021000

08005ec0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ece:	4b74      	ldr	r3, [pc, #464]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d018      	beq.n	8005f0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005eda:	4b71      	ldr	r3, [pc, #452]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f003 0203 	and.w	r2, r3, #3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d10d      	bne.n	8005f06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
       ||
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d009      	beq.n	8005f06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005ef2:	4b6b      	ldr	r3, [pc, #428]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	091b      	lsrs	r3, r3, #4
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
       ||
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d047      	beq.n	8005f96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	73fb      	strb	r3, [r7, #15]
 8005f0a:	e044      	b.n	8005f96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d018      	beq.n	8005f46 <RCCEx_PLLSAI1_Config+0x86>
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d825      	bhi.n	8005f64 <RCCEx_PLLSAI1_Config+0xa4>
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d002      	beq.n	8005f22 <RCCEx_PLLSAI1_Config+0x62>
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d009      	beq.n	8005f34 <RCCEx_PLLSAI1_Config+0x74>
 8005f20:	e020      	b.n	8005f64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f22:	4b5f      	ldr	r3, [pc, #380]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d11d      	bne.n	8005f6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f32:	e01a      	b.n	8005f6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f34:	4b5a      	ldr	r3, [pc, #360]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d116      	bne.n	8005f6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f44:	e013      	b.n	8005f6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f46:	4b56      	ldr	r3, [pc, #344]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10f      	bne.n	8005f72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f52:	4b53      	ldr	r3, [pc, #332]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d109      	bne.n	8005f72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f62:	e006      	b.n	8005f72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
      break;
 8005f68:	e004      	b.n	8005f74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f6a:	bf00      	nop
 8005f6c:	e002      	b.n	8005f74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f6e:	bf00      	nop
 8005f70:	e000      	b.n	8005f74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f72:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10d      	bne.n	8005f96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f7a:	4b49      	ldr	r3, [pc, #292]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6819      	ldr	r1, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	430b      	orrs	r3, r1
 8005f90:	4943      	ldr	r1, [pc, #268]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d17c      	bne.n	8006096 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f9c:	4b40      	ldr	r3, [pc, #256]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a3f      	ldr	r2, [pc, #252]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fa8:	f7fd f86e 	bl	8003088 <HAL_GetTick>
 8005fac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fae:	e009      	b.n	8005fc4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fb0:	f7fd f86a 	bl	8003088 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d902      	bls.n	8005fc4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	73fb      	strb	r3, [r7, #15]
        break;
 8005fc2:	e005      	b.n	8005fd0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fc4:	4b36      	ldr	r3, [pc, #216]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1ef      	bne.n	8005fb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d15f      	bne.n	8006096 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d110      	bne.n	8005ffe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fdc:	4b30      	ldr	r3, [pc, #192]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005fe4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6892      	ldr	r2, [r2, #8]
 8005fec:	0211      	lsls	r1, r2, #8
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	68d2      	ldr	r2, [r2, #12]
 8005ff2:	06d2      	lsls	r2, r2, #27
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	492a      	ldr	r1, [pc, #168]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	610b      	str	r3, [r1, #16]
 8005ffc:	e027      	b.n	800604e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d112      	bne.n	800602a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006004:	4b26      	ldr	r3, [pc, #152]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800600c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6892      	ldr	r2, [r2, #8]
 8006014:	0211      	lsls	r1, r2, #8
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6912      	ldr	r2, [r2, #16]
 800601a:	0852      	lsrs	r2, r2, #1
 800601c:	3a01      	subs	r2, #1
 800601e:	0552      	lsls	r2, r2, #21
 8006020:	430a      	orrs	r2, r1
 8006022:	491f      	ldr	r1, [pc, #124]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006024:	4313      	orrs	r3, r2
 8006026:	610b      	str	r3, [r1, #16]
 8006028:	e011      	b.n	800604e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800602a:	4b1d      	ldr	r3, [pc, #116]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006032:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6892      	ldr	r2, [r2, #8]
 800603a:	0211      	lsls	r1, r2, #8
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6952      	ldr	r2, [r2, #20]
 8006040:	0852      	lsrs	r2, r2, #1
 8006042:	3a01      	subs	r2, #1
 8006044:	0652      	lsls	r2, r2, #25
 8006046:	430a      	orrs	r2, r1
 8006048:	4915      	ldr	r1, [pc, #84]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800604a:	4313      	orrs	r3, r2
 800604c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800604e:	4b14      	ldr	r3, [pc, #80]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a13      	ldr	r2, [pc, #76]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006054:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006058:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800605a:	f7fd f815 	bl	8003088 <HAL_GetTick>
 800605e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006060:	e009      	b.n	8006076 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006062:	f7fd f811 	bl	8003088 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d902      	bls.n	8006076 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	73fb      	strb	r3, [r7, #15]
          break;
 8006074:	e005      	b.n	8006082 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006076:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0ef      	beq.n	8006062 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d106      	bne.n	8006096 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	4903      	ldr	r1, [pc, #12]	; (80060a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006092:	4313      	orrs	r3, r2
 8006094:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006096:	7bfb      	ldrb	r3, [r7, #15]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40021000 	.word	0x40021000

080060a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e049      	b.n	800614a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fc fd2c 	bl	8002b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3304      	adds	r3, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f000 f9aa 	bl	800643c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e049      	b.n	80061f8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d106      	bne.n	800617e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f841 	bl	8006200 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2202      	movs	r2, #2
 8006182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3304      	adds	r3, #4
 800618e:	4619      	mov	r1, r3
 8006190:	4610      	mov	r0, r2
 8006192:	f000 f953 	bl	800643c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800622a:	2b01      	cmp	r3, #1
 800622c:	d101      	bne.n	8006232 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800622e:	2302      	movs	r3, #2
 8006230:	e0ff      	b.n	8006432 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b14      	cmp	r3, #20
 800623e:	f200 80f0 	bhi.w	8006422 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006242:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006248:	0800629d 	.word	0x0800629d
 800624c:	08006423 	.word	0x08006423
 8006250:	08006423 	.word	0x08006423
 8006254:	08006423 	.word	0x08006423
 8006258:	080062dd 	.word	0x080062dd
 800625c:	08006423 	.word	0x08006423
 8006260:	08006423 	.word	0x08006423
 8006264:	08006423 	.word	0x08006423
 8006268:	0800631f 	.word	0x0800631f
 800626c:	08006423 	.word	0x08006423
 8006270:	08006423 	.word	0x08006423
 8006274:	08006423 	.word	0x08006423
 8006278:	0800635f 	.word	0x0800635f
 800627c:	08006423 	.word	0x08006423
 8006280:	08006423 	.word	0x08006423
 8006284:	08006423 	.word	0x08006423
 8006288:	080063a1 	.word	0x080063a1
 800628c:	08006423 	.word	0x08006423
 8006290:	08006423 	.word	0x08006423
 8006294:	08006423 	.word	0x08006423
 8006298:	080063e1 	.word	0x080063e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68b9      	ldr	r1, [r7, #8]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 f92e 	bl	8006504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	699a      	ldr	r2, [r3, #24]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0208 	orr.w	r2, r2, #8
 80062b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0204 	bic.w	r2, r2, #4
 80062c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6999      	ldr	r1, [r3, #24]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	619a      	str	r2, [r3, #24]
      break;
 80062da:	e0a5      	b.n	8006428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 f98a 	bl	80065fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6999      	ldr	r1, [r3, #24]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	021a      	lsls	r2, r3, #8
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	619a      	str	r2, [r3, #24]
      break;
 800631c:	e084      	b.n	8006428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	4618      	mov	r0, r3
 8006326:	f000 f9e3 	bl	80066f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69da      	ldr	r2, [r3, #28]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0208 	orr.w	r2, r2, #8
 8006338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69da      	ldr	r2, [r3, #28]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 0204 	bic.w	r2, r2, #4
 8006348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69d9      	ldr	r1, [r3, #28]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	61da      	str	r2, [r3, #28]
      break;
 800635c:	e064      	b.n	8006428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fa3b 	bl	80067e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69da      	ldr	r2, [r3, #28]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69d9      	ldr	r1, [r3, #28]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	021a      	lsls	r2, r3, #8
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	61da      	str	r2, [r3, #28]
      break;
 800639e:	e043      	b.n	8006428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68b9      	ldr	r1, [r7, #8]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fa78 	bl	800689c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0208 	orr.w	r2, r2, #8
 80063ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0204 	bic.w	r2, r2, #4
 80063ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	691a      	ldr	r2, [r3, #16]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063de:	e023      	b.n	8006428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fab0 	bl	800694c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800640a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	021a      	lsls	r2, r3, #8
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006420:	e002      	b.n	8006428 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	75fb      	strb	r3, [r7, #23]
      break;
 8006426:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006430:	7dfb      	ldrb	r3, [r7, #23]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop

0800643c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a2a      	ldr	r2, [pc, #168]	; (80064f8 <TIM_Base_SetConfig+0xbc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d003      	beq.n	800645c <TIM_Base_SetConfig+0x20>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645a:	d108      	bne.n	800646e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a21      	ldr	r2, [pc, #132]	; (80064f8 <TIM_Base_SetConfig+0xbc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00b      	beq.n	800648e <TIM_Base_SetConfig+0x52>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647c:	d007      	beq.n	800648e <TIM_Base_SetConfig+0x52>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a1e      	ldr	r2, [pc, #120]	; (80064fc <TIM_Base_SetConfig+0xc0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d003      	beq.n	800648e <TIM_Base_SetConfig+0x52>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a1d      	ldr	r2, [pc, #116]	; (8006500 <TIM_Base_SetConfig+0xc4>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d108      	bne.n	80064a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a0c      	ldr	r2, [pc, #48]	; (80064f8 <TIM_Base_SetConfig+0xbc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d007      	beq.n	80064dc <TIM_Base_SetConfig+0xa0>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a0b      	ldr	r2, [pc, #44]	; (80064fc <TIM_Base_SetConfig+0xc0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <TIM_Base_SetConfig+0xa0>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a0a      	ldr	r2, [pc, #40]	; (8006500 <TIM_Base_SetConfig+0xc4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d103      	bne.n	80064e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	615a      	str	r2, [r3, #20]
}
 80064ea:	bf00      	nop
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40014000 	.word	0x40014000
 8006500:	40014400 	.word	0x40014400

08006504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f023 0201 	bic.w	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0303 	bic.w	r3, r3, #3
 800653e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f023 0302 	bic.w	r3, r3, #2
 8006550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a24      	ldr	r2, [pc, #144]	; (80065f0 <TIM_OC1_SetConfig+0xec>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d007      	beq.n	8006574 <TIM_OC1_SetConfig+0x70>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a23      	ldr	r2, [pc, #140]	; (80065f4 <TIM_OC1_SetConfig+0xf0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d003      	beq.n	8006574 <TIM_OC1_SetConfig+0x70>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a22      	ldr	r2, [pc, #136]	; (80065f8 <TIM_OC1_SetConfig+0xf4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d10c      	bne.n	800658e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f023 0308 	bic.w	r3, r3, #8
 800657a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f023 0304 	bic.w	r3, r3, #4
 800658c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a17      	ldr	r2, [pc, #92]	; (80065f0 <TIM_OC1_SetConfig+0xec>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d007      	beq.n	80065a6 <TIM_OC1_SetConfig+0xa2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a16      	ldr	r2, [pc, #88]	; (80065f4 <TIM_OC1_SetConfig+0xf0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d003      	beq.n	80065a6 <TIM_OC1_SetConfig+0xa2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a15      	ldr	r2, [pc, #84]	; (80065f8 <TIM_OC1_SetConfig+0xf4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d111      	bne.n	80065ca <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	621a      	str	r2, [r3, #32]
}
 80065e4:	bf00      	nop
 80065e6:	371c      	adds	r7, #28
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	40012c00 	.word	0x40012c00
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400

080065fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	f023 0210 	bic.w	r2, r3, #16
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800662a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800662e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	4313      	orrs	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f023 0320 	bic.w	r3, r3, #32
 800664a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a22      	ldr	r2, [pc, #136]	; (80066e4 <TIM_OC2_SetConfig+0xe8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d10d      	bne.n	800667c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800667a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a19      	ldr	r2, [pc, #100]	; (80066e4 <TIM_OC2_SetConfig+0xe8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d007      	beq.n	8006694 <TIM_OC2_SetConfig+0x98>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a18      	ldr	r2, [pc, #96]	; (80066e8 <TIM_OC2_SetConfig+0xec>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d003      	beq.n	8006694 <TIM_OC2_SetConfig+0x98>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a17      	ldr	r2, [pc, #92]	; (80066ec <TIM_OC2_SetConfig+0xf0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d113      	bne.n	80066bc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800669a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	621a      	str	r2, [r3, #32]
}
 80066d6:	bf00      	nop
 80066d8:	371c      	adds	r7, #28
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40014000 	.word	0x40014000
 80066ec:	40014400 	.word	0x40014400

080066f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800671e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0303 	bic.w	r3, r3, #3
 800672a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800673c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	021b      	lsls	r3, r3, #8
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a21      	ldr	r2, [pc, #132]	; (80067d4 <TIM_OC3_SetConfig+0xe4>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d10d      	bne.n	800676e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	021b      	lsls	r3, r3, #8
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800676c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a18      	ldr	r2, [pc, #96]	; (80067d4 <TIM_OC3_SetConfig+0xe4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d007      	beq.n	8006786 <TIM_OC3_SetConfig+0x96>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a17      	ldr	r2, [pc, #92]	; (80067d8 <TIM_OC3_SetConfig+0xe8>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d003      	beq.n	8006786 <TIM_OC3_SetConfig+0x96>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a16      	ldr	r2, [pc, #88]	; (80067dc <TIM_OC3_SetConfig+0xec>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d113      	bne.n	80067ae <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800678c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	621a      	str	r2, [r3, #32]
}
 80067c8:	bf00      	nop
 80067ca:	371c      	adds	r7, #28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	40012c00 	.word	0x40012c00
 80067d8:	40014000 	.word	0x40014000
 80067dc:	40014400 	.word	0x40014400

080067e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800680e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800681a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	4313      	orrs	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800682e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	031b      	lsls	r3, r3, #12
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	4313      	orrs	r3, r2
 800683a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a14      	ldr	r2, [pc, #80]	; (8006890 <TIM_OC4_SetConfig+0xb0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d007      	beq.n	8006854 <TIM_OC4_SetConfig+0x74>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a13      	ldr	r2, [pc, #76]	; (8006894 <TIM_OC4_SetConfig+0xb4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <TIM_OC4_SetConfig+0x74>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a12      	ldr	r2, [pc, #72]	; (8006898 <TIM_OC4_SetConfig+0xb8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d109      	bne.n	8006868 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800685a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	019b      	lsls	r3, r3, #6
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	621a      	str	r2, [r3, #32]
}
 8006882:	bf00      	nop
 8006884:	371c      	adds	r7, #28
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40012c00 	.word	0x40012c00
 8006894:	40014000 	.word	0x40014000
 8006898:	40014400 	.word	0x40014400

0800689c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80068e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	041b      	lsls	r3, r3, #16
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a13      	ldr	r2, [pc, #76]	; (8006940 <TIM_OC5_SetConfig+0xa4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d007      	beq.n	8006906 <TIM_OC5_SetConfig+0x6a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a12      	ldr	r2, [pc, #72]	; (8006944 <TIM_OC5_SetConfig+0xa8>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d003      	beq.n	8006906 <TIM_OC5_SetConfig+0x6a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a11      	ldr	r2, [pc, #68]	; (8006948 <TIM_OC5_SetConfig+0xac>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d109      	bne.n	800691a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800690c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	621a      	str	r2, [r3, #32]
}
 8006934:	bf00      	nop
 8006936:	371c      	adds	r7, #28
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	40012c00 	.word	0x40012c00
 8006944:	40014000 	.word	0x40014000
 8006948:	40014400 	.word	0x40014400

0800694c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800697a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800697e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	051b      	lsls	r3, r3, #20
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	4313      	orrs	r3, r2
 800699e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a14      	ldr	r2, [pc, #80]	; (80069f4 <TIM_OC6_SetConfig+0xa8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d007      	beq.n	80069b8 <TIM_OC6_SetConfig+0x6c>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a13      	ldr	r2, [pc, #76]	; (80069f8 <TIM_OC6_SetConfig+0xac>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d003      	beq.n	80069b8 <TIM_OC6_SetConfig+0x6c>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a12      	ldr	r2, [pc, #72]	; (80069fc <TIM_OC6_SetConfig+0xb0>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d109      	bne.n	80069cc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	029b      	lsls	r3, r3, #10
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	621a      	str	r2, [r3, #32]
}
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40012c00 	.word	0x40012c00
 80069f8:	40014000 	.word	0x40014000
 80069fc:	40014400 	.word	0x40014400

08006a00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e060      	b.n	8006ade <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	041b      	lsls	r3, r3, #16
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a14      	ldr	r2, [pc, #80]	; (8006aec <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d115      	bne.n	8006acc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	051b      	lsls	r3, r3, #20
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40012c00 	.word	0x40012c00

08006af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e040      	b.n	8006b84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fc f85e 	bl	8002bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2224      	movs	r2, #36	; 0x24
 8006b1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fbe8 	bl	8007304 <UART_SetConfig>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d101      	bne.n	8006b3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e022      	b.n	8006b84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fe08 	bl	800775c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0201 	orr.w	r2, r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fe8f 	bl	80078a0 <UART_CheckIdleState>
 8006b82:	4603      	mov	r3, r0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b08b      	sub	sp, #44	; 0x2c
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	4613      	mov	r3, r2
 8006b98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	d156      	bne.n	8006c50 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <HAL_UART_Transmit_IT+0x22>
 8006ba8:	88fb      	ldrh	r3, [r7, #6]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e04f      	b.n	8006c52 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <HAL_UART_Transmit_IT+0x34>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e048      	b.n	8006c52 <HAL_UART_Transmit_IT+0xc6>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	88fa      	ldrh	r2, [r7, #6]
 8006bd2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	88fa      	ldrh	r2, [r7, #6]
 8006bda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2221      	movs	r2, #33	; 0x21
 8006bf0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bfa:	d107      	bne.n	8006c0c <HAL_UART_Transmit_IT+0x80>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d103      	bne.n	8006c0c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4a16      	ldr	r2, [pc, #88]	; (8006c60 <HAL_UART_Transmit_IT+0xd4>)
 8006c08:	669a      	str	r2, [r3, #104]	; 0x68
 8006c0a:	e002      	b.n	8006c12 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4a15      	ldr	r2, [pc, #84]	; (8006c64 <HAL_UART_Transmit_IT+0xd8>)
 8006c10:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	613b      	str	r3, [r7, #16]
   return(result);
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	623b      	str	r3, [r7, #32]
 8006c3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	69f9      	ldr	r1, [r7, #28]
 8006c3e:	6a3a      	ldr	r2, [r7, #32]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e6      	bne.n	8006c1a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e000      	b.n	8006c52 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006c50:	2302      	movs	r3, #2
  }
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	372c      	adds	r7, #44	; 0x2c
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	08007dfb 	.word	0x08007dfb
 8006c64:	08007d43 	.word	0x08007d43

08006c68 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08a      	sub	sp, #40	; 0x28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c7a:	2b20      	cmp	r3, #32
 8006c7c:	d142      	bne.n	8006d04 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <HAL_UART_Receive_IT+0x22>
 8006c84:	88fb      	ldrh	r3, [r7, #6]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e03b      	b.n	8006d06 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_UART_Receive_IT+0x34>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e034      	b.n	8006d06 <HAL_UART_Receive_IT+0x9e>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a18      	ldr	r2, [pc, #96]	; (8006d10 <HAL_UART_Receive_IT+0xa8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d01f      	beq.n	8006cf4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d018      	beq.n	8006cf4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	623b      	str	r3, [r7, #32]
 8006ce2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce4:	69f9      	ldr	r1, [r7, #28]
 8006ce6:	6a3a      	ldr	r2, [r7, #32]
 8006ce8:	e841 2300 	strex	r3, r2, [r1]
 8006cec:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e6      	bne.n	8006cc2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006cf4:	88fb      	ldrh	r3, [r7, #6]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	68b9      	ldr	r1, [r7, #8]
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 fede 	bl	8007abc <UART_Start_Receive_IT>
 8006d00:	4603      	mov	r3, r0
 8006d02:	e000      	b.n	8006d06 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006d04:	2302      	movs	r3, #2
  }
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3728      	adds	r7, #40	; 0x28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	40008000 	.word	0x40008000

08006d14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b0ba      	sub	sp, #232	; 0xe8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006d3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006d42:	4013      	ands	r3, r2
 8006d44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006d48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d115      	bne.n	8006d7c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00f      	beq.n	8006d7c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d009      	beq.n	8006d7c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 82a6 	beq.w	80072be <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	4798      	blx	r3
      }
      return;
 8006d7a:	e2a0      	b.n	80072be <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006d7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 8117 	beq.w	8006fb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006d92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006d96:	4b85      	ldr	r3, [pc, #532]	; (8006fac <HAL_UART_IRQHandler+0x298>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 810a 	beq.w	8006fb4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d011      	beq.n	8006dd0 <HAL_UART_IRQHandler+0xbc>
 8006dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00b      	beq.n	8006dd0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dc6:	f043 0201 	orr.w	r2, r3, #1
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d011      	beq.n	8006e00 <HAL_UART_IRQHandler+0xec>
 8006ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00b      	beq.n	8006e00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2202      	movs	r2, #2
 8006dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006df6:	f043 0204 	orr.w	r2, r3, #4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d011      	beq.n	8006e30 <HAL_UART_IRQHandler+0x11c>
 8006e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00b      	beq.n	8006e30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e26:	f043 0202 	orr.w	r2, r3, #2
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e34:	f003 0308 	and.w	r3, r3, #8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d017      	beq.n	8006e6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d105      	bne.n	8006e54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00b      	beq.n	8006e6c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2208      	movs	r2, #8
 8006e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e62:	f043 0208 	orr.w	r2, r3, #8
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d012      	beq.n	8006e9e <HAL_UART_IRQHandler+0x18a>
 8006e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00c      	beq.n	8006e9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e94:	f043 0220 	orr.w	r2, r3, #32
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 820c 	beq.w	80072c2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00d      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d007      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ed8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee6:	2b40      	cmp	r3, #64	; 0x40
 8006ee8:	d005      	beq.n	8006ef6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006eea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006eee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d04f      	beq.n	8006f96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 feaa 	bl	8007c50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f06:	2b40      	cmp	r3, #64	; 0x40
 8006f08:	d141      	bne.n	8006f8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3308      	adds	r3, #8
 8006f10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3308      	adds	r3, #8
 8006f32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1d9      	bne.n	8006f0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d013      	beq.n	8006f86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f62:	4a13      	ldr	r2, [pc, #76]	; (8006fb0 <HAL_UART_IRQHandler+0x29c>)
 8006f64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fc f9e7 	bl	800333e <HAL_DMA_Abort_IT>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d017      	beq.n	8006fa6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006f80:	4610      	mov	r0, r2
 8006f82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f84:	e00f      	b.n	8006fa6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f9a6 	bl	80072d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f8c:	e00b      	b.n	8006fa6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f9a2 	bl	80072d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f94:	e007      	b.n	8006fa6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f99e 	bl	80072d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006fa4:	e18d      	b.n	80072c2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa6:	bf00      	nop
    return;
 8006fa8:	e18b      	b.n	80072c2 <HAL_UART_IRQHandler+0x5ae>
 8006faa:	bf00      	nop
 8006fac:	04000120 	.word	0x04000120
 8006fb0:	08007d17 	.word	0x08007d17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	f040 8146 	bne.w	800724a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc2:	f003 0310 	and.w	r3, r3, #16
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 813f 	beq.w	800724a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fd0:	f003 0310 	and.w	r3, r3, #16
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8138 	beq.w	800724a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2210      	movs	r2, #16
 8006fe0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fec:	2b40      	cmp	r3, #64	; 0x40
 8006fee:	f040 80b4 	bne.w	800715a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ffe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 815f 	beq.w	80072c6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800700e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007012:	429a      	cmp	r2, r3
 8007014:	f080 8157 	bcs.w	80072c6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800701e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0320 	and.w	r3, r3, #32
 800702e:	2b00      	cmp	r3, #0
 8007030:	f040 8085 	bne.w	800713e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800704c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	461a      	mov	r2, r3
 800705a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800705e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007062:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800706a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1da      	bne.n	8007034 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3308      	adds	r3, #8
 8007084:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800708e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007090:	f023 0301 	bic.w	r3, r3, #1
 8007094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3308      	adds	r3, #8
 800709e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e1      	bne.n	800707e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3308      	adds	r3, #8
 80070c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3308      	adds	r3, #8
 80070da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e3      	bne.n	80070ba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2220      	movs	r2, #32
 80070f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007106:	e853 3f00 	ldrex	r3, [r3]
 800710a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800710c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800710e:	f023 0310 	bic.w	r3, r3, #16
 8007112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007120:	65bb      	str	r3, [r7, #88]	; 0x58
 8007122:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007124:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007126:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007128:	e841 2300 	strex	r3, r2, [r1]
 800712c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800712e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1e4      	bne.n	80070fe <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007138:	4618      	mov	r0, r3
 800713a:	f7fc f8c2 	bl	80032c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800714a:	b29b      	uxth	r3, r3
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	b29b      	uxth	r3, r3
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f8ca 	bl	80072ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007158:	e0b5      	b.n	80072c6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007166:	b29b      	uxth	r3, r3
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007174:	b29b      	uxth	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 80a7 	beq.w	80072ca <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800717c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 80a2 	beq.w	80072ca <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007196:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800719a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071a8:	647b      	str	r3, [r7, #68]	; 0x44
 80071aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e4      	bne.n	8007186 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3308      	adds	r3, #8
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	623b      	str	r3, [r7, #32]
   return(result);
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	f023 0301 	bic.w	r3, r3, #1
 80071d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3308      	adds	r3, #8
 80071dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071e0:	633a      	str	r2, [r7, #48]	; 0x30
 80071e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071e8:	e841 2300 	strex	r3, r2, [r1]
 80071ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e3      	bne.n	80071bc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2220      	movs	r2, #32
 80071f8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	e853 3f00 	ldrex	r3, [r3]
 8007212:	60fb      	str	r3, [r7, #12]
   return(result);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0310 	bic.w	r3, r3, #16
 800721a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007228:	61fb      	str	r3, [r7, #28]
 800722a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722c:	69b9      	ldr	r1, [r7, #24]
 800722e:	69fa      	ldr	r2, [r7, #28]
 8007230:	e841 2300 	strex	r3, r2, [r1]
 8007234:	617b      	str	r3, [r7, #20]
   return(result);
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1e4      	bne.n	8007206 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800723c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f852 	bl	80072ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007248:	e03f      	b.n	80072ca <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800724a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00e      	beq.n	8007274 <HAL_UART_IRQHandler+0x560>
 8007256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800725a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d008      	beq.n	8007274 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800726a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 ffae 	bl	80081ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007272:	e02d      	b.n	80072d0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00e      	beq.n	800729e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007288:	2b00      	cmp	r3, #0
 800728a:	d008      	beq.n	800729e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01c      	beq.n	80072ce <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	4798      	blx	r3
    }
    return;
 800729c:	e017      	b.n	80072ce <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800729e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d012      	beq.n	80072d0 <HAL_UART_IRQHandler+0x5bc>
 80072aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00c      	beq.n	80072d0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fdff 	bl	8007eba <UART_EndTransmit_IT>
    return;
 80072bc:	e008      	b.n	80072d0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80072be:	bf00      	nop
 80072c0:	e006      	b.n	80072d0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80072c2:	bf00      	nop
 80072c4:	e004      	b.n	80072d0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80072c6:	bf00      	nop
 80072c8:	e002      	b.n	80072d0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80072ca:	bf00      	nop
 80072cc:	e000      	b.n	80072d0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80072ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80072d0:	37e8      	adds	r7, #232	; 0xe8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop

080072d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007308:	b08a      	sub	sp, #40	; 0x28
 800730a:	af00      	add	r7, sp, #0
 800730c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	431a      	orrs	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	431a      	orrs	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	4313      	orrs	r3, r2
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	4bb4      	ldr	r3, [pc, #720]	; (8007604 <UART_SetConfig+0x300>)
 8007334:	4013      	ands	r3, r2
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	6812      	ldr	r2, [r2, #0]
 800733a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800733c:	430b      	orrs	r3, r1
 800733e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	68da      	ldr	r2, [r3, #12]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4aa9      	ldr	r2, [pc, #676]	; (8007608 <UART_SetConfig+0x304>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d004      	beq.n	8007370 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800736c:	4313      	orrs	r3, r2
 800736e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007380:	430a      	orrs	r2, r1
 8007382:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4aa0      	ldr	r2, [pc, #640]	; (800760c <UART_SetConfig+0x308>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d126      	bne.n	80073dc <UART_SetConfig+0xd8>
 800738e:	4ba0      	ldr	r3, [pc, #640]	; (8007610 <UART_SetConfig+0x30c>)
 8007390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007394:	f003 0303 	and.w	r3, r3, #3
 8007398:	2b03      	cmp	r3, #3
 800739a:	d81b      	bhi.n	80073d4 <UART_SetConfig+0xd0>
 800739c:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <UART_SetConfig+0xa0>)
 800739e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a2:	bf00      	nop
 80073a4:	080073b5 	.word	0x080073b5
 80073a8:	080073c5 	.word	0x080073c5
 80073ac:	080073bd 	.word	0x080073bd
 80073b0:	080073cd 	.word	0x080073cd
 80073b4:	2301      	movs	r3, #1
 80073b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ba:	e080      	b.n	80074be <UART_SetConfig+0x1ba>
 80073bc:	2302      	movs	r3, #2
 80073be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073c2:	e07c      	b.n	80074be <UART_SetConfig+0x1ba>
 80073c4:	2304      	movs	r3, #4
 80073c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ca:	e078      	b.n	80074be <UART_SetConfig+0x1ba>
 80073cc:	2308      	movs	r3, #8
 80073ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073d2:	e074      	b.n	80074be <UART_SetConfig+0x1ba>
 80073d4:	2310      	movs	r3, #16
 80073d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073da:	e070      	b.n	80074be <UART_SetConfig+0x1ba>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a8c      	ldr	r2, [pc, #560]	; (8007614 <UART_SetConfig+0x310>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d138      	bne.n	8007458 <UART_SetConfig+0x154>
 80073e6:	4b8a      	ldr	r3, [pc, #552]	; (8007610 <UART_SetConfig+0x30c>)
 80073e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ec:	f003 030c 	and.w	r3, r3, #12
 80073f0:	2b0c      	cmp	r3, #12
 80073f2:	d82d      	bhi.n	8007450 <UART_SetConfig+0x14c>
 80073f4:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <UART_SetConfig+0xf8>)
 80073f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fa:	bf00      	nop
 80073fc:	08007431 	.word	0x08007431
 8007400:	08007451 	.word	0x08007451
 8007404:	08007451 	.word	0x08007451
 8007408:	08007451 	.word	0x08007451
 800740c:	08007441 	.word	0x08007441
 8007410:	08007451 	.word	0x08007451
 8007414:	08007451 	.word	0x08007451
 8007418:	08007451 	.word	0x08007451
 800741c:	08007439 	.word	0x08007439
 8007420:	08007451 	.word	0x08007451
 8007424:	08007451 	.word	0x08007451
 8007428:	08007451 	.word	0x08007451
 800742c:	08007449 	.word	0x08007449
 8007430:	2300      	movs	r3, #0
 8007432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007436:	e042      	b.n	80074be <UART_SetConfig+0x1ba>
 8007438:	2302      	movs	r3, #2
 800743a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800743e:	e03e      	b.n	80074be <UART_SetConfig+0x1ba>
 8007440:	2304      	movs	r3, #4
 8007442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007446:	e03a      	b.n	80074be <UART_SetConfig+0x1ba>
 8007448:	2308      	movs	r3, #8
 800744a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800744e:	e036      	b.n	80074be <UART_SetConfig+0x1ba>
 8007450:	2310      	movs	r3, #16
 8007452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007456:	e032      	b.n	80074be <UART_SetConfig+0x1ba>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a6a      	ldr	r2, [pc, #424]	; (8007608 <UART_SetConfig+0x304>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d12a      	bne.n	80074b8 <UART_SetConfig+0x1b4>
 8007462:	4b6b      	ldr	r3, [pc, #428]	; (8007610 <UART_SetConfig+0x30c>)
 8007464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007468:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800746c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007470:	d01a      	beq.n	80074a8 <UART_SetConfig+0x1a4>
 8007472:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007476:	d81b      	bhi.n	80074b0 <UART_SetConfig+0x1ac>
 8007478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800747c:	d00c      	beq.n	8007498 <UART_SetConfig+0x194>
 800747e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007482:	d815      	bhi.n	80074b0 <UART_SetConfig+0x1ac>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <UART_SetConfig+0x18c>
 8007488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800748c:	d008      	beq.n	80074a0 <UART_SetConfig+0x19c>
 800748e:	e00f      	b.n	80074b0 <UART_SetConfig+0x1ac>
 8007490:	2300      	movs	r3, #0
 8007492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007496:	e012      	b.n	80074be <UART_SetConfig+0x1ba>
 8007498:	2302      	movs	r3, #2
 800749a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800749e:	e00e      	b.n	80074be <UART_SetConfig+0x1ba>
 80074a0:	2304      	movs	r3, #4
 80074a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074a6:	e00a      	b.n	80074be <UART_SetConfig+0x1ba>
 80074a8:	2308      	movs	r3, #8
 80074aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ae:	e006      	b.n	80074be <UART_SetConfig+0x1ba>
 80074b0:	2310      	movs	r3, #16
 80074b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074b6:	e002      	b.n	80074be <UART_SetConfig+0x1ba>
 80074b8:	2310      	movs	r3, #16
 80074ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a51      	ldr	r2, [pc, #324]	; (8007608 <UART_SetConfig+0x304>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d17a      	bne.n	80075be <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	d824      	bhi.n	800751a <UART_SetConfig+0x216>
 80074d0:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <UART_SetConfig+0x1d4>)
 80074d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d6:	bf00      	nop
 80074d8:	080074fd 	.word	0x080074fd
 80074dc:	0800751b 	.word	0x0800751b
 80074e0:	08007505 	.word	0x08007505
 80074e4:	0800751b 	.word	0x0800751b
 80074e8:	0800750b 	.word	0x0800750b
 80074ec:	0800751b 	.word	0x0800751b
 80074f0:	0800751b 	.word	0x0800751b
 80074f4:	0800751b 	.word	0x0800751b
 80074f8:	08007513 	.word	0x08007513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074fc:	f7fe fa5e 	bl	80059bc <HAL_RCC_GetPCLK1Freq>
 8007500:	61f8      	str	r0, [r7, #28]
        break;
 8007502:	e010      	b.n	8007526 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007504:	4b44      	ldr	r3, [pc, #272]	; (8007618 <UART_SetConfig+0x314>)
 8007506:	61fb      	str	r3, [r7, #28]
        break;
 8007508:	e00d      	b.n	8007526 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800750a:	f7fe f9bf 	bl	800588c <HAL_RCC_GetSysClockFreq>
 800750e:	61f8      	str	r0, [r7, #28]
        break;
 8007510:	e009      	b.n	8007526 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007516:	61fb      	str	r3, [r7, #28]
        break;
 8007518:	e005      	b.n	8007526 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800751a:	2300      	movs	r3, #0
 800751c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007524:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 8107 	beq.w	800773c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	4613      	mov	r3, r2
 8007534:	005b      	lsls	r3, r3, #1
 8007536:	4413      	add	r3, r2
 8007538:	69fa      	ldr	r2, [r7, #28]
 800753a:	429a      	cmp	r2, r3
 800753c:	d305      	bcc.n	800754a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	429a      	cmp	r2, r3
 8007548:	d903      	bls.n	8007552 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007550:	e0f4      	b.n	800773c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	2200      	movs	r2, #0
 8007556:	461c      	mov	r4, r3
 8007558:	4615      	mov	r5, r2
 800755a:	f04f 0200 	mov.w	r2, #0
 800755e:	f04f 0300 	mov.w	r3, #0
 8007562:	022b      	lsls	r3, r5, #8
 8007564:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007568:	0222      	lsls	r2, r4, #8
 800756a:	68f9      	ldr	r1, [r7, #12]
 800756c:	6849      	ldr	r1, [r1, #4]
 800756e:	0849      	lsrs	r1, r1, #1
 8007570:	2000      	movs	r0, #0
 8007572:	4688      	mov	r8, r1
 8007574:	4681      	mov	r9, r0
 8007576:	eb12 0a08 	adds.w	sl, r2, r8
 800757a:	eb43 0b09 	adc.w	fp, r3, r9
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	603b      	str	r3, [r7, #0]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800758c:	4650      	mov	r0, sl
 800758e:	4659      	mov	r1, fp
 8007590:	f7f9 fb8a 	bl	8000ca8 <__aeabi_uldivmod>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4613      	mov	r3, r2
 800759a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075a2:	d308      	bcc.n	80075b6 <UART_SetConfig+0x2b2>
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075aa:	d204      	bcs.n	80075b6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	60da      	str	r2, [r3, #12]
 80075b4:	e0c2      	b.n	800773c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80075bc:	e0be      	b.n	800773c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c6:	d16a      	bne.n	800769e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80075c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075cc:	2b08      	cmp	r3, #8
 80075ce:	d834      	bhi.n	800763a <UART_SetConfig+0x336>
 80075d0:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <UART_SetConfig+0x2d4>)
 80075d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d6:	bf00      	nop
 80075d8:	080075fd 	.word	0x080075fd
 80075dc:	0800761d 	.word	0x0800761d
 80075e0:	08007625 	.word	0x08007625
 80075e4:	0800763b 	.word	0x0800763b
 80075e8:	0800762b 	.word	0x0800762b
 80075ec:	0800763b 	.word	0x0800763b
 80075f0:	0800763b 	.word	0x0800763b
 80075f4:	0800763b 	.word	0x0800763b
 80075f8:	08007633 	.word	0x08007633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075fc:	f7fe f9de 	bl	80059bc <HAL_RCC_GetPCLK1Freq>
 8007600:	61f8      	str	r0, [r7, #28]
        break;
 8007602:	e020      	b.n	8007646 <UART_SetConfig+0x342>
 8007604:	efff69f3 	.word	0xefff69f3
 8007608:	40008000 	.word	0x40008000
 800760c:	40013800 	.word	0x40013800
 8007610:	40021000 	.word	0x40021000
 8007614:	40004400 	.word	0x40004400
 8007618:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800761c:	f7fe f9e4 	bl	80059e8 <HAL_RCC_GetPCLK2Freq>
 8007620:	61f8      	str	r0, [r7, #28]
        break;
 8007622:	e010      	b.n	8007646 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007624:	4b4c      	ldr	r3, [pc, #304]	; (8007758 <UART_SetConfig+0x454>)
 8007626:	61fb      	str	r3, [r7, #28]
        break;
 8007628:	e00d      	b.n	8007646 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800762a:	f7fe f92f 	bl	800588c <HAL_RCC_GetSysClockFreq>
 800762e:	61f8      	str	r0, [r7, #28]
        break;
 8007630:	e009      	b.n	8007646 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007636:	61fb      	str	r3, [r7, #28]
        break;
 8007638:	e005      	b.n	8007646 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007644:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d077      	beq.n	800773c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	005a      	lsls	r2, r3, #1
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	085b      	lsrs	r3, r3, #1
 8007656:	441a      	add	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007660:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	2b0f      	cmp	r3, #15
 8007666:	d916      	bls.n	8007696 <UART_SetConfig+0x392>
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800766e:	d212      	bcs.n	8007696 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	b29b      	uxth	r3, r3
 8007674:	f023 030f 	bic.w	r3, r3, #15
 8007678:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	085b      	lsrs	r3, r3, #1
 800767e:	b29b      	uxth	r3, r3
 8007680:	f003 0307 	and.w	r3, r3, #7
 8007684:	b29a      	uxth	r2, r3
 8007686:	8afb      	ldrh	r3, [r7, #22]
 8007688:	4313      	orrs	r3, r2
 800768a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	8afa      	ldrh	r2, [r7, #22]
 8007692:	60da      	str	r2, [r3, #12]
 8007694:	e052      	b.n	800773c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800769c:	e04e      	b.n	800773c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800769e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	d827      	bhi.n	80076f6 <UART_SetConfig+0x3f2>
 80076a6:	a201      	add	r2, pc, #4	; (adr r2, 80076ac <UART_SetConfig+0x3a8>)
 80076a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ac:	080076d1 	.word	0x080076d1
 80076b0:	080076d9 	.word	0x080076d9
 80076b4:	080076e1 	.word	0x080076e1
 80076b8:	080076f7 	.word	0x080076f7
 80076bc:	080076e7 	.word	0x080076e7
 80076c0:	080076f7 	.word	0x080076f7
 80076c4:	080076f7 	.word	0x080076f7
 80076c8:	080076f7 	.word	0x080076f7
 80076cc:	080076ef 	.word	0x080076ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076d0:	f7fe f974 	bl	80059bc <HAL_RCC_GetPCLK1Freq>
 80076d4:	61f8      	str	r0, [r7, #28]
        break;
 80076d6:	e014      	b.n	8007702 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076d8:	f7fe f986 	bl	80059e8 <HAL_RCC_GetPCLK2Freq>
 80076dc:	61f8      	str	r0, [r7, #28]
        break;
 80076de:	e010      	b.n	8007702 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076e0:	4b1d      	ldr	r3, [pc, #116]	; (8007758 <UART_SetConfig+0x454>)
 80076e2:	61fb      	str	r3, [r7, #28]
        break;
 80076e4:	e00d      	b.n	8007702 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076e6:	f7fe f8d1 	bl	800588c <HAL_RCC_GetSysClockFreq>
 80076ea:	61f8      	str	r0, [r7, #28]
        break;
 80076ec:	e009      	b.n	8007702 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076f2:	61fb      	str	r3, [r7, #28]
        break;
 80076f4:	e005      	b.n	8007702 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007700:	bf00      	nop
    }

    if (pclk != 0U)
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d019      	beq.n	800773c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	085a      	lsrs	r2, r3, #1
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	441a      	add	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	fbb2 f3f3 	udiv	r3, r2, r3
 800771a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	2b0f      	cmp	r3, #15
 8007720:	d909      	bls.n	8007736 <UART_SetConfig+0x432>
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007728:	d205      	bcs.n	8007736 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	b29a      	uxth	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60da      	str	r2, [r3, #12]
 8007734:	e002      	b.n	800773c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007748:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800774c:	4618      	mov	r0, r3
 800774e:	3728      	adds	r7, #40	; 0x28
 8007750:	46bd      	mov	sp, r7
 8007752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007756:	bf00      	nop
 8007758:	00f42400 	.word	0x00f42400

0800775c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00a      	beq.n	8007786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	430a      	orrs	r2, r1
 8007784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00a      	beq.n	80077ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	f003 0308 	and.w	r3, r3, #8
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	f003 0310 	and.w	r3, r3, #16
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00a      	beq.n	800780e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	d01a      	beq.n	8007872 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800785a:	d10a      	bne.n	8007872 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	430a      	orrs	r2, r1
 8007870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	605a      	str	r2, [r3, #4]
  }
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af02      	add	r7, sp, #8
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078b0:	f7fb fbea 	bl	8003088 <HAL_GetTick>
 80078b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0308 	and.w	r3, r3, #8
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d10e      	bne.n	80078e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f82d 	bl	8007932 <UART_WaitOnFlagUntilTimeout>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e023      	b.n	800792a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	d10e      	bne.n	800790e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f817 	bl	8007932 <UART_WaitOnFlagUntilTimeout>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e00d      	b.n	800792a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2220      	movs	r2, #32
 8007912:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2220      	movs	r2, #32
 8007918:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b09c      	sub	sp, #112	; 0x70
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	603b      	str	r3, [r7, #0]
 800793e:	4613      	mov	r3, r2
 8007940:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007942:	e0a5      	b.n	8007a90 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794a:	f000 80a1 	beq.w	8007a90 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800794e:	f7fb fb9b 	bl	8003088 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800795a:	429a      	cmp	r2, r3
 800795c:	d302      	bcc.n	8007964 <UART_WaitOnFlagUntilTimeout+0x32>
 800795e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007960:	2b00      	cmp	r3, #0
 8007962:	d13e      	bne.n	80079e2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007974:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007978:	667b      	str	r3, [r7, #100]	; 0x64
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007982:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007984:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007988:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e6      	bne.n	8007964 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3308      	adds	r3, #8
 800799c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	663b      	str	r3, [r7, #96]	; 0x60
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3308      	adds	r3, #8
 80079b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80079b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e5      	bne.n	8007996 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2220      	movs	r2, #32
 80079ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2220      	movs	r2, #32
 80079d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e067      	b.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d04f      	beq.n	8007a90 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079fe:	d147      	bne.n	8007a90 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a08:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	461a      	mov	r2, r3
 8007a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34
 8007a2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e6      	bne.n	8007a0a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3308      	adds	r3, #8
 8007a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f023 0301 	bic.w	r3, r3, #1
 8007a52:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3308      	adds	r3, #8
 8007a5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a5c:	623a      	str	r2, [r7, #32]
 8007a5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	69f9      	ldr	r1, [r7, #28]
 8007a62:	6a3a      	ldr	r2, [r7, #32]
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e5      	bne.n	8007a3c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2220      	movs	r2, #32
 8007a74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e010      	b.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	69da      	ldr	r2, [r3, #28]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	4013      	ands	r3, r2
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	bf0c      	ite	eq
 8007aa0:	2301      	moveq	r3, #1
 8007aa2:	2300      	movne	r3, #0
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	79fb      	ldrb	r3, [r7, #7]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	f43f af4a 	beq.w	8007944 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3770      	adds	r7, #112	; 0x70
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b097      	sub	sp, #92	; 0x5c
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	88fa      	ldrh	r2, [r7, #6]
 8007ad4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	88fa      	ldrh	r2, [r7, #6]
 8007adc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aee:	d10e      	bne.n	8007b0e <UART_Start_Receive_IT+0x52>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d105      	bne.n	8007b04 <UART_Start_Receive_IT+0x48>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007afe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b02:	e02d      	b.n	8007b60 <UART_Start_Receive_IT+0xa4>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	22ff      	movs	r2, #255	; 0xff
 8007b08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b0c:	e028      	b.n	8007b60 <UART_Start_Receive_IT+0xa4>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10d      	bne.n	8007b32 <UART_Start_Receive_IT+0x76>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d104      	bne.n	8007b28 <UART_Start_Receive_IT+0x6c>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	22ff      	movs	r2, #255	; 0xff
 8007b22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b26:	e01b      	b.n	8007b60 <UART_Start_Receive_IT+0xa4>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	227f      	movs	r2, #127	; 0x7f
 8007b2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b30:	e016      	b.n	8007b60 <UART_Start_Receive_IT+0xa4>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b3a:	d10d      	bne.n	8007b58 <UART_Start_Receive_IT+0x9c>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d104      	bne.n	8007b4e <UART_Start_Receive_IT+0x92>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	227f      	movs	r2, #127	; 0x7f
 8007b48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b4c:	e008      	b.n	8007b60 <UART_Start_Receive_IT+0xa4>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	223f      	movs	r2, #63	; 0x3f
 8007b52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b56:	e003      	b.n	8007b60 <UART_Start_Receive_IT+0xa4>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2222      	movs	r2, #34	; 0x22
 8007b6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3308      	adds	r3, #8
 8007b74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b80:	f043 0301 	orr.w	r3, r3, #1
 8007b84:	657b      	str	r3, [r7, #84]	; 0x54
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e5      	bne.n	8007b6e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007baa:	d107      	bne.n	8007bbc <UART_Start_Receive_IT+0x100>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d103      	bne.n	8007bbc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4a24      	ldr	r2, [pc, #144]	; (8007c48 <UART_Start_Receive_IT+0x18c>)
 8007bb8:	665a      	str	r2, [r3, #100]	; 0x64
 8007bba:	e002      	b.n	8007bc2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4a23      	ldr	r2, [pc, #140]	; (8007c4c <UART_Start_Receive_IT+0x190>)
 8007bc0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d019      	beq.n	8007c06 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	e853 3f00 	ldrex	r3, [r3]
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	461a      	mov	r2, r3
 8007bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8007bf2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bf8:	e841 2300 	strex	r3, r2, [r1]
 8007bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1e6      	bne.n	8007bd2 <UART_Start_Receive_IT+0x116>
 8007c04:	e018      	b.n	8007c38 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	e853 3f00 	ldrex	r3, [r3]
 8007c12:	613b      	str	r3, [r7, #16]
   return(result);
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	f043 0320 	orr.w	r3, r3, #32
 8007c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	461a      	mov	r2, r3
 8007c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c24:	623b      	str	r3, [r7, #32]
 8007c26:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	69f9      	ldr	r1, [r7, #28]
 8007c2a:	6a3a      	ldr	r2, [r7, #32]
 8007c2c:	e841 2300 	strex	r3, r2, [r1]
 8007c30:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e6      	bne.n	8007c06 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	375c      	adds	r7, #92	; 0x5c
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	0800806f 	.word	0x0800806f
 8007c4c:	08007f0f 	.word	0x08007f0f

08007c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b095      	sub	sp, #84	; 0x54
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c76:	643b      	str	r3, [r7, #64]	; 0x40
 8007c78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e6      	bne.n	8007c58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	f023 0301 	bic.w	r3, r3, #1
 8007ca0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e5      	bne.n	8007c8a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d118      	bne.n	8007cf8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	e853 3f00 	ldrex	r3, [r3]
 8007cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	f023 0310 	bic.w	r3, r3, #16
 8007cda:	647b      	str	r3, [r7, #68]	; 0x44
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce4:	61bb      	str	r3, [r7, #24]
 8007ce6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce8:	6979      	ldr	r1, [r7, #20]
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	e841 2300 	strex	r3, r2, [r1]
 8007cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e6      	bne.n	8007cc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007d0a:	bf00      	nop
 8007d0c:	3754      	adds	r7, #84	; 0x54
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f7ff facf 	bl	80072d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d3a:	bf00      	nop
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b08f      	sub	sp, #60	; 0x3c
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d4e:	2b21      	cmp	r3, #33	; 0x21
 8007d50:	d14d      	bne.n	8007dee <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d132      	bne.n	8007dc4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d72:	637b      	str	r3, [r7, #52]	; 0x34
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d7e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e6      	bne.n	8007d5e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da4:	633b      	str	r3, [r7, #48]	; 0x30
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	461a      	mov	r2, r3
 8007dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dae:	61bb      	str	r3, [r7, #24]
 8007db0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db2:	6979      	ldr	r1, [r7, #20]
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	e841 2300 	strex	r3, r2, [r1]
 8007dba:	613b      	str	r3, [r7, #16]
   return(result);
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1e6      	bne.n	8007d90 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007dc2:	e014      	b.n	8007dee <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc8:	781a      	ldrb	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	b292      	uxth	r2, r2
 8007dd0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	3b01      	subs	r3, #1
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007dee:	bf00      	nop
 8007df0:	373c      	adds	r7, #60	; 0x3c
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b091      	sub	sp, #68	; 0x44
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e06:	2b21      	cmp	r3, #33	; 0x21
 8007e08:	d151      	bne.n	8007eae <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d132      	bne.n	8007e7c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	623b      	str	r3, [r7, #32]
   return(result);
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	461a      	mov	r2, r3
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	633b      	str	r3, [r7, #48]	; 0x30
 8007e36:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e6      	bne.n	8007e16 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e66:	61fb      	str	r3, [r7, #28]
 8007e68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	69b9      	ldr	r1, [r7, #24]
 8007e6c:	69fa      	ldr	r2, [r7, #28]
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	617b      	str	r3, [r7, #20]
   return(result);
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e6      	bne.n	8007e48 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007e7a:	e018      	b.n	8007eae <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e80:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e84:	881a      	ldrh	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e8e:	b292      	uxth	r2, r2
 8007e90:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e96:	1c9a      	adds	r2, r3, #2
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007eae:	bf00      	nop
 8007eb0:	3744      	adds	r7, #68	; 0x44
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b088      	sub	sp, #32
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	e853 3f00 	ldrex	r3, [r3]
 8007ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ed6:	61fb      	str	r3, [r7, #28]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	461a      	mov	r2, r3
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	61bb      	str	r3, [r7, #24]
 8007ee2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	6979      	ldr	r1, [r7, #20]
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	613b      	str	r3, [r7, #16]
   return(result);
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e6      	bne.n	8007ec2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2220      	movs	r2, #32
 8007ef8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7f9 fad9 	bl	80014b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f06:	bf00      	nop
 8007f08:	3720      	adds	r7, #32
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b096      	sub	sp, #88	; 0x58
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f24:	2b22      	cmp	r3, #34	; 0x22
 8007f26:	f040 8094 	bne.w	8008052 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f30:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f34:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007f38:	b2d9      	uxtb	r1, r3
 8007f3a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f44:	400a      	ands	r2, r1
 8007f46:	b2d2      	uxtb	r2, r2
 8007f48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d179      	bne.n	8008066 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f86:	653b      	str	r3, [r7, #80]	; 0x50
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f90:	647b      	str	r3, [r7, #68]	; 0x44
 8007f92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e6      	bne.n	8007f72 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3308      	adds	r3, #8
 8007faa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	623b      	str	r3, [r7, #32]
   return(result);
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	f023 0301 	bic.w	r3, r3, #1
 8007fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fc4:	633a      	str	r2, [r7, #48]	; 0x30
 8007fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e5      	bne.n	8007fa4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d12e      	bne.n	800804a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	e853 3f00 	ldrex	r3, [r3]
 8007ffe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f023 0310 	bic.w	r3, r3, #16
 8008006:	64bb      	str	r3, [r7, #72]	; 0x48
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	461a      	mov	r2, r3
 800800e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008010:	61fb      	str	r3, [r7, #28]
 8008012:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008014:	69b9      	ldr	r1, [r7, #24]
 8008016:	69fa      	ldr	r2, [r7, #28]
 8008018:	e841 2300 	strex	r3, r2, [r1]
 800801c:	617b      	str	r3, [r7, #20]
   return(result);
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1e6      	bne.n	8007ff2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	f003 0310 	and.w	r3, r3, #16
 800802e:	2b10      	cmp	r3, #16
 8008030:	d103      	bne.n	800803a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2210      	movs	r2, #16
 8008038:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7ff f952 	bl	80072ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008048:	e00d      	b.n	8008066 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7f9 fa48 	bl	80014e0 <HAL_UART_RxCpltCallback>
}
 8008050:	e009      	b.n	8008066 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	8b1b      	ldrh	r3, [r3, #24]
 8008058:	b29a      	uxth	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0208 	orr.w	r2, r2, #8
 8008062:	b292      	uxth	r2, r2
 8008064:	831a      	strh	r2, [r3, #24]
}
 8008066:	bf00      	nop
 8008068:	3758      	adds	r7, #88	; 0x58
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b096      	sub	sp, #88	; 0x58
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800807c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008084:	2b22      	cmp	r3, #34	; 0x22
 8008086:	f040 8094 	bne.w	80081b2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008090:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008098:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800809a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800809e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80080a2:	4013      	ands	r3, r2
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ae:	1c9a      	adds	r2, r3, #2
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	3b01      	subs	r3, #1
 80080be:	b29a      	uxth	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d179      	bne.n	80081c6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080da:	e853 3f00 	ldrex	r3, [r3]
 80080de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	461a      	mov	r2, r3
 80080ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080f0:	643b      	str	r3, [r7, #64]	; 0x40
 80080f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080f8:	e841 2300 	strex	r3, r2, [r1]
 80080fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1e6      	bne.n	80080d2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3308      	adds	r3, #8
 800810a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	61fb      	str	r3, [r7, #28]
   return(result);
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	f023 0301 	bic.w	r3, r3, #1
 800811a:	64bb      	str	r3, [r7, #72]	; 0x48
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3308      	adds	r3, #8
 8008122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008124:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008126:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800812a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e5      	bne.n	8008104 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008148:	2b01      	cmp	r3, #1
 800814a:	d12e      	bne.n	80081aa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f023 0310 	bic.w	r3, r3, #16
 8008166:	647b      	str	r3, [r7, #68]	; 0x44
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	461a      	mov	r2, r3
 800816e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008170:	61bb      	str	r3, [r7, #24]
 8008172:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008174:	6979      	ldr	r1, [r7, #20]
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	e841 2300 	strex	r3, r2, [r1]
 800817c:	613b      	str	r3, [r7, #16]
   return(result);
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e6      	bne.n	8008152 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	f003 0310 	and.w	r3, r3, #16
 800818e:	2b10      	cmp	r3, #16
 8008190:	d103      	bne.n	800819a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2210      	movs	r2, #16
 8008198:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7ff f8a2 	bl	80072ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081a8:	e00d      	b.n	80081c6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7f9 f998 	bl	80014e0 <HAL_UART_RxCpltCallback>
}
 80081b0:	e009      	b.n	80081c6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	8b1b      	ldrh	r3, [r3, #24]
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f042 0208 	orr.w	r2, r2, #8
 80081c2:	b292      	uxth	r2, r2
 80081c4:	831a      	strh	r2, [r3, #24]
}
 80081c6:	bf00      	nop
 80081c8:	3758      	adds	r7, #88	; 0x58
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
	...

080081e4 <__errno>:
 80081e4:	4b01      	ldr	r3, [pc, #4]	; (80081ec <__errno+0x8>)
 80081e6:	6818      	ldr	r0, [r3, #0]
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	20000030 	.word	0x20000030

080081f0 <__libc_init_array>:
 80081f0:	b570      	push	{r4, r5, r6, lr}
 80081f2:	4d0d      	ldr	r5, [pc, #52]	; (8008228 <__libc_init_array+0x38>)
 80081f4:	4c0d      	ldr	r4, [pc, #52]	; (800822c <__libc_init_array+0x3c>)
 80081f6:	1b64      	subs	r4, r4, r5
 80081f8:	10a4      	asrs	r4, r4, #2
 80081fa:	2600      	movs	r6, #0
 80081fc:	42a6      	cmp	r6, r4
 80081fe:	d109      	bne.n	8008214 <__libc_init_array+0x24>
 8008200:	4d0b      	ldr	r5, [pc, #44]	; (8008230 <__libc_init_array+0x40>)
 8008202:	4c0c      	ldr	r4, [pc, #48]	; (8008234 <__libc_init_array+0x44>)
 8008204:	f003 fdd6 	bl	800bdb4 <_init>
 8008208:	1b64      	subs	r4, r4, r5
 800820a:	10a4      	asrs	r4, r4, #2
 800820c:	2600      	movs	r6, #0
 800820e:	42a6      	cmp	r6, r4
 8008210:	d105      	bne.n	800821e <__libc_init_array+0x2e>
 8008212:	bd70      	pop	{r4, r5, r6, pc}
 8008214:	f855 3b04 	ldr.w	r3, [r5], #4
 8008218:	4798      	blx	r3
 800821a:	3601      	adds	r6, #1
 800821c:	e7ee      	b.n	80081fc <__libc_init_array+0xc>
 800821e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008222:	4798      	blx	r3
 8008224:	3601      	adds	r6, #1
 8008226:	e7f2      	b.n	800820e <__libc_init_array+0x1e>
 8008228:	0800c3d8 	.word	0x0800c3d8
 800822c:	0800c3d8 	.word	0x0800c3d8
 8008230:	0800c3d8 	.word	0x0800c3d8
 8008234:	0800c3dc 	.word	0x0800c3dc

08008238 <memset>:
 8008238:	4402      	add	r2, r0
 800823a:	4603      	mov	r3, r0
 800823c:	4293      	cmp	r3, r2
 800823e:	d100      	bne.n	8008242 <memset+0xa>
 8008240:	4770      	bx	lr
 8008242:	f803 1b01 	strb.w	r1, [r3], #1
 8008246:	e7f9      	b.n	800823c <memset+0x4>

08008248 <__cvt>:
 8008248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800824c:	ec55 4b10 	vmov	r4, r5, d0
 8008250:	2d00      	cmp	r5, #0
 8008252:	460e      	mov	r6, r1
 8008254:	4619      	mov	r1, r3
 8008256:	462b      	mov	r3, r5
 8008258:	bfbb      	ittet	lt
 800825a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800825e:	461d      	movlt	r5, r3
 8008260:	2300      	movge	r3, #0
 8008262:	232d      	movlt	r3, #45	; 0x2d
 8008264:	700b      	strb	r3, [r1, #0]
 8008266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008268:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800826c:	4691      	mov	r9, r2
 800826e:	f023 0820 	bic.w	r8, r3, #32
 8008272:	bfbc      	itt	lt
 8008274:	4622      	movlt	r2, r4
 8008276:	4614      	movlt	r4, r2
 8008278:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800827c:	d005      	beq.n	800828a <__cvt+0x42>
 800827e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008282:	d100      	bne.n	8008286 <__cvt+0x3e>
 8008284:	3601      	adds	r6, #1
 8008286:	2102      	movs	r1, #2
 8008288:	e000      	b.n	800828c <__cvt+0x44>
 800828a:	2103      	movs	r1, #3
 800828c:	ab03      	add	r3, sp, #12
 800828e:	9301      	str	r3, [sp, #4]
 8008290:	ab02      	add	r3, sp, #8
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	ec45 4b10 	vmov	d0, r4, r5
 8008298:	4653      	mov	r3, sl
 800829a:	4632      	mov	r2, r6
 800829c:	f000 fccc 	bl	8008c38 <_dtoa_r>
 80082a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80082a4:	4607      	mov	r7, r0
 80082a6:	d102      	bne.n	80082ae <__cvt+0x66>
 80082a8:	f019 0f01 	tst.w	r9, #1
 80082ac:	d022      	beq.n	80082f4 <__cvt+0xac>
 80082ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082b2:	eb07 0906 	add.w	r9, r7, r6
 80082b6:	d110      	bne.n	80082da <__cvt+0x92>
 80082b8:	783b      	ldrb	r3, [r7, #0]
 80082ba:	2b30      	cmp	r3, #48	; 0x30
 80082bc:	d10a      	bne.n	80082d4 <__cvt+0x8c>
 80082be:	2200      	movs	r2, #0
 80082c0:	2300      	movs	r3, #0
 80082c2:	4620      	mov	r0, r4
 80082c4:	4629      	mov	r1, r5
 80082c6:	f7f8 fc0f 	bl	8000ae8 <__aeabi_dcmpeq>
 80082ca:	b918      	cbnz	r0, 80082d4 <__cvt+0x8c>
 80082cc:	f1c6 0601 	rsb	r6, r6, #1
 80082d0:	f8ca 6000 	str.w	r6, [sl]
 80082d4:	f8da 3000 	ldr.w	r3, [sl]
 80082d8:	4499      	add	r9, r3
 80082da:	2200      	movs	r2, #0
 80082dc:	2300      	movs	r3, #0
 80082de:	4620      	mov	r0, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	f7f8 fc01 	bl	8000ae8 <__aeabi_dcmpeq>
 80082e6:	b108      	cbz	r0, 80082ec <__cvt+0xa4>
 80082e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80082ec:	2230      	movs	r2, #48	; 0x30
 80082ee:	9b03      	ldr	r3, [sp, #12]
 80082f0:	454b      	cmp	r3, r9
 80082f2:	d307      	bcc.n	8008304 <__cvt+0xbc>
 80082f4:	9b03      	ldr	r3, [sp, #12]
 80082f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082f8:	1bdb      	subs	r3, r3, r7
 80082fa:	4638      	mov	r0, r7
 80082fc:	6013      	str	r3, [r2, #0]
 80082fe:	b004      	add	sp, #16
 8008300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008304:	1c59      	adds	r1, r3, #1
 8008306:	9103      	str	r1, [sp, #12]
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	e7f0      	b.n	80082ee <__cvt+0xa6>

0800830c <__exponent>:
 800830c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800830e:	4603      	mov	r3, r0
 8008310:	2900      	cmp	r1, #0
 8008312:	bfb8      	it	lt
 8008314:	4249      	neglt	r1, r1
 8008316:	f803 2b02 	strb.w	r2, [r3], #2
 800831a:	bfb4      	ite	lt
 800831c:	222d      	movlt	r2, #45	; 0x2d
 800831e:	222b      	movge	r2, #43	; 0x2b
 8008320:	2909      	cmp	r1, #9
 8008322:	7042      	strb	r2, [r0, #1]
 8008324:	dd2a      	ble.n	800837c <__exponent+0x70>
 8008326:	f10d 0407 	add.w	r4, sp, #7
 800832a:	46a4      	mov	ip, r4
 800832c:	270a      	movs	r7, #10
 800832e:	46a6      	mov	lr, r4
 8008330:	460a      	mov	r2, r1
 8008332:	fb91 f6f7 	sdiv	r6, r1, r7
 8008336:	fb07 1516 	mls	r5, r7, r6, r1
 800833a:	3530      	adds	r5, #48	; 0x30
 800833c:	2a63      	cmp	r2, #99	; 0x63
 800833e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008342:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008346:	4631      	mov	r1, r6
 8008348:	dcf1      	bgt.n	800832e <__exponent+0x22>
 800834a:	3130      	adds	r1, #48	; 0x30
 800834c:	f1ae 0502 	sub.w	r5, lr, #2
 8008350:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008354:	1c44      	adds	r4, r0, #1
 8008356:	4629      	mov	r1, r5
 8008358:	4561      	cmp	r1, ip
 800835a:	d30a      	bcc.n	8008372 <__exponent+0x66>
 800835c:	f10d 0209 	add.w	r2, sp, #9
 8008360:	eba2 020e 	sub.w	r2, r2, lr
 8008364:	4565      	cmp	r5, ip
 8008366:	bf88      	it	hi
 8008368:	2200      	movhi	r2, #0
 800836a:	4413      	add	r3, r2
 800836c:	1a18      	subs	r0, r3, r0
 800836e:	b003      	add	sp, #12
 8008370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008376:	f804 2f01 	strb.w	r2, [r4, #1]!
 800837a:	e7ed      	b.n	8008358 <__exponent+0x4c>
 800837c:	2330      	movs	r3, #48	; 0x30
 800837e:	3130      	adds	r1, #48	; 0x30
 8008380:	7083      	strb	r3, [r0, #2]
 8008382:	70c1      	strb	r1, [r0, #3]
 8008384:	1d03      	adds	r3, r0, #4
 8008386:	e7f1      	b.n	800836c <__exponent+0x60>

08008388 <_printf_float>:
 8008388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	ed2d 8b02 	vpush	{d8}
 8008390:	b08d      	sub	sp, #52	; 0x34
 8008392:	460c      	mov	r4, r1
 8008394:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008398:	4616      	mov	r6, r2
 800839a:	461f      	mov	r7, r3
 800839c:	4605      	mov	r5, r0
 800839e:	f001 fa39 	bl	8009814 <_localeconv_r>
 80083a2:	f8d0 a000 	ldr.w	sl, [r0]
 80083a6:	4650      	mov	r0, sl
 80083a8:	f7f7 ff1c 	bl	80001e4 <strlen>
 80083ac:	2300      	movs	r3, #0
 80083ae:	930a      	str	r3, [sp, #40]	; 0x28
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	9305      	str	r3, [sp, #20]
 80083b4:	f8d8 3000 	ldr.w	r3, [r8]
 80083b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80083bc:	3307      	adds	r3, #7
 80083be:	f023 0307 	bic.w	r3, r3, #7
 80083c2:	f103 0208 	add.w	r2, r3, #8
 80083c6:	f8c8 2000 	str.w	r2, [r8]
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80083d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80083d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083da:	9307      	str	r3, [sp, #28]
 80083dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80083e0:	ee08 0a10 	vmov	s16, r0
 80083e4:	4b9f      	ldr	r3, [pc, #636]	; (8008664 <_printf_float+0x2dc>)
 80083e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083ea:	f04f 32ff 	mov.w	r2, #4294967295
 80083ee:	f7f8 fbad 	bl	8000b4c <__aeabi_dcmpun>
 80083f2:	bb88      	cbnz	r0, 8008458 <_printf_float+0xd0>
 80083f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083f8:	4b9a      	ldr	r3, [pc, #616]	; (8008664 <_printf_float+0x2dc>)
 80083fa:	f04f 32ff 	mov.w	r2, #4294967295
 80083fe:	f7f8 fb87 	bl	8000b10 <__aeabi_dcmple>
 8008402:	bb48      	cbnz	r0, 8008458 <_printf_float+0xd0>
 8008404:	2200      	movs	r2, #0
 8008406:	2300      	movs	r3, #0
 8008408:	4640      	mov	r0, r8
 800840a:	4649      	mov	r1, r9
 800840c:	f7f8 fb76 	bl	8000afc <__aeabi_dcmplt>
 8008410:	b110      	cbz	r0, 8008418 <_printf_float+0x90>
 8008412:	232d      	movs	r3, #45	; 0x2d
 8008414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008418:	4b93      	ldr	r3, [pc, #588]	; (8008668 <_printf_float+0x2e0>)
 800841a:	4894      	ldr	r0, [pc, #592]	; (800866c <_printf_float+0x2e4>)
 800841c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008420:	bf94      	ite	ls
 8008422:	4698      	movls	r8, r3
 8008424:	4680      	movhi	r8, r0
 8008426:	2303      	movs	r3, #3
 8008428:	6123      	str	r3, [r4, #16]
 800842a:	9b05      	ldr	r3, [sp, #20]
 800842c:	f023 0204 	bic.w	r2, r3, #4
 8008430:	6022      	str	r2, [r4, #0]
 8008432:	f04f 0900 	mov.w	r9, #0
 8008436:	9700      	str	r7, [sp, #0]
 8008438:	4633      	mov	r3, r6
 800843a:	aa0b      	add	r2, sp, #44	; 0x2c
 800843c:	4621      	mov	r1, r4
 800843e:	4628      	mov	r0, r5
 8008440:	f000 f9d8 	bl	80087f4 <_printf_common>
 8008444:	3001      	adds	r0, #1
 8008446:	f040 8090 	bne.w	800856a <_printf_float+0x1e2>
 800844a:	f04f 30ff 	mov.w	r0, #4294967295
 800844e:	b00d      	add	sp, #52	; 0x34
 8008450:	ecbd 8b02 	vpop	{d8}
 8008454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008458:	4642      	mov	r2, r8
 800845a:	464b      	mov	r3, r9
 800845c:	4640      	mov	r0, r8
 800845e:	4649      	mov	r1, r9
 8008460:	f7f8 fb74 	bl	8000b4c <__aeabi_dcmpun>
 8008464:	b140      	cbz	r0, 8008478 <_printf_float+0xf0>
 8008466:	464b      	mov	r3, r9
 8008468:	2b00      	cmp	r3, #0
 800846a:	bfbc      	itt	lt
 800846c:	232d      	movlt	r3, #45	; 0x2d
 800846e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008472:	487f      	ldr	r0, [pc, #508]	; (8008670 <_printf_float+0x2e8>)
 8008474:	4b7f      	ldr	r3, [pc, #508]	; (8008674 <_printf_float+0x2ec>)
 8008476:	e7d1      	b.n	800841c <_printf_float+0x94>
 8008478:	6863      	ldr	r3, [r4, #4]
 800847a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800847e:	9206      	str	r2, [sp, #24]
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	d13f      	bne.n	8008504 <_printf_float+0x17c>
 8008484:	2306      	movs	r3, #6
 8008486:	6063      	str	r3, [r4, #4]
 8008488:	9b05      	ldr	r3, [sp, #20]
 800848a:	6861      	ldr	r1, [r4, #4]
 800848c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008490:	2300      	movs	r3, #0
 8008492:	9303      	str	r3, [sp, #12]
 8008494:	ab0a      	add	r3, sp, #40	; 0x28
 8008496:	e9cd b301 	strd	fp, r3, [sp, #4]
 800849a:	ab09      	add	r3, sp, #36	; 0x24
 800849c:	ec49 8b10 	vmov	d0, r8, r9
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	6022      	str	r2, [r4, #0]
 80084a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80084a8:	4628      	mov	r0, r5
 80084aa:	f7ff fecd 	bl	8008248 <__cvt>
 80084ae:	9b06      	ldr	r3, [sp, #24]
 80084b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084b2:	2b47      	cmp	r3, #71	; 0x47
 80084b4:	4680      	mov	r8, r0
 80084b6:	d108      	bne.n	80084ca <_printf_float+0x142>
 80084b8:	1cc8      	adds	r0, r1, #3
 80084ba:	db02      	blt.n	80084c2 <_printf_float+0x13a>
 80084bc:	6863      	ldr	r3, [r4, #4]
 80084be:	4299      	cmp	r1, r3
 80084c0:	dd41      	ble.n	8008546 <_printf_float+0x1be>
 80084c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80084c6:	fa5f fb8b 	uxtb.w	fp, fp
 80084ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084ce:	d820      	bhi.n	8008512 <_printf_float+0x18a>
 80084d0:	3901      	subs	r1, #1
 80084d2:	465a      	mov	r2, fp
 80084d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084d8:	9109      	str	r1, [sp, #36]	; 0x24
 80084da:	f7ff ff17 	bl	800830c <__exponent>
 80084de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084e0:	1813      	adds	r3, r2, r0
 80084e2:	2a01      	cmp	r2, #1
 80084e4:	4681      	mov	r9, r0
 80084e6:	6123      	str	r3, [r4, #16]
 80084e8:	dc02      	bgt.n	80084f0 <_printf_float+0x168>
 80084ea:	6822      	ldr	r2, [r4, #0]
 80084ec:	07d2      	lsls	r2, r2, #31
 80084ee:	d501      	bpl.n	80084f4 <_printf_float+0x16c>
 80084f0:	3301      	adds	r3, #1
 80084f2:	6123      	str	r3, [r4, #16]
 80084f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d09c      	beq.n	8008436 <_printf_float+0xae>
 80084fc:	232d      	movs	r3, #45	; 0x2d
 80084fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008502:	e798      	b.n	8008436 <_printf_float+0xae>
 8008504:	9a06      	ldr	r2, [sp, #24]
 8008506:	2a47      	cmp	r2, #71	; 0x47
 8008508:	d1be      	bne.n	8008488 <_printf_float+0x100>
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1bc      	bne.n	8008488 <_printf_float+0x100>
 800850e:	2301      	movs	r3, #1
 8008510:	e7b9      	b.n	8008486 <_printf_float+0xfe>
 8008512:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008516:	d118      	bne.n	800854a <_printf_float+0x1c2>
 8008518:	2900      	cmp	r1, #0
 800851a:	6863      	ldr	r3, [r4, #4]
 800851c:	dd0b      	ble.n	8008536 <_printf_float+0x1ae>
 800851e:	6121      	str	r1, [r4, #16]
 8008520:	b913      	cbnz	r3, 8008528 <_printf_float+0x1a0>
 8008522:	6822      	ldr	r2, [r4, #0]
 8008524:	07d0      	lsls	r0, r2, #31
 8008526:	d502      	bpl.n	800852e <_printf_float+0x1a6>
 8008528:	3301      	adds	r3, #1
 800852a:	440b      	add	r3, r1
 800852c:	6123      	str	r3, [r4, #16]
 800852e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008530:	f04f 0900 	mov.w	r9, #0
 8008534:	e7de      	b.n	80084f4 <_printf_float+0x16c>
 8008536:	b913      	cbnz	r3, 800853e <_printf_float+0x1b6>
 8008538:	6822      	ldr	r2, [r4, #0]
 800853a:	07d2      	lsls	r2, r2, #31
 800853c:	d501      	bpl.n	8008542 <_printf_float+0x1ba>
 800853e:	3302      	adds	r3, #2
 8008540:	e7f4      	b.n	800852c <_printf_float+0x1a4>
 8008542:	2301      	movs	r3, #1
 8008544:	e7f2      	b.n	800852c <_printf_float+0x1a4>
 8008546:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800854a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800854c:	4299      	cmp	r1, r3
 800854e:	db05      	blt.n	800855c <_printf_float+0x1d4>
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	6121      	str	r1, [r4, #16]
 8008554:	07d8      	lsls	r0, r3, #31
 8008556:	d5ea      	bpl.n	800852e <_printf_float+0x1a6>
 8008558:	1c4b      	adds	r3, r1, #1
 800855a:	e7e7      	b.n	800852c <_printf_float+0x1a4>
 800855c:	2900      	cmp	r1, #0
 800855e:	bfd4      	ite	le
 8008560:	f1c1 0202 	rsble	r2, r1, #2
 8008564:	2201      	movgt	r2, #1
 8008566:	4413      	add	r3, r2
 8008568:	e7e0      	b.n	800852c <_printf_float+0x1a4>
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	055a      	lsls	r2, r3, #21
 800856e:	d407      	bmi.n	8008580 <_printf_float+0x1f8>
 8008570:	6923      	ldr	r3, [r4, #16]
 8008572:	4642      	mov	r2, r8
 8008574:	4631      	mov	r1, r6
 8008576:	4628      	mov	r0, r5
 8008578:	47b8      	blx	r7
 800857a:	3001      	adds	r0, #1
 800857c:	d12c      	bne.n	80085d8 <_printf_float+0x250>
 800857e:	e764      	b.n	800844a <_printf_float+0xc2>
 8008580:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008584:	f240 80e0 	bls.w	8008748 <_printf_float+0x3c0>
 8008588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800858c:	2200      	movs	r2, #0
 800858e:	2300      	movs	r3, #0
 8008590:	f7f8 faaa 	bl	8000ae8 <__aeabi_dcmpeq>
 8008594:	2800      	cmp	r0, #0
 8008596:	d034      	beq.n	8008602 <_printf_float+0x27a>
 8008598:	4a37      	ldr	r2, [pc, #220]	; (8008678 <_printf_float+0x2f0>)
 800859a:	2301      	movs	r3, #1
 800859c:	4631      	mov	r1, r6
 800859e:	4628      	mov	r0, r5
 80085a0:	47b8      	blx	r7
 80085a2:	3001      	adds	r0, #1
 80085a4:	f43f af51 	beq.w	800844a <_printf_float+0xc2>
 80085a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085ac:	429a      	cmp	r2, r3
 80085ae:	db02      	blt.n	80085b6 <_printf_float+0x22e>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	07d8      	lsls	r0, r3, #31
 80085b4:	d510      	bpl.n	80085d8 <_printf_float+0x250>
 80085b6:	ee18 3a10 	vmov	r3, s16
 80085ba:	4652      	mov	r2, sl
 80085bc:	4631      	mov	r1, r6
 80085be:	4628      	mov	r0, r5
 80085c0:	47b8      	blx	r7
 80085c2:	3001      	adds	r0, #1
 80085c4:	f43f af41 	beq.w	800844a <_printf_float+0xc2>
 80085c8:	f04f 0800 	mov.w	r8, #0
 80085cc:	f104 091a 	add.w	r9, r4, #26
 80085d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d2:	3b01      	subs	r3, #1
 80085d4:	4543      	cmp	r3, r8
 80085d6:	dc09      	bgt.n	80085ec <_printf_float+0x264>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	079b      	lsls	r3, r3, #30
 80085dc:	f100 8105 	bmi.w	80087ea <_printf_float+0x462>
 80085e0:	68e0      	ldr	r0, [r4, #12]
 80085e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e4:	4298      	cmp	r0, r3
 80085e6:	bfb8      	it	lt
 80085e8:	4618      	movlt	r0, r3
 80085ea:	e730      	b.n	800844e <_printf_float+0xc6>
 80085ec:	2301      	movs	r3, #1
 80085ee:	464a      	mov	r2, r9
 80085f0:	4631      	mov	r1, r6
 80085f2:	4628      	mov	r0, r5
 80085f4:	47b8      	blx	r7
 80085f6:	3001      	adds	r0, #1
 80085f8:	f43f af27 	beq.w	800844a <_printf_float+0xc2>
 80085fc:	f108 0801 	add.w	r8, r8, #1
 8008600:	e7e6      	b.n	80085d0 <_printf_float+0x248>
 8008602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008604:	2b00      	cmp	r3, #0
 8008606:	dc39      	bgt.n	800867c <_printf_float+0x2f4>
 8008608:	4a1b      	ldr	r2, [pc, #108]	; (8008678 <_printf_float+0x2f0>)
 800860a:	2301      	movs	r3, #1
 800860c:	4631      	mov	r1, r6
 800860e:	4628      	mov	r0, r5
 8008610:	47b8      	blx	r7
 8008612:	3001      	adds	r0, #1
 8008614:	f43f af19 	beq.w	800844a <_printf_float+0xc2>
 8008618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800861c:	4313      	orrs	r3, r2
 800861e:	d102      	bne.n	8008626 <_printf_float+0x29e>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	07d9      	lsls	r1, r3, #31
 8008624:	d5d8      	bpl.n	80085d8 <_printf_float+0x250>
 8008626:	ee18 3a10 	vmov	r3, s16
 800862a:	4652      	mov	r2, sl
 800862c:	4631      	mov	r1, r6
 800862e:	4628      	mov	r0, r5
 8008630:	47b8      	blx	r7
 8008632:	3001      	adds	r0, #1
 8008634:	f43f af09 	beq.w	800844a <_printf_float+0xc2>
 8008638:	f04f 0900 	mov.w	r9, #0
 800863c:	f104 0a1a 	add.w	sl, r4, #26
 8008640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008642:	425b      	negs	r3, r3
 8008644:	454b      	cmp	r3, r9
 8008646:	dc01      	bgt.n	800864c <_printf_float+0x2c4>
 8008648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800864a:	e792      	b.n	8008572 <_printf_float+0x1ea>
 800864c:	2301      	movs	r3, #1
 800864e:	4652      	mov	r2, sl
 8008650:	4631      	mov	r1, r6
 8008652:	4628      	mov	r0, r5
 8008654:	47b8      	blx	r7
 8008656:	3001      	adds	r0, #1
 8008658:	f43f aef7 	beq.w	800844a <_printf_float+0xc2>
 800865c:	f109 0901 	add.w	r9, r9, #1
 8008660:	e7ee      	b.n	8008640 <_printf_float+0x2b8>
 8008662:	bf00      	nop
 8008664:	7fefffff 	.word	0x7fefffff
 8008668:	0800be20 	.word	0x0800be20
 800866c:	0800be24 	.word	0x0800be24
 8008670:	0800be2c 	.word	0x0800be2c
 8008674:	0800be28 	.word	0x0800be28
 8008678:	0800be30 	.word	0x0800be30
 800867c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800867e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008680:	429a      	cmp	r2, r3
 8008682:	bfa8      	it	ge
 8008684:	461a      	movge	r2, r3
 8008686:	2a00      	cmp	r2, #0
 8008688:	4691      	mov	r9, r2
 800868a:	dc37      	bgt.n	80086fc <_printf_float+0x374>
 800868c:	f04f 0b00 	mov.w	fp, #0
 8008690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008694:	f104 021a 	add.w	r2, r4, #26
 8008698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800869a:	9305      	str	r3, [sp, #20]
 800869c:	eba3 0309 	sub.w	r3, r3, r9
 80086a0:	455b      	cmp	r3, fp
 80086a2:	dc33      	bgt.n	800870c <_printf_float+0x384>
 80086a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086a8:	429a      	cmp	r2, r3
 80086aa:	db3b      	blt.n	8008724 <_printf_float+0x39c>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	07da      	lsls	r2, r3, #31
 80086b0:	d438      	bmi.n	8008724 <_printf_float+0x39c>
 80086b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b4:	9a05      	ldr	r2, [sp, #20]
 80086b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086b8:	1a9a      	subs	r2, r3, r2
 80086ba:	eba3 0901 	sub.w	r9, r3, r1
 80086be:	4591      	cmp	r9, r2
 80086c0:	bfa8      	it	ge
 80086c2:	4691      	movge	r9, r2
 80086c4:	f1b9 0f00 	cmp.w	r9, #0
 80086c8:	dc35      	bgt.n	8008736 <_printf_float+0x3ae>
 80086ca:	f04f 0800 	mov.w	r8, #0
 80086ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086d2:	f104 0a1a 	add.w	sl, r4, #26
 80086d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	eba3 0309 	sub.w	r3, r3, r9
 80086e0:	4543      	cmp	r3, r8
 80086e2:	f77f af79 	ble.w	80085d8 <_printf_float+0x250>
 80086e6:	2301      	movs	r3, #1
 80086e8:	4652      	mov	r2, sl
 80086ea:	4631      	mov	r1, r6
 80086ec:	4628      	mov	r0, r5
 80086ee:	47b8      	blx	r7
 80086f0:	3001      	adds	r0, #1
 80086f2:	f43f aeaa 	beq.w	800844a <_printf_float+0xc2>
 80086f6:	f108 0801 	add.w	r8, r8, #1
 80086fa:	e7ec      	b.n	80086d6 <_printf_float+0x34e>
 80086fc:	4613      	mov	r3, r2
 80086fe:	4631      	mov	r1, r6
 8008700:	4642      	mov	r2, r8
 8008702:	4628      	mov	r0, r5
 8008704:	47b8      	blx	r7
 8008706:	3001      	adds	r0, #1
 8008708:	d1c0      	bne.n	800868c <_printf_float+0x304>
 800870a:	e69e      	b.n	800844a <_printf_float+0xc2>
 800870c:	2301      	movs	r3, #1
 800870e:	4631      	mov	r1, r6
 8008710:	4628      	mov	r0, r5
 8008712:	9205      	str	r2, [sp, #20]
 8008714:	47b8      	blx	r7
 8008716:	3001      	adds	r0, #1
 8008718:	f43f ae97 	beq.w	800844a <_printf_float+0xc2>
 800871c:	9a05      	ldr	r2, [sp, #20]
 800871e:	f10b 0b01 	add.w	fp, fp, #1
 8008722:	e7b9      	b.n	8008698 <_printf_float+0x310>
 8008724:	ee18 3a10 	vmov	r3, s16
 8008728:	4652      	mov	r2, sl
 800872a:	4631      	mov	r1, r6
 800872c:	4628      	mov	r0, r5
 800872e:	47b8      	blx	r7
 8008730:	3001      	adds	r0, #1
 8008732:	d1be      	bne.n	80086b2 <_printf_float+0x32a>
 8008734:	e689      	b.n	800844a <_printf_float+0xc2>
 8008736:	9a05      	ldr	r2, [sp, #20]
 8008738:	464b      	mov	r3, r9
 800873a:	4442      	add	r2, r8
 800873c:	4631      	mov	r1, r6
 800873e:	4628      	mov	r0, r5
 8008740:	47b8      	blx	r7
 8008742:	3001      	adds	r0, #1
 8008744:	d1c1      	bne.n	80086ca <_printf_float+0x342>
 8008746:	e680      	b.n	800844a <_printf_float+0xc2>
 8008748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800874a:	2a01      	cmp	r2, #1
 800874c:	dc01      	bgt.n	8008752 <_printf_float+0x3ca>
 800874e:	07db      	lsls	r3, r3, #31
 8008750:	d538      	bpl.n	80087c4 <_printf_float+0x43c>
 8008752:	2301      	movs	r3, #1
 8008754:	4642      	mov	r2, r8
 8008756:	4631      	mov	r1, r6
 8008758:	4628      	mov	r0, r5
 800875a:	47b8      	blx	r7
 800875c:	3001      	adds	r0, #1
 800875e:	f43f ae74 	beq.w	800844a <_printf_float+0xc2>
 8008762:	ee18 3a10 	vmov	r3, s16
 8008766:	4652      	mov	r2, sl
 8008768:	4631      	mov	r1, r6
 800876a:	4628      	mov	r0, r5
 800876c:	47b8      	blx	r7
 800876e:	3001      	adds	r0, #1
 8008770:	f43f ae6b 	beq.w	800844a <_printf_float+0xc2>
 8008774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008778:	2200      	movs	r2, #0
 800877a:	2300      	movs	r3, #0
 800877c:	f7f8 f9b4 	bl	8000ae8 <__aeabi_dcmpeq>
 8008780:	b9d8      	cbnz	r0, 80087ba <_printf_float+0x432>
 8008782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008784:	f108 0201 	add.w	r2, r8, #1
 8008788:	3b01      	subs	r3, #1
 800878a:	4631      	mov	r1, r6
 800878c:	4628      	mov	r0, r5
 800878e:	47b8      	blx	r7
 8008790:	3001      	adds	r0, #1
 8008792:	d10e      	bne.n	80087b2 <_printf_float+0x42a>
 8008794:	e659      	b.n	800844a <_printf_float+0xc2>
 8008796:	2301      	movs	r3, #1
 8008798:	4652      	mov	r2, sl
 800879a:	4631      	mov	r1, r6
 800879c:	4628      	mov	r0, r5
 800879e:	47b8      	blx	r7
 80087a0:	3001      	adds	r0, #1
 80087a2:	f43f ae52 	beq.w	800844a <_printf_float+0xc2>
 80087a6:	f108 0801 	add.w	r8, r8, #1
 80087aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ac:	3b01      	subs	r3, #1
 80087ae:	4543      	cmp	r3, r8
 80087b0:	dcf1      	bgt.n	8008796 <_printf_float+0x40e>
 80087b2:	464b      	mov	r3, r9
 80087b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087b8:	e6dc      	b.n	8008574 <_printf_float+0x1ec>
 80087ba:	f04f 0800 	mov.w	r8, #0
 80087be:	f104 0a1a 	add.w	sl, r4, #26
 80087c2:	e7f2      	b.n	80087aa <_printf_float+0x422>
 80087c4:	2301      	movs	r3, #1
 80087c6:	4642      	mov	r2, r8
 80087c8:	e7df      	b.n	800878a <_printf_float+0x402>
 80087ca:	2301      	movs	r3, #1
 80087cc:	464a      	mov	r2, r9
 80087ce:	4631      	mov	r1, r6
 80087d0:	4628      	mov	r0, r5
 80087d2:	47b8      	blx	r7
 80087d4:	3001      	adds	r0, #1
 80087d6:	f43f ae38 	beq.w	800844a <_printf_float+0xc2>
 80087da:	f108 0801 	add.w	r8, r8, #1
 80087de:	68e3      	ldr	r3, [r4, #12]
 80087e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087e2:	1a5b      	subs	r3, r3, r1
 80087e4:	4543      	cmp	r3, r8
 80087e6:	dcf0      	bgt.n	80087ca <_printf_float+0x442>
 80087e8:	e6fa      	b.n	80085e0 <_printf_float+0x258>
 80087ea:	f04f 0800 	mov.w	r8, #0
 80087ee:	f104 0919 	add.w	r9, r4, #25
 80087f2:	e7f4      	b.n	80087de <_printf_float+0x456>

080087f4 <_printf_common>:
 80087f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f8:	4616      	mov	r6, r2
 80087fa:	4699      	mov	r9, r3
 80087fc:	688a      	ldr	r2, [r1, #8]
 80087fe:	690b      	ldr	r3, [r1, #16]
 8008800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008804:	4293      	cmp	r3, r2
 8008806:	bfb8      	it	lt
 8008808:	4613      	movlt	r3, r2
 800880a:	6033      	str	r3, [r6, #0]
 800880c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008810:	4607      	mov	r7, r0
 8008812:	460c      	mov	r4, r1
 8008814:	b10a      	cbz	r2, 800881a <_printf_common+0x26>
 8008816:	3301      	adds	r3, #1
 8008818:	6033      	str	r3, [r6, #0]
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	0699      	lsls	r1, r3, #26
 800881e:	bf42      	ittt	mi
 8008820:	6833      	ldrmi	r3, [r6, #0]
 8008822:	3302      	addmi	r3, #2
 8008824:	6033      	strmi	r3, [r6, #0]
 8008826:	6825      	ldr	r5, [r4, #0]
 8008828:	f015 0506 	ands.w	r5, r5, #6
 800882c:	d106      	bne.n	800883c <_printf_common+0x48>
 800882e:	f104 0a19 	add.w	sl, r4, #25
 8008832:	68e3      	ldr	r3, [r4, #12]
 8008834:	6832      	ldr	r2, [r6, #0]
 8008836:	1a9b      	subs	r3, r3, r2
 8008838:	42ab      	cmp	r3, r5
 800883a:	dc26      	bgt.n	800888a <_printf_common+0x96>
 800883c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008840:	1e13      	subs	r3, r2, #0
 8008842:	6822      	ldr	r2, [r4, #0]
 8008844:	bf18      	it	ne
 8008846:	2301      	movne	r3, #1
 8008848:	0692      	lsls	r2, r2, #26
 800884a:	d42b      	bmi.n	80088a4 <_printf_common+0xb0>
 800884c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008850:	4649      	mov	r1, r9
 8008852:	4638      	mov	r0, r7
 8008854:	47c0      	blx	r8
 8008856:	3001      	adds	r0, #1
 8008858:	d01e      	beq.n	8008898 <_printf_common+0xa4>
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	68e5      	ldr	r5, [r4, #12]
 800885e:	6832      	ldr	r2, [r6, #0]
 8008860:	f003 0306 	and.w	r3, r3, #6
 8008864:	2b04      	cmp	r3, #4
 8008866:	bf08      	it	eq
 8008868:	1aad      	subeq	r5, r5, r2
 800886a:	68a3      	ldr	r3, [r4, #8]
 800886c:	6922      	ldr	r2, [r4, #16]
 800886e:	bf0c      	ite	eq
 8008870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008874:	2500      	movne	r5, #0
 8008876:	4293      	cmp	r3, r2
 8008878:	bfc4      	itt	gt
 800887a:	1a9b      	subgt	r3, r3, r2
 800887c:	18ed      	addgt	r5, r5, r3
 800887e:	2600      	movs	r6, #0
 8008880:	341a      	adds	r4, #26
 8008882:	42b5      	cmp	r5, r6
 8008884:	d11a      	bne.n	80088bc <_printf_common+0xc8>
 8008886:	2000      	movs	r0, #0
 8008888:	e008      	b.n	800889c <_printf_common+0xa8>
 800888a:	2301      	movs	r3, #1
 800888c:	4652      	mov	r2, sl
 800888e:	4649      	mov	r1, r9
 8008890:	4638      	mov	r0, r7
 8008892:	47c0      	blx	r8
 8008894:	3001      	adds	r0, #1
 8008896:	d103      	bne.n	80088a0 <_printf_common+0xac>
 8008898:	f04f 30ff 	mov.w	r0, #4294967295
 800889c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a0:	3501      	adds	r5, #1
 80088a2:	e7c6      	b.n	8008832 <_printf_common+0x3e>
 80088a4:	18e1      	adds	r1, r4, r3
 80088a6:	1c5a      	adds	r2, r3, #1
 80088a8:	2030      	movs	r0, #48	; 0x30
 80088aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088ae:	4422      	add	r2, r4
 80088b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088b8:	3302      	adds	r3, #2
 80088ba:	e7c7      	b.n	800884c <_printf_common+0x58>
 80088bc:	2301      	movs	r3, #1
 80088be:	4622      	mov	r2, r4
 80088c0:	4649      	mov	r1, r9
 80088c2:	4638      	mov	r0, r7
 80088c4:	47c0      	blx	r8
 80088c6:	3001      	adds	r0, #1
 80088c8:	d0e6      	beq.n	8008898 <_printf_common+0xa4>
 80088ca:	3601      	adds	r6, #1
 80088cc:	e7d9      	b.n	8008882 <_printf_common+0x8e>
	...

080088d0 <_printf_i>:
 80088d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088d4:	7e0f      	ldrb	r7, [r1, #24]
 80088d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088d8:	2f78      	cmp	r7, #120	; 0x78
 80088da:	4691      	mov	r9, r2
 80088dc:	4680      	mov	r8, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	469a      	mov	sl, r3
 80088e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088e6:	d807      	bhi.n	80088f8 <_printf_i+0x28>
 80088e8:	2f62      	cmp	r7, #98	; 0x62
 80088ea:	d80a      	bhi.n	8008902 <_printf_i+0x32>
 80088ec:	2f00      	cmp	r7, #0
 80088ee:	f000 80d8 	beq.w	8008aa2 <_printf_i+0x1d2>
 80088f2:	2f58      	cmp	r7, #88	; 0x58
 80088f4:	f000 80a3 	beq.w	8008a3e <_printf_i+0x16e>
 80088f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008900:	e03a      	b.n	8008978 <_printf_i+0xa8>
 8008902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008906:	2b15      	cmp	r3, #21
 8008908:	d8f6      	bhi.n	80088f8 <_printf_i+0x28>
 800890a:	a101      	add	r1, pc, #4	; (adr r1, 8008910 <_printf_i+0x40>)
 800890c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008910:	08008969 	.word	0x08008969
 8008914:	0800897d 	.word	0x0800897d
 8008918:	080088f9 	.word	0x080088f9
 800891c:	080088f9 	.word	0x080088f9
 8008920:	080088f9 	.word	0x080088f9
 8008924:	080088f9 	.word	0x080088f9
 8008928:	0800897d 	.word	0x0800897d
 800892c:	080088f9 	.word	0x080088f9
 8008930:	080088f9 	.word	0x080088f9
 8008934:	080088f9 	.word	0x080088f9
 8008938:	080088f9 	.word	0x080088f9
 800893c:	08008a89 	.word	0x08008a89
 8008940:	080089ad 	.word	0x080089ad
 8008944:	08008a6b 	.word	0x08008a6b
 8008948:	080088f9 	.word	0x080088f9
 800894c:	080088f9 	.word	0x080088f9
 8008950:	08008aab 	.word	0x08008aab
 8008954:	080088f9 	.word	0x080088f9
 8008958:	080089ad 	.word	0x080089ad
 800895c:	080088f9 	.word	0x080088f9
 8008960:	080088f9 	.word	0x080088f9
 8008964:	08008a73 	.word	0x08008a73
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	1d1a      	adds	r2, r3, #4
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	602a      	str	r2, [r5, #0]
 8008970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008978:	2301      	movs	r3, #1
 800897a:	e0a3      	b.n	8008ac4 <_printf_i+0x1f4>
 800897c:	6820      	ldr	r0, [r4, #0]
 800897e:	6829      	ldr	r1, [r5, #0]
 8008980:	0606      	lsls	r6, r0, #24
 8008982:	f101 0304 	add.w	r3, r1, #4
 8008986:	d50a      	bpl.n	800899e <_printf_i+0xce>
 8008988:	680e      	ldr	r6, [r1, #0]
 800898a:	602b      	str	r3, [r5, #0]
 800898c:	2e00      	cmp	r6, #0
 800898e:	da03      	bge.n	8008998 <_printf_i+0xc8>
 8008990:	232d      	movs	r3, #45	; 0x2d
 8008992:	4276      	negs	r6, r6
 8008994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008998:	485e      	ldr	r0, [pc, #376]	; (8008b14 <_printf_i+0x244>)
 800899a:	230a      	movs	r3, #10
 800899c:	e019      	b.n	80089d2 <_printf_i+0x102>
 800899e:	680e      	ldr	r6, [r1, #0]
 80089a0:	602b      	str	r3, [r5, #0]
 80089a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089a6:	bf18      	it	ne
 80089a8:	b236      	sxthne	r6, r6
 80089aa:	e7ef      	b.n	800898c <_printf_i+0xbc>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	6820      	ldr	r0, [r4, #0]
 80089b0:	1d19      	adds	r1, r3, #4
 80089b2:	6029      	str	r1, [r5, #0]
 80089b4:	0601      	lsls	r1, r0, #24
 80089b6:	d501      	bpl.n	80089bc <_printf_i+0xec>
 80089b8:	681e      	ldr	r6, [r3, #0]
 80089ba:	e002      	b.n	80089c2 <_printf_i+0xf2>
 80089bc:	0646      	lsls	r6, r0, #25
 80089be:	d5fb      	bpl.n	80089b8 <_printf_i+0xe8>
 80089c0:	881e      	ldrh	r6, [r3, #0]
 80089c2:	4854      	ldr	r0, [pc, #336]	; (8008b14 <_printf_i+0x244>)
 80089c4:	2f6f      	cmp	r7, #111	; 0x6f
 80089c6:	bf0c      	ite	eq
 80089c8:	2308      	moveq	r3, #8
 80089ca:	230a      	movne	r3, #10
 80089cc:	2100      	movs	r1, #0
 80089ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089d2:	6865      	ldr	r5, [r4, #4]
 80089d4:	60a5      	str	r5, [r4, #8]
 80089d6:	2d00      	cmp	r5, #0
 80089d8:	bfa2      	ittt	ge
 80089da:	6821      	ldrge	r1, [r4, #0]
 80089dc:	f021 0104 	bicge.w	r1, r1, #4
 80089e0:	6021      	strge	r1, [r4, #0]
 80089e2:	b90e      	cbnz	r6, 80089e8 <_printf_i+0x118>
 80089e4:	2d00      	cmp	r5, #0
 80089e6:	d04d      	beq.n	8008a84 <_printf_i+0x1b4>
 80089e8:	4615      	mov	r5, r2
 80089ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80089ee:	fb03 6711 	mls	r7, r3, r1, r6
 80089f2:	5dc7      	ldrb	r7, [r0, r7]
 80089f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089f8:	4637      	mov	r7, r6
 80089fa:	42bb      	cmp	r3, r7
 80089fc:	460e      	mov	r6, r1
 80089fe:	d9f4      	bls.n	80089ea <_printf_i+0x11a>
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d10b      	bne.n	8008a1c <_printf_i+0x14c>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	07de      	lsls	r6, r3, #31
 8008a08:	d508      	bpl.n	8008a1c <_printf_i+0x14c>
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	6861      	ldr	r1, [r4, #4]
 8008a0e:	4299      	cmp	r1, r3
 8008a10:	bfde      	ittt	le
 8008a12:	2330      	movle	r3, #48	; 0x30
 8008a14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a1c:	1b52      	subs	r2, r2, r5
 8008a1e:	6122      	str	r2, [r4, #16]
 8008a20:	f8cd a000 	str.w	sl, [sp]
 8008a24:	464b      	mov	r3, r9
 8008a26:	aa03      	add	r2, sp, #12
 8008a28:	4621      	mov	r1, r4
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	f7ff fee2 	bl	80087f4 <_printf_common>
 8008a30:	3001      	adds	r0, #1
 8008a32:	d14c      	bne.n	8008ace <_printf_i+0x1fe>
 8008a34:	f04f 30ff 	mov.w	r0, #4294967295
 8008a38:	b004      	add	sp, #16
 8008a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a3e:	4835      	ldr	r0, [pc, #212]	; (8008b14 <_printf_i+0x244>)
 8008a40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a44:	6829      	ldr	r1, [r5, #0]
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a4c:	6029      	str	r1, [r5, #0]
 8008a4e:	061d      	lsls	r5, r3, #24
 8008a50:	d514      	bpl.n	8008a7c <_printf_i+0x1ac>
 8008a52:	07df      	lsls	r7, r3, #31
 8008a54:	bf44      	itt	mi
 8008a56:	f043 0320 	orrmi.w	r3, r3, #32
 8008a5a:	6023      	strmi	r3, [r4, #0]
 8008a5c:	b91e      	cbnz	r6, 8008a66 <_printf_i+0x196>
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	f023 0320 	bic.w	r3, r3, #32
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	2310      	movs	r3, #16
 8008a68:	e7b0      	b.n	80089cc <_printf_i+0xfc>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	f043 0320 	orr.w	r3, r3, #32
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	2378      	movs	r3, #120	; 0x78
 8008a74:	4828      	ldr	r0, [pc, #160]	; (8008b18 <_printf_i+0x248>)
 8008a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a7a:	e7e3      	b.n	8008a44 <_printf_i+0x174>
 8008a7c:	0659      	lsls	r1, r3, #25
 8008a7e:	bf48      	it	mi
 8008a80:	b2b6      	uxthmi	r6, r6
 8008a82:	e7e6      	b.n	8008a52 <_printf_i+0x182>
 8008a84:	4615      	mov	r5, r2
 8008a86:	e7bb      	b.n	8008a00 <_printf_i+0x130>
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	6826      	ldr	r6, [r4, #0]
 8008a8c:	6961      	ldr	r1, [r4, #20]
 8008a8e:	1d18      	adds	r0, r3, #4
 8008a90:	6028      	str	r0, [r5, #0]
 8008a92:	0635      	lsls	r5, r6, #24
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	d501      	bpl.n	8008a9c <_printf_i+0x1cc>
 8008a98:	6019      	str	r1, [r3, #0]
 8008a9a:	e002      	b.n	8008aa2 <_printf_i+0x1d2>
 8008a9c:	0670      	lsls	r0, r6, #25
 8008a9e:	d5fb      	bpl.n	8008a98 <_printf_i+0x1c8>
 8008aa0:	8019      	strh	r1, [r3, #0]
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	6123      	str	r3, [r4, #16]
 8008aa6:	4615      	mov	r5, r2
 8008aa8:	e7ba      	b.n	8008a20 <_printf_i+0x150>
 8008aaa:	682b      	ldr	r3, [r5, #0]
 8008aac:	1d1a      	adds	r2, r3, #4
 8008aae:	602a      	str	r2, [r5, #0]
 8008ab0:	681d      	ldr	r5, [r3, #0]
 8008ab2:	6862      	ldr	r2, [r4, #4]
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f7f7 fba2 	bl	8000200 <memchr>
 8008abc:	b108      	cbz	r0, 8008ac2 <_printf_i+0x1f2>
 8008abe:	1b40      	subs	r0, r0, r5
 8008ac0:	6060      	str	r0, [r4, #4]
 8008ac2:	6863      	ldr	r3, [r4, #4]
 8008ac4:	6123      	str	r3, [r4, #16]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008acc:	e7a8      	b.n	8008a20 <_printf_i+0x150>
 8008ace:	6923      	ldr	r3, [r4, #16]
 8008ad0:	462a      	mov	r2, r5
 8008ad2:	4649      	mov	r1, r9
 8008ad4:	4640      	mov	r0, r8
 8008ad6:	47d0      	blx	sl
 8008ad8:	3001      	adds	r0, #1
 8008ada:	d0ab      	beq.n	8008a34 <_printf_i+0x164>
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	079b      	lsls	r3, r3, #30
 8008ae0:	d413      	bmi.n	8008b0a <_printf_i+0x23a>
 8008ae2:	68e0      	ldr	r0, [r4, #12]
 8008ae4:	9b03      	ldr	r3, [sp, #12]
 8008ae6:	4298      	cmp	r0, r3
 8008ae8:	bfb8      	it	lt
 8008aea:	4618      	movlt	r0, r3
 8008aec:	e7a4      	b.n	8008a38 <_printf_i+0x168>
 8008aee:	2301      	movs	r3, #1
 8008af0:	4632      	mov	r2, r6
 8008af2:	4649      	mov	r1, r9
 8008af4:	4640      	mov	r0, r8
 8008af6:	47d0      	blx	sl
 8008af8:	3001      	adds	r0, #1
 8008afa:	d09b      	beq.n	8008a34 <_printf_i+0x164>
 8008afc:	3501      	adds	r5, #1
 8008afe:	68e3      	ldr	r3, [r4, #12]
 8008b00:	9903      	ldr	r1, [sp, #12]
 8008b02:	1a5b      	subs	r3, r3, r1
 8008b04:	42ab      	cmp	r3, r5
 8008b06:	dcf2      	bgt.n	8008aee <_printf_i+0x21e>
 8008b08:	e7eb      	b.n	8008ae2 <_printf_i+0x212>
 8008b0a:	2500      	movs	r5, #0
 8008b0c:	f104 0619 	add.w	r6, r4, #25
 8008b10:	e7f5      	b.n	8008afe <_printf_i+0x22e>
 8008b12:	bf00      	nop
 8008b14:	0800be32 	.word	0x0800be32
 8008b18:	0800be43 	.word	0x0800be43

08008b1c <quorem>:
 8008b1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b20:	6903      	ldr	r3, [r0, #16]
 8008b22:	690c      	ldr	r4, [r1, #16]
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	4607      	mov	r7, r0
 8008b28:	f2c0 8081 	blt.w	8008c2e <quorem+0x112>
 8008b2c:	3c01      	subs	r4, #1
 8008b2e:	f101 0814 	add.w	r8, r1, #20
 8008b32:	f100 0514 	add.w	r5, r0, #20
 8008b36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b3a:	9301      	str	r3, [sp, #4]
 8008b3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b44:	3301      	adds	r3, #1
 8008b46:	429a      	cmp	r2, r3
 8008b48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b50:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b54:	d331      	bcc.n	8008bba <quorem+0x9e>
 8008b56:	f04f 0e00 	mov.w	lr, #0
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	46ac      	mov	ip, r5
 8008b5e:	46f2      	mov	sl, lr
 8008b60:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b64:	b293      	uxth	r3, r2
 8008b66:	fb06 e303 	mla	r3, r6, r3, lr
 8008b6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	ebaa 0303 	sub.w	r3, sl, r3
 8008b74:	f8dc a000 	ldr.w	sl, [ip]
 8008b78:	0c12      	lsrs	r2, r2, #16
 8008b7a:	fa13 f38a 	uxtah	r3, r3, sl
 8008b7e:	fb06 e202 	mla	r2, r6, r2, lr
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	9b00      	ldr	r3, [sp, #0]
 8008b86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b8a:	b292      	uxth	r2, r2
 8008b8c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b94:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b98:	4581      	cmp	r9, r0
 8008b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b9e:	f84c 3b04 	str.w	r3, [ip], #4
 8008ba2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ba6:	d2db      	bcs.n	8008b60 <quorem+0x44>
 8008ba8:	f855 300b 	ldr.w	r3, [r5, fp]
 8008bac:	b92b      	cbnz	r3, 8008bba <quorem+0x9e>
 8008bae:	9b01      	ldr	r3, [sp, #4]
 8008bb0:	3b04      	subs	r3, #4
 8008bb2:	429d      	cmp	r5, r3
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	d32e      	bcc.n	8008c16 <quorem+0xfa>
 8008bb8:	613c      	str	r4, [r7, #16]
 8008bba:	4638      	mov	r0, r7
 8008bbc:	f001 f8c6 	bl	8009d4c <__mcmp>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	db24      	blt.n	8008c0e <quorem+0xf2>
 8008bc4:	3601      	adds	r6, #1
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f04f 0c00 	mov.w	ip, #0
 8008bcc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008bd0:	f8d0 e000 	ldr.w	lr, [r0]
 8008bd4:	b293      	uxth	r3, r2
 8008bd6:	ebac 0303 	sub.w	r3, ip, r3
 8008bda:	0c12      	lsrs	r2, r2, #16
 8008bdc:	fa13 f38e 	uxtah	r3, r3, lr
 8008be0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008be4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bee:	45c1      	cmp	r9, r8
 8008bf0:	f840 3b04 	str.w	r3, [r0], #4
 8008bf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bf8:	d2e8      	bcs.n	8008bcc <quorem+0xb0>
 8008bfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c02:	b922      	cbnz	r2, 8008c0e <quorem+0xf2>
 8008c04:	3b04      	subs	r3, #4
 8008c06:	429d      	cmp	r5, r3
 8008c08:	461a      	mov	r2, r3
 8008c0a:	d30a      	bcc.n	8008c22 <quorem+0x106>
 8008c0c:	613c      	str	r4, [r7, #16]
 8008c0e:	4630      	mov	r0, r6
 8008c10:	b003      	add	sp, #12
 8008c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c16:	6812      	ldr	r2, [r2, #0]
 8008c18:	3b04      	subs	r3, #4
 8008c1a:	2a00      	cmp	r2, #0
 8008c1c:	d1cc      	bne.n	8008bb8 <quorem+0x9c>
 8008c1e:	3c01      	subs	r4, #1
 8008c20:	e7c7      	b.n	8008bb2 <quorem+0x96>
 8008c22:	6812      	ldr	r2, [r2, #0]
 8008c24:	3b04      	subs	r3, #4
 8008c26:	2a00      	cmp	r2, #0
 8008c28:	d1f0      	bne.n	8008c0c <quorem+0xf0>
 8008c2a:	3c01      	subs	r4, #1
 8008c2c:	e7eb      	b.n	8008c06 <quorem+0xea>
 8008c2e:	2000      	movs	r0, #0
 8008c30:	e7ee      	b.n	8008c10 <quorem+0xf4>
 8008c32:	0000      	movs	r0, r0
 8008c34:	0000      	movs	r0, r0
	...

08008c38 <_dtoa_r>:
 8008c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	ed2d 8b04 	vpush	{d8-d9}
 8008c40:	ec57 6b10 	vmov	r6, r7, d0
 8008c44:	b093      	sub	sp, #76	; 0x4c
 8008c46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c4c:	9106      	str	r1, [sp, #24]
 8008c4e:	ee10 aa10 	vmov	sl, s0
 8008c52:	4604      	mov	r4, r0
 8008c54:	9209      	str	r2, [sp, #36]	; 0x24
 8008c56:	930c      	str	r3, [sp, #48]	; 0x30
 8008c58:	46bb      	mov	fp, r7
 8008c5a:	b975      	cbnz	r5, 8008c7a <_dtoa_r+0x42>
 8008c5c:	2010      	movs	r0, #16
 8008c5e:	f000 fddd 	bl	800981c <malloc>
 8008c62:	4602      	mov	r2, r0
 8008c64:	6260      	str	r0, [r4, #36]	; 0x24
 8008c66:	b920      	cbnz	r0, 8008c72 <_dtoa_r+0x3a>
 8008c68:	4ba7      	ldr	r3, [pc, #668]	; (8008f08 <_dtoa_r+0x2d0>)
 8008c6a:	21ea      	movs	r1, #234	; 0xea
 8008c6c:	48a7      	ldr	r0, [pc, #668]	; (8008f0c <_dtoa_r+0x2d4>)
 8008c6e:	f001 fa75 	bl	800a15c <__assert_func>
 8008c72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c76:	6005      	str	r5, [r0, #0]
 8008c78:	60c5      	str	r5, [r0, #12]
 8008c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c7c:	6819      	ldr	r1, [r3, #0]
 8008c7e:	b151      	cbz	r1, 8008c96 <_dtoa_r+0x5e>
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	604a      	str	r2, [r1, #4]
 8008c84:	2301      	movs	r3, #1
 8008c86:	4093      	lsls	r3, r2
 8008c88:	608b      	str	r3, [r1, #8]
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 fe1c 	bl	80098c8 <_Bfree>
 8008c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	1e3b      	subs	r3, r7, #0
 8008c98:	bfaa      	itet	ge
 8008c9a:	2300      	movge	r3, #0
 8008c9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008ca0:	f8c8 3000 	strge.w	r3, [r8]
 8008ca4:	4b9a      	ldr	r3, [pc, #616]	; (8008f10 <_dtoa_r+0x2d8>)
 8008ca6:	bfbc      	itt	lt
 8008ca8:	2201      	movlt	r2, #1
 8008caa:	f8c8 2000 	strlt.w	r2, [r8]
 8008cae:	ea33 030b 	bics.w	r3, r3, fp
 8008cb2:	d11b      	bne.n	8008cec <_dtoa_r+0xb4>
 8008cb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cc0:	4333      	orrs	r3, r6
 8008cc2:	f000 8592 	beq.w	80097ea <_dtoa_r+0xbb2>
 8008cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cc8:	b963      	cbnz	r3, 8008ce4 <_dtoa_r+0xac>
 8008cca:	4b92      	ldr	r3, [pc, #584]	; (8008f14 <_dtoa_r+0x2dc>)
 8008ccc:	e022      	b.n	8008d14 <_dtoa_r+0xdc>
 8008cce:	4b92      	ldr	r3, [pc, #584]	; (8008f18 <_dtoa_r+0x2e0>)
 8008cd0:	9301      	str	r3, [sp, #4]
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	9801      	ldr	r0, [sp, #4]
 8008cda:	b013      	add	sp, #76	; 0x4c
 8008cdc:	ecbd 8b04 	vpop	{d8-d9}
 8008ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce4:	4b8b      	ldr	r3, [pc, #556]	; (8008f14 <_dtoa_r+0x2dc>)
 8008ce6:	9301      	str	r3, [sp, #4]
 8008ce8:	3303      	adds	r3, #3
 8008cea:	e7f3      	b.n	8008cd4 <_dtoa_r+0x9c>
 8008cec:	2200      	movs	r2, #0
 8008cee:	2300      	movs	r3, #0
 8008cf0:	4650      	mov	r0, sl
 8008cf2:	4659      	mov	r1, fp
 8008cf4:	f7f7 fef8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008cf8:	ec4b ab19 	vmov	d9, sl, fp
 8008cfc:	4680      	mov	r8, r0
 8008cfe:	b158      	cbz	r0, 8008d18 <_dtoa_r+0xe0>
 8008d00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d02:	2301      	movs	r3, #1
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f000 856b 	beq.w	80097e4 <_dtoa_r+0xbac>
 8008d0e:	4883      	ldr	r0, [pc, #524]	; (8008f1c <_dtoa_r+0x2e4>)
 8008d10:	6018      	str	r0, [r3, #0]
 8008d12:	1e43      	subs	r3, r0, #1
 8008d14:	9301      	str	r3, [sp, #4]
 8008d16:	e7df      	b.n	8008cd8 <_dtoa_r+0xa0>
 8008d18:	ec4b ab10 	vmov	d0, sl, fp
 8008d1c:	aa10      	add	r2, sp, #64	; 0x40
 8008d1e:	a911      	add	r1, sp, #68	; 0x44
 8008d20:	4620      	mov	r0, r4
 8008d22:	f001 f8b9 	bl	8009e98 <__d2b>
 8008d26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008d2a:	ee08 0a10 	vmov	s16, r0
 8008d2e:	2d00      	cmp	r5, #0
 8008d30:	f000 8084 	beq.w	8008e3c <_dtoa_r+0x204>
 8008d34:	ee19 3a90 	vmov	r3, s19
 8008d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d40:	4656      	mov	r6, sl
 8008d42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008d4e:	4b74      	ldr	r3, [pc, #464]	; (8008f20 <_dtoa_r+0x2e8>)
 8008d50:	2200      	movs	r2, #0
 8008d52:	4630      	mov	r0, r6
 8008d54:	4639      	mov	r1, r7
 8008d56:	f7f7 faa7 	bl	80002a8 <__aeabi_dsub>
 8008d5a:	a365      	add	r3, pc, #404	; (adr r3, 8008ef0 <_dtoa_r+0x2b8>)
 8008d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d60:	f7f7 fc5a 	bl	8000618 <__aeabi_dmul>
 8008d64:	a364      	add	r3, pc, #400	; (adr r3, 8008ef8 <_dtoa_r+0x2c0>)
 8008d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6a:	f7f7 fa9f 	bl	80002ac <__adddf3>
 8008d6e:	4606      	mov	r6, r0
 8008d70:	4628      	mov	r0, r5
 8008d72:	460f      	mov	r7, r1
 8008d74:	f7f7 fbe6 	bl	8000544 <__aeabi_i2d>
 8008d78:	a361      	add	r3, pc, #388	; (adr r3, 8008f00 <_dtoa_r+0x2c8>)
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	f7f7 fc4b 	bl	8000618 <__aeabi_dmul>
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	4630      	mov	r0, r6
 8008d88:	4639      	mov	r1, r7
 8008d8a:	f7f7 fa8f 	bl	80002ac <__adddf3>
 8008d8e:	4606      	mov	r6, r0
 8008d90:	460f      	mov	r7, r1
 8008d92:	f7f7 fef1 	bl	8000b78 <__aeabi_d2iz>
 8008d96:	2200      	movs	r2, #0
 8008d98:	9000      	str	r0, [sp, #0]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	4639      	mov	r1, r7
 8008da0:	f7f7 feac 	bl	8000afc <__aeabi_dcmplt>
 8008da4:	b150      	cbz	r0, 8008dbc <_dtoa_r+0x184>
 8008da6:	9800      	ldr	r0, [sp, #0]
 8008da8:	f7f7 fbcc 	bl	8000544 <__aeabi_i2d>
 8008dac:	4632      	mov	r2, r6
 8008dae:	463b      	mov	r3, r7
 8008db0:	f7f7 fe9a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008db4:	b910      	cbnz	r0, 8008dbc <_dtoa_r+0x184>
 8008db6:	9b00      	ldr	r3, [sp, #0]
 8008db8:	3b01      	subs	r3, #1
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	9b00      	ldr	r3, [sp, #0]
 8008dbe:	2b16      	cmp	r3, #22
 8008dc0:	d85a      	bhi.n	8008e78 <_dtoa_r+0x240>
 8008dc2:	9a00      	ldr	r2, [sp, #0]
 8008dc4:	4b57      	ldr	r3, [pc, #348]	; (8008f24 <_dtoa_r+0x2ec>)
 8008dc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	ec51 0b19 	vmov	r0, r1, d9
 8008dd2:	f7f7 fe93 	bl	8000afc <__aeabi_dcmplt>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d050      	beq.n	8008e7c <_dtoa_r+0x244>
 8008dda:	9b00      	ldr	r3, [sp, #0]
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	2300      	movs	r3, #0
 8008de2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008de4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008de6:	1b5d      	subs	r5, r3, r5
 8008de8:	1e6b      	subs	r3, r5, #1
 8008dea:	9305      	str	r3, [sp, #20]
 8008dec:	bf45      	ittet	mi
 8008dee:	f1c5 0301 	rsbmi	r3, r5, #1
 8008df2:	9304      	strmi	r3, [sp, #16]
 8008df4:	2300      	movpl	r3, #0
 8008df6:	2300      	movmi	r3, #0
 8008df8:	bf4c      	ite	mi
 8008dfa:	9305      	strmi	r3, [sp, #20]
 8008dfc:	9304      	strpl	r3, [sp, #16]
 8008dfe:	9b00      	ldr	r3, [sp, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	db3d      	blt.n	8008e80 <_dtoa_r+0x248>
 8008e04:	9b05      	ldr	r3, [sp, #20]
 8008e06:	9a00      	ldr	r2, [sp, #0]
 8008e08:	920a      	str	r2, [sp, #40]	; 0x28
 8008e0a:	4413      	add	r3, r2
 8008e0c:	9305      	str	r3, [sp, #20]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	9307      	str	r3, [sp, #28]
 8008e12:	9b06      	ldr	r3, [sp, #24]
 8008e14:	2b09      	cmp	r3, #9
 8008e16:	f200 8089 	bhi.w	8008f2c <_dtoa_r+0x2f4>
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	bfc4      	itt	gt
 8008e1e:	3b04      	subgt	r3, #4
 8008e20:	9306      	strgt	r3, [sp, #24]
 8008e22:	9b06      	ldr	r3, [sp, #24]
 8008e24:	f1a3 0302 	sub.w	r3, r3, #2
 8008e28:	bfcc      	ite	gt
 8008e2a:	2500      	movgt	r5, #0
 8008e2c:	2501      	movle	r5, #1
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	f200 8087 	bhi.w	8008f42 <_dtoa_r+0x30a>
 8008e34:	e8df f003 	tbb	[pc, r3]
 8008e38:	59383a2d 	.word	0x59383a2d
 8008e3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008e40:	441d      	add	r5, r3
 8008e42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e46:	2b20      	cmp	r3, #32
 8008e48:	bfc1      	itttt	gt
 8008e4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e52:	fa0b f303 	lslgt.w	r3, fp, r3
 8008e56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e5a:	bfda      	itte	le
 8008e5c:	f1c3 0320 	rsble	r3, r3, #32
 8008e60:	fa06 f003 	lslle.w	r0, r6, r3
 8008e64:	4318      	orrgt	r0, r3
 8008e66:	f7f7 fb5d 	bl	8000524 <__aeabi_ui2d>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e72:	3d01      	subs	r5, #1
 8008e74:	930e      	str	r3, [sp, #56]	; 0x38
 8008e76:	e76a      	b.n	8008d4e <_dtoa_r+0x116>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e7b2      	b.n	8008de2 <_dtoa_r+0x1aa>
 8008e7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e7e:	e7b1      	b.n	8008de4 <_dtoa_r+0x1ac>
 8008e80:	9b04      	ldr	r3, [sp, #16]
 8008e82:	9a00      	ldr	r2, [sp, #0]
 8008e84:	1a9b      	subs	r3, r3, r2
 8008e86:	9304      	str	r3, [sp, #16]
 8008e88:	4253      	negs	r3, r2
 8008e8a:	9307      	str	r3, [sp, #28]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e90:	e7bf      	b.n	8008e12 <_dtoa_r+0x1da>
 8008e92:	2300      	movs	r3, #0
 8008e94:	9308      	str	r3, [sp, #32]
 8008e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	dc55      	bgt.n	8008f48 <_dtoa_r+0x310>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ea6:	e00c      	b.n	8008ec2 <_dtoa_r+0x28a>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e7f3      	b.n	8008e94 <_dtoa_r+0x25c>
 8008eac:	2300      	movs	r3, #0
 8008eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eb0:	9308      	str	r3, [sp, #32]
 8008eb2:	9b00      	ldr	r3, [sp, #0]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	9302      	str	r3, [sp, #8]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	9303      	str	r3, [sp, #12]
 8008ebe:	bfb8      	it	lt
 8008ec0:	2301      	movlt	r3, #1
 8008ec2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	6042      	str	r2, [r0, #4]
 8008ec8:	2204      	movs	r2, #4
 8008eca:	f102 0614 	add.w	r6, r2, #20
 8008ece:	429e      	cmp	r6, r3
 8008ed0:	6841      	ldr	r1, [r0, #4]
 8008ed2:	d93d      	bls.n	8008f50 <_dtoa_r+0x318>
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f000 fcb7 	bl	8009848 <_Balloc>
 8008eda:	9001      	str	r0, [sp, #4]
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d13b      	bne.n	8008f58 <_dtoa_r+0x320>
 8008ee0:	4b11      	ldr	r3, [pc, #68]	; (8008f28 <_dtoa_r+0x2f0>)
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ee8:	e6c0      	b.n	8008c6c <_dtoa_r+0x34>
 8008eea:	2301      	movs	r3, #1
 8008eec:	e7df      	b.n	8008eae <_dtoa_r+0x276>
 8008eee:	bf00      	nop
 8008ef0:	636f4361 	.word	0x636f4361
 8008ef4:	3fd287a7 	.word	0x3fd287a7
 8008ef8:	8b60c8b3 	.word	0x8b60c8b3
 8008efc:	3fc68a28 	.word	0x3fc68a28
 8008f00:	509f79fb 	.word	0x509f79fb
 8008f04:	3fd34413 	.word	0x3fd34413
 8008f08:	0800be61 	.word	0x0800be61
 8008f0c:	0800be78 	.word	0x0800be78
 8008f10:	7ff00000 	.word	0x7ff00000
 8008f14:	0800be5d 	.word	0x0800be5d
 8008f18:	0800be54 	.word	0x0800be54
 8008f1c:	0800be31 	.word	0x0800be31
 8008f20:	3ff80000 	.word	0x3ff80000
 8008f24:	0800bf68 	.word	0x0800bf68
 8008f28:	0800bed3 	.word	0x0800bed3
 8008f2c:	2501      	movs	r5, #1
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9306      	str	r3, [sp, #24]
 8008f32:	9508      	str	r5, [sp, #32]
 8008f34:	f04f 33ff 	mov.w	r3, #4294967295
 8008f38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2312      	movs	r3, #18
 8008f40:	e7b0      	b.n	8008ea4 <_dtoa_r+0x26c>
 8008f42:	2301      	movs	r3, #1
 8008f44:	9308      	str	r3, [sp, #32]
 8008f46:	e7f5      	b.n	8008f34 <_dtoa_r+0x2fc>
 8008f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f4e:	e7b8      	b.n	8008ec2 <_dtoa_r+0x28a>
 8008f50:	3101      	adds	r1, #1
 8008f52:	6041      	str	r1, [r0, #4]
 8008f54:	0052      	lsls	r2, r2, #1
 8008f56:	e7b8      	b.n	8008eca <_dtoa_r+0x292>
 8008f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f5a:	9a01      	ldr	r2, [sp, #4]
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	9b03      	ldr	r3, [sp, #12]
 8008f60:	2b0e      	cmp	r3, #14
 8008f62:	f200 809d 	bhi.w	80090a0 <_dtoa_r+0x468>
 8008f66:	2d00      	cmp	r5, #0
 8008f68:	f000 809a 	beq.w	80090a0 <_dtoa_r+0x468>
 8008f6c:	9b00      	ldr	r3, [sp, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	dd32      	ble.n	8008fd8 <_dtoa_r+0x3a0>
 8008f72:	4ab7      	ldr	r2, [pc, #732]	; (8009250 <_dtoa_r+0x618>)
 8008f74:	f003 030f 	and.w	r3, r3, #15
 8008f78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f80:	9b00      	ldr	r3, [sp, #0]
 8008f82:	05d8      	lsls	r0, r3, #23
 8008f84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f88:	d516      	bpl.n	8008fb8 <_dtoa_r+0x380>
 8008f8a:	4bb2      	ldr	r3, [pc, #712]	; (8009254 <_dtoa_r+0x61c>)
 8008f8c:	ec51 0b19 	vmov	r0, r1, d9
 8008f90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f94:	f7f7 fc6a 	bl	800086c <__aeabi_ddiv>
 8008f98:	f007 070f 	and.w	r7, r7, #15
 8008f9c:	4682      	mov	sl, r0
 8008f9e:	468b      	mov	fp, r1
 8008fa0:	2503      	movs	r5, #3
 8008fa2:	4eac      	ldr	r6, [pc, #688]	; (8009254 <_dtoa_r+0x61c>)
 8008fa4:	b957      	cbnz	r7, 8008fbc <_dtoa_r+0x384>
 8008fa6:	4642      	mov	r2, r8
 8008fa8:	464b      	mov	r3, r9
 8008faa:	4650      	mov	r0, sl
 8008fac:	4659      	mov	r1, fp
 8008fae:	f7f7 fc5d 	bl	800086c <__aeabi_ddiv>
 8008fb2:	4682      	mov	sl, r0
 8008fb4:	468b      	mov	fp, r1
 8008fb6:	e028      	b.n	800900a <_dtoa_r+0x3d2>
 8008fb8:	2502      	movs	r5, #2
 8008fba:	e7f2      	b.n	8008fa2 <_dtoa_r+0x36a>
 8008fbc:	07f9      	lsls	r1, r7, #31
 8008fbe:	d508      	bpl.n	8008fd2 <_dtoa_r+0x39a>
 8008fc0:	4640      	mov	r0, r8
 8008fc2:	4649      	mov	r1, r9
 8008fc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fc8:	f7f7 fb26 	bl	8000618 <__aeabi_dmul>
 8008fcc:	3501      	adds	r5, #1
 8008fce:	4680      	mov	r8, r0
 8008fd0:	4689      	mov	r9, r1
 8008fd2:	107f      	asrs	r7, r7, #1
 8008fd4:	3608      	adds	r6, #8
 8008fd6:	e7e5      	b.n	8008fa4 <_dtoa_r+0x36c>
 8008fd8:	f000 809b 	beq.w	8009112 <_dtoa_r+0x4da>
 8008fdc:	9b00      	ldr	r3, [sp, #0]
 8008fde:	4f9d      	ldr	r7, [pc, #628]	; (8009254 <_dtoa_r+0x61c>)
 8008fe0:	425e      	negs	r6, r3
 8008fe2:	4b9b      	ldr	r3, [pc, #620]	; (8009250 <_dtoa_r+0x618>)
 8008fe4:	f006 020f 	and.w	r2, r6, #15
 8008fe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff0:	ec51 0b19 	vmov	r0, r1, d9
 8008ff4:	f7f7 fb10 	bl	8000618 <__aeabi_dmul>
 8008ff8:	1136      	asrs	r6, r6, #4
 8008ffa:	4682      	mov	sl, r0
 8008ffc:	468b      	mov	fp, r1
 8008ffe:	2300      	movs	r3, #0
 8009000:	2502      	movs	r5, #2
 8009002:	2e00      	cmp	r6, #0
 8009004:	d17a      	bne.n	80090fc <_dtoa_r+0x4c4>
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1d3      	bne.n	8008fb2 <_dtoa_r+0x37a>
 800900a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 8082 	beq.w	8009116 <_dtoa_r+0x4de>
 8009012:	4b91      	ldr	r3, [pc, #580]	; (8009258 <_dtoa_r+0x620>)
 8009014:	2200      	movs	r2, #0
 8009016:	4650      	mov	r0, sl
 8009018:	4659      	mov	r1, fp
 800901a:	f7f7 fd6f 	bl	8000afc <__aeabi_dcmplt>
 800901e:	2800      	cmp	r0, #0
 8009020:	d079      	beq.n	8009116 <_dtoa_r+0x4de>
 8009022:	9b03      	ldr	r3, [sp, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d076      	beq.n	8009116 <_dtoa_r+0x4de>
 8009028:	9b02      	ldr	r3, [sp, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	dd36      	ble.n	800909c <_dtoa_r+0x464>
 800902e:	9b00      	ldr	r3, [sp, #0]
 8009030:	4650      	mov	r0, sl
 8009032:	4659      	mov	r1, fp
 8009034:	1e5f      	subs	r7, r3, #1
 8009036:	2200      	movs	r2, #0
 8009038:	4b88      	ldr	r3, [pc, #544]	; (800925c <_dtoa_r+0x624>)
 800903a:	f7f7 faed 	bl	8000618 <__aeabi_dmul>
 800903e:	9e02      	ldr	r6, [sp, #8]
 8009040:	4682      	mov	sl, r0
 8009042:	468b      	mov	fp, r1
 8009044:	3501      	adds	r5, #1
 8009046:	4628      	mov	r0, r5
 8009048:	f7f7 fa7c 	bl	8000544 <__aeabi_i2d>
 800904c:	4652      	mov	r2, sl
 800904e:	465b      	mov	r3, fp
 8009050:	f7f7 fae2 	bl	8000618 <__aeabi_dmul>
 8009054:	4b82      	ldr	r3, [pc, #520]	; (8009260 <_dtoa_r+0x628>)
 8009056:	2200      	movs	r2, #0
 8009058:	f7f7 f928 	bl	80002ac <__adddf3>
 800905c:	46d0      	mov	r8, sl
 800905e:	46d9      	mov	r9, fp
 8009060:	4682      	mov	sl, r0
 8009062:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009066:	2e00      	cmp	r6, #0
 8009068:	d158      	bne.n	800911c <_dtoa_r+0x4e4>
 800906a:	4b7e      	ldr	r3, [pc, #504]	; (8009264 <_dtoa_r+0x62c>)
 800906c:	2200      	movs	r2, #0
 800906e:	4640      	mov	r0, r8
 8009070:	4649      	mov	r1, r9
 8009072:	f7f7 f919 	bl	80002a8 <__aeabi_dsub>
 8009076:	4652      	mov	r2, sl
 8009078:	465b      	mov	r3, fp
 800907a:	4680      	mov	r8, r0
 800907c:	4689      	mov	r9, r1
 800907e:	f7f7 fd5b 	bl	8000b38 <__aeabi_dcmpgt>
 8009082:	2800      	cmp	r0, #0
 8009084:	f040 8295 	bne.w	80095b2 <_dtoa_r+0x97a>
 8009088:	4652      	mov	r2, sl
 800908a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800908e:	4640      	mov	r0, r8
 8009090:	4649      	mov	r1, r9
 8009092:	f7f7 fd33 	bl	8000afc <__aeabi_dcmplt>
 8009096:	2800      	cmp	r0, #0
 8009098:	f040 8289 	bne.w	80095ae <_dtoa_r+0x976>
 800909c:	ec5b ab19 	vmov	sl, fp, d9
 80090a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f2c0 8148 	blt.w	8009338 <_dtoa_r+0x700>
 80090a8:	9a00      	ldr	r2, [sp, #0]
 80090aa:	2a0e      	cmp	r2, #14
 80090ac:	f300 8144 	bgt.w	8009338 <_dtoa_r+0x700>
 80090b0:	4b67      	ldr	r3, [pc, #412]	; (8009250 <_dtoa_r+0x618>)
 80090b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f280 80d5 	bge.w	800926c <_dtoa_r+0x634>
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f300 80d1 	bgt.w	800926c <_dtoa_r+0x634>
 80090ca:	f040 826f 	bne.w	80095ac <_dtoa_r+0x974>
 80090ce:	4b65      	ldr	r3, [pc, #404]	; (8009264 <_dtoa_r+0x62c>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	4640      	mov	r0, r8
 80090d4:	4649      	mov	r1, r9
 80090d6:	f7f7 fa9f 	bl	8000618 <__aeabi_dmul>
 80090da:	4652      	mov	r2, sl
 80090dc:	465b      	mov	r3, fp
 80090de:	f7f7 fd21 	bl	8000b24 <__aeabi_dcmpge>
 80090e2:	9e03      	ldr	r6, [sp, #12]
 80090e4:	4637      	mov	r7, r6
 80090e6:	2800      	cmp	r0, #0
 80090e8:	f040 8245 	bne.w	8009576 <_dtoa_r+0x93e>
 80090ec:	9d01      	ldr	r5, [sp, #4]
 80090ee:	2331      	movs	r3, #49	; 0x31
 80090f0:	f805 3b01 	strb.w	r3, [r5], #1
 80090f4:	9b00      	ldr	r3, [sp, #0]
 80090f6:	3301      	adds	r3, #1
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	e240      	b.n	800957e <_dtoa_r+0x946>
 80090fc:	07f2      	lsls	r2, r6, #31
 80090fe:	d505      	bpl.n	800910c <_dtoa_r+0x4d4>
 8009100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009104:	f7f7 fa88 	bl	8000618 <__aeabi_dmul>
 8009108:	3501      	adds	r5, #1
 800910a:	2301      	movs	r3, #1
 800910c:	1076      	asrs	r6, r6, #1
 800910e:	3708      	adds	r7, #8
 8009110:	e777      	b.n	8009002 <_dtoa_r+0x3ca>
 8009112:	2502      	movs	r5, #2
 8009114:	e779      	b.n	800900a <_dtoa_r+0x3d2>
 8009116:	9f00      	ldr	r7, [sp, #0]
 8009118:	9e03      	ldr	r6, [sp, #12]
 800911a:	e794      	b.n	8009046 <_dtoa_r+0x40e>
 800911c:	9901      	ldr	r1, [sp, #4]
 800911e:	4b4c      	ldr	r3, [pc, #304]	; (8009250 <_dtoa_r+0x618>)
 8009120:	4431      	add	r1, r6
 8009122:	910d      	str	r1, [sp, #52]	; 0x34
 8009124:	9908      	ldr	r1, [sp, #32]
 8009126:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800912a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800912e:	2900      	cmp	r1, #0
 8009130:	d043      	beq.n	80091ba <_dtoa_r+0x582>
 8009132:	494d      	ldr	r1, [pc, #308]	; (8009268 <_dtoa_r+0x630>)
 8009134:	2000      	movs	r0, #0
 8009136:	f7f7 fb99 	bl	800086c <__aeabi_ddiv>
 800913a:	4652      	mov	r2, sl
 800913c:	465b      	mov	r3, fp
 800913e:	f7f7 f8b3 	bl	80002a8 <__aeabi_dsub>
 8009142:	9d01      	ldr	r5, [sp, #4]
 8009144:	4682      	mov	sl, r0
 8009146:	468b      	mov	fp, r1
 8009148:	4649      	mov	r1, r9
 800914a:	4640      	mov	r0, r8
 800914c:	f7f7 fd14 	bl	8000b78 <__aeabi_d2iz>
 8009150:	4606      	mov	r6, r0
 8009152:	f7f7 f9f7 	bl	8000544 <__aeabi_i2d>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4640      	mov	r0, r8
 800915c:	4649      	mov	r1, r9
 800915e:	f7f7 f8a3 	bl	80002a8 <__aeabi_dsub>
 8009162:	3630      	adds	r6, #48	; 0x30
 8009164:	f805 6b01 	strb.w	r6, [r5], #1
 8009168:	4652      	mov	r2, sl
 800916a:	465b      	mov	r3, fp
 800916c:	4680      	mov	r8, r0
 800916e:	4689      	mov	r9, r1
 8009170:	f7f7 fcc4 	bl	8000afc <__aeabi_dcmplt>
 8009174:	2800      	cmp	r0, #0
 8009176:	d163      	bne.n	8009240 <_dtoa_r+0x608>
 8009178:	4642      	mov	r2, r8
 800917a:	464b      	mov	r3, r9
 800917c:	4936      	ldr	r1, [pc, #216]	; (8009258 <_dtoa_r+0x620>)
 800917e:	2000      	movs	r0, #0
 8009180:	f7f7 f892 	bl	80002a8 <__aeabi_dsub>
 8009184:	4652      	mov	r2, sl
 8009186:	465b      	mov	r3, fp
 8009188:	f7f7 fcb8 	bl	8000afc <__aeabi_dcmplt>
 800918c:	2800      	cmp	r0, #0
 800918e:	f040 80b5 	bne.w	80092fc <_dtoa_r+0x6c4>
 8009192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009194:	429d      	cmp	r5, r3
 8009196:	d081      	beq.n	800909c <_dtoa_r+0x464>
 8009198:	4b30      	ldr	r3, [pc, #192]	; (800925c <_dtoa_r+0x624>)
 800919a:	2200      	movs	r2, #0
 800919c:	4650      	mov	r0, sl
 800919e:	4659      	mov	r1, fp
 80091a0:	f7f7 fa3a 	bl	8000618 <__aeabi_dmul>
 80091a4:	4b2d      	ldr	r3, [pc, #180]	; (800925c <_dtoa_r+0x624>)
 80091a6:	4682      	mov	sl, r0
 80091a8:	468b      	mov	fp, r1
 80091aa:	4640      	mov	r0, r8
 80091ac:	4649      	mov	r1, r9
 80091ae:	2200      	movs	r2, #0
 80091b0:	f7f7 fa32 	bl	8000618 <__aeabi_dmul>
 80091b4:	4680      	mov	r8, r0
 80091b6:	4689      	mov	r9, r1
 80091b8:	e7c6      	b.n	8009148 <_dtoa_r+0x510>
 80091ba:	4650      	mov	r0, sl
 80091bc:	4659      	mov	r1, fp
 80091be:	f7f7 fa2b 	bl	8000618 <__aeabi_dmul>
 80091c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091c4:	9d01      	ldr	r5, [sp, #4]
 80091c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091c8:	4682      	mov	sl, r0
 80091ca:	468b      	mov	fp, r1
 80091cc:	4649      	mov	r1, r9
 80091ce:	4640      	mov	r0, r8
 80091d0:	f7f7 fcd2 	bl	8000b78 <__aeabi_d2iz>
 80091d4:	4606      	mov	r6, r0
 80091d6:	f7f7 f9b5 	bl	8000544 <__aeabi_i2d>
 80091da:	3630      	adds	r6, #48	; 0x30
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	4640      	mov	r0, r8
 80091e2:	4649      	mov	r1, r9
 80091e4:	f7f7 f860 	bl	80002a8 <__aeabi_dsub>
 80091e8:	f805 6b01 	strb.w	r6, [r5], #1
 80091ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091ee:	429d      	cmp	r5, r3
 80091f0:	4680      	mov	r8, r0
 80091f2:	4689      	mov	r9, r1
 80091f4:	f04f 0200 	mov.w	r2, #0
 80091f8:	d124      	bne.n	8009244 <_dtoa_r+0x60c>
 80091fa:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <_dtoa_r+0x630>)
 80091fc:	4650      	mov	r0, sl
 80091fe:	4659      	mov	r1, fp
 8009200:	f7f7 f854 	bl	80002ac <__adddf3>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4640      	mov	r0, r8
 800920a:	4649      	mov	r1, r9
 800920c:	f7f7 fc94 	bl	8000b38 <__aeabi_dcmpgt>
 8009210:	2800      	cmp	r0, #0
 8009212:	d173      	bne.n	80092fc <_dtoa_r+0x6c4>
 8009214:	4652      	mov	r2, sl
 8009216:	465b      	mov	r3, fp
 8009218:	4913      	ldr	r1, [pc, #76]	; (8009268 <_dtoa_r+0x630>)
 800921a:	2000      	movs	r0, #0
 800921c:	f7f7 f844 	bl	80002a8 <__aeabi_dsub>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4640      	mov	r0, r8
 8009226:	4649      	mov	r1, r9
 8009228:	f7f7 fc68 	bl	8000afc <__aeabi_dcmplt>
 800922c:	2800      	cmp	r0, #0
 800922e:	f43f af35 	beq.w	800909c <_dtoa_r+0x464>
 8009232:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009234:	1e6b      	subs	r3, r5, #1
 8009236:	930f      	str	r3, [sp, #60]	; 0x3c
 8009238:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800923c:	2b30      	cmp	r3, #48	; 0x30
 800923e:	d0f8      	beq.n	8009232 <_dtoa_r+0x5fa>
 8009240:	9700      	str	r7, [sp, #0]
 8009242:	e049      	b.n	80092d8 <_dtoa_r+0x6a0>
 8009244:	4b05      	ldr	r3, [pc, #20]	; (800925c <_dtoa_r+0x624>)
 8009246:	f7f7 f9e7 	bl	8000618 <__aeabi_dmul>
 800924a:	4680      	mov	r8, r0
 800924c:	4689      	mov	r9, r1
 800924e:	e7bd      	b.n	80091cc <_dtoa_r+0x594>
 8009250:	0800bf68 	.word	0x0800bf68
 8009254:	0800bf40 	.word	0x0800bf40
 8009258:	3ff00000 	.word	0x3ff00000
 800925c:	40240000 	.word	0x40240000
 8009260:	401c0000 	.word	0x401c0000
 8009264:	40140000 	.word	0x40140000
 8009268:	3fe00000 	.word	0x3fe00000
 800926c:	9d01      	ldr	r5, [sp, #4]
 800926e:	4656      	mov	r6, sl
 8009270:	465f      	mov	r7, fp
 8009272:	4642      	mov	r2, r8
 8009274:	464b      	mov	r3, r9
 8009276:	4630      	mov	r0, r6
 8009278:	4639      	mov	r1, r7
 800927a:	f7f7 faf7 	bl	800086c <__aeabi_ddiv>
 800927e:	f7f7 fc7b 	bl	8000b78 <__aeabi_d2iz>
 8009282:	4682      	mov	sl, r0
 8009284:	f7f7 f95e 	bl	8000544 <__aeabi_i2d>
 8009288:	4642      	mov	r2, r8
 800928a:	464b      	mov	r3, r9
 800928c:	f7f7 f9c4 	bl	8000618 <__aeabi_dmul>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4630      	mov	r0, r6
 8009296:	4639      	mov	r1, r7
 8009298:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800929c:	f7f7 f804 	bl	80002a8 <__aeabi_dsub>
 80092a0:	f805 6b01 	strb.w	r6, [r5], #1
 80092a4:	9e01      	ldr	r6, [sp, #4]
 80092a6:	9f03      	ldr	r7, [sp, #12]
 80092a8:	1bae      	subs	r6, r5, r6
 80092aa:	42b7      	cmp	r7, r6
 80092ac:	4602      	mov	r2, r0
 80092ae:	460b      	mov	r3, r1
 80092b0:	d135      	bne.n	800931e <_dtoa_r+0x6e6>
 80092b2:	f7f6 fffb 	bl	80002ac <__adddf3>
 80092b6:	4642      	mov	r2, r8
 80092b8:	464b      	mov	r3, r9
 80092ba:	4606      	mov	r6, r0
 80092bc:	460f      	mov	r7, r1
 80092be:	f7f7 fc3b 	bl	8000b38 <__aeabi_dcmpgt>
 80092c2:	b9d0      	cbnz	r0, 80092fa <_dtoa_r+0x6c2>
 80092c4:	4642      	mov	r2, r8
 80092c6:	464b      	mov	r3, r9
 80092c8:	4630      	mov	r0, r6
 80092ca:	4639      	mov	r1, r7
 80092cc:	f7f7 fc0c 	bl	8000ae8 <__aeabi_dcmpeq>
 80092d0:	b110      	cbz	r0, 80092d8 <_dtoa_r+0x6a0>
 80092d2:	f01a 0f01 	tst.w	sl, #1
 80092d6:	d110      	bne.n	80092fa <_dtoa_r+0x6c2>
 80092d8:	4620      	mov	r0, r4
 80092da:	ee18 1a10 	vmov	r1, s16
 80092de:	f000 faf3 	bl	80098c8 <_Bfree>
 80092e2:	2300      	movs	r3, #0
 80092e4:	9800      	ldr	r0, [sp, #0]
 80092e6:	702b      	strb	r3, [r5, #0]
 80092e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092ea:	3001      	adds	r0, #1
 80092ec:	6018      	str	r0, [r3, #0]
 80092ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f43f acf1 	beq.w	8008cd8 <_dtoa_r+0xa0>
 80092f6:	601d      	str	r5, [r3, #0]
 80092f8:	e4ee      	b.n	8008cd8 <_dtoa_r+0xa0>
 80092fa:	9f00      	ldr	r7, [sp, #0]
 80092fc:	462b      	mov	r3, r5
 80092fe:	461d      	mov	r5, r3
 8009300:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009304:	2a39      	cmp	r2, #57	; 0x39
 8009306:	d106      	bne.n	8009316 <_dtoa_r+0x6de>
 8009308:	9a01      	ldr	r2, [sp, #4]
 800930a:	429a      	cmp	r2, r3
 800930c:	d1f7      	bne.n	80092fe <_dtoa_r+0x6c6>
 800930e:	9901      	ldr	r1, [sp, #4]
 8009310:	2230      	movs	r2, #48	; 0x30
 8009312:	3701      	adds	r7, #1
 8009314:	700a      	strb	r2, [r1, #0]
 8009316:	781a      	ldrb	r2, [r3, #0]
 8009318:	3201      	adds	r2, #1
 800931a:	701a      	strb	r2, [r3, #0]
 800931c:	e790      	b.n	8009240 <_dtoa_r+0x608>
 800931e:	4ba6      	ldr	r3, [pc, #664]	; (80095b8 <_dtoa_r+0x980>)
 8009320:	2200      	movs	r2, #0
 8009322:	f7f7 f979 	bl	8000618 <__aeabi_dmul>
 8009326:	2200      	movs	r2, #0
 8009328:	2300      	movs	r3, #0
 800932a:	4606      	mov	r6, r0
 800932c:	460f      	mov	r7, r1
 800932e:	f7f7 fbdb 	bl	8000ae8 <__aeabi_dcmpeq>
 8009332:	2800      	cmp	r0, #0
 8009334:	d09d      	beq.n	8009272 <_dtoa_r+0x63a>
 8009336:	e7cf      	b.n	80092d8 <_dtoa_r+0x6a0>
 8009338:	9a08      	ldr	r2, [sp, #32]
 800933a:	2a00      	cmp	r2, #0
 800933c:	f000 80d7 	beq.w	80094ee <_dtoa_r+0x8b6>
 8009340:	9a06      	ldr	r2, [sp, #24]
 8009342:	2a01      	cmp	r2, #1
 8009344:	f300 80ba 	bgt.w	80094bc <_dtoa_r+0x884>
 8009348:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800934a:	2a00      	cmp	r2, #0
 800934c:	f000 80b2 	beq.w	80094b4 <_dtoa_r+0x87c>
 8009350:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009354:	9e07      	ldr	r6, [sp, #28]
 8009356:	9d04      	ldr	r5, [sp, #16]
 8009358:	9a04      	ldr	r2, [sp, #16]
 800935a:	441a      	add	r2, r3
 800935c:	9204      	str	r2, [sp, #16]
 800935e:	9a05      	ldr	r2, [sp, #20]
 8009360:	2101      	movs	r1, #1
 8009362:	441a      	add	r2, r3
 8009364:	4620      	mov	r0, r4
 8009366:	9205      	str	r2, [sp, #20]
 8009368:	f000 fb66 	bl	8009a38 <__i2b>
 800936c:	4607      	mov	r7, r0
 800936e:	2d00      	cmp	r5, #0
 8009370:	dd0c      	ble.n	800938c <_dtoa_r+0x754>
 8009372:	9b05      	ldr	r3, [sp, #20]
 8009374:	2b00      	cmp	r3, #0
 8009376:	dd09      	ble.n	800938c <_dtoa_r+0x754>
 8009378:	42ab      	cmp	r3, r5
 800937a:	9a04      	ldr	r2, [sp, #16]
 800937c:	bfa8      	it	ge
 800937e:	462b      	movge	r3, r5
 8009380:	1ad2      	subs	r2, r2, r3
 8009382:	9204      	str	r2, [sp, #16]
 8009384:	9a05      	ldr	r2, [sp, #20]
 8009386:	1aed      	subs	r5, r5, r3
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	9305      	str	r3, [sp, #20]
 800938c:	9b07      	ldr	r3, [sp, #28]
 800938e:	b31b      	cbz	r3, 80093d8 <_dtoa_r+0x7a0>
 8009390:	9b08      	ldr	r3, [sp, #32]
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 80af 	beq.w	80094f6 <_dtoa_r+0x8be>
 8009398:	2e00      	cmp	r6, #0
 800939a:	dd13      	ble.n	80093c4 <_dtoa_r+0x78c>
 800939c:	4639      	mov	r1, r7
 800939e:	4632      	mov	r2, r6
 80093a0:	4620      	mov	r0, r4
 80093a2:	f000 fc09 	bl	8009bb8 <__pow5mult>
 80093a6:	ee18 2a10 	vmov	r2, s16
 80093aa:	4601      	mov	r1, r0
 80093ac:	4607      	mov	r7, r0
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 fb58 	bl	8009a64 <__multiply>
 80093b4:	ee18 1a10 	vmov	r1, s16
 80093b8:	4680      	mov	r8, r0
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 fa84 	bl	80098c8 <_Bfree>
 80093c0:	ee08 8a10 	vmov	s16, r8
 80093c4:	9b07      	ldr	r3, [sp, #28]
 80093c6:	1b9a      	subs	r2, r3, r6
 80093c8:	d006      	beq.n	80093d8 <_dtoa_r+0x7a0>
 80093ca:	ee18 1a10 	vmov	r1, s16
 80093ce:	4620      	mov	r0, r4
 80093d0:	f000 fbf2 	bl	8009bb8 <__pow5mult>
 80093d4:	ee08 0a10 	vmov	s16, r0
 80093d8:	2101      	movs	r1, #1
 80093da:	4620      	mov	r0, r4
 80093dc:	f000 fb2c 	bl	8009a38 <__i2b>
 80093e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	4606      	mov	r6, r0
 80093e6:	f340 8088 	ble.w	80094fa <_dtoa_r+0x8c2>
 80093ea:	461a      	mov	r2, r3
 80093ec:	4601      	mov	r1, r0
 80093ee:	4620      	mov	r0, r4
 80093f0:	f000 fbe2 	bl	8009bb8 <__pow5mult>
 80093f4:	9b06      	ldr	r3, [sp, #24]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	4606      	mov	r6, r0
 80093fa:	f340 8081 	ble.w	8009500 <_dtoa_r+0x8c8>
 80093fe:	f04f 0800 	mov.w	r8, #0
 8009402:	6933      	ldr	r3, [r6, #16]
 8009404:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009408:	6918      	ldr	r0, [r3, #16]
 800940a:	f000 fac5 	bl	8009998 <__hi0bits>
 800940e:	f1c0 0020 	rsb	r0, r0, #32
 8009412:	9b05      	ldr	r3, [sp, #20]
 8009414:	4418      	add	r0, r3
 8009416:	f010 001f 	ands.w	r0, r0, #31
 800941a:	f000 8092 	beq.w	8009542 <_dtoa_r+0x90a>
 800941e:	f1c0 0320 	rsb	r3, r0, #32
 8009422:	2b04      	cmp	r3, #4
 8009424:	f340 808a 	ble.w	800953c <_dtoa_r+0x904>
 8009428:	f1c0 001c 	rsb	r0, r0, #28
 800942c:	9b04      	ldr	r3, [sp, #16]
 800942e:	4403      	add	r3, r0
 8009430:	9304      	str	r3, [sp, #16]
 8009432:	9b05      	ldr	r3, [sp, #20]
 8009434:	4403      	add	r3, r0
 8009436:	4405      	add	r5, r0
 8009438:	9305      	str	r3, [sp, #20]
 800943a:	9b04      	ldr	r3, [sp, #16]
 800943c:	2b00      	cmp	r3, #0
 800943e:	dd07      	ble.n	8009450 <_dtoa_r+0x818>
 8009440:	ee18 1a10 	vmov	r1, s16
 8009444:	461a      	mov	r2, r3
 8009446:	4620      	mov	r0, r4
 8009448:	f000 fc10 	bl	8009c6c <__lshift>
 800944c:	ee08 0a10 	vmov	s16, r0
 8009450:	9b05      	ldr	r3, [sp, #20]
 8009452:	2b00      	cmp	r3, #0
 8009454:	dd05      	ble.n	8009462 <_dtoa_r+0x82a>
 8009456:	4631      	mov	r1, r6
 8009458:	461a      	mov	r2, r3
 800945a:	4620      	mov	r0, r4
 800945c:	f000 fc06 	bl	8009c6c <__lshift>
 8009460:	4606      	mov	r6, r0
 8009462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009464:	2b00      	cmp	r3, #0
 8009466:	d06e      	beq.n	8009546 <_dtoa_r+0x90e>
 8009468:	ee18 0a10 	vmov	r0, s16
 800946c:	4631      	mov	r1, r6
 800946e:	f000 fc6d 	bl	8009d4c <__mcmp>
 8009472:	2800      	cmp	r0, #0
 8009474:	da67      	bge.n	8009546 <_dtoa_r+0x90e>
 8009476:	9b00      	ldr	r3, [sp, #0]
 8009478:	3b01      	subs	r3, #1
 800947a:	ee18 1a10 	vmov	r1, s16
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	220a      	movs	r2, #10
 8009482:	2300      	movs	r3, #0
 8009484:	4620      	mov	r0, r4
 8009486:	f000 fa41 	bl	800990c <__multadd>
 800948a:	9b08      	ldr	r3, [sp, #32]
 800948c:	ee08 0a10 	vmov	s16, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	f000 81b1 	beq.w	80097f8 <_dtoa_r+0xbc0>
 8009496:	2300      	movs	r3, #0
 8009498:	4639      	mov	r1, r7
 800949a:	220a      	movs	r2, #10
 800949c:	4620      	mov	r0, r4
 800949e:	f000 fa35 	bl	800990c <__multadd>
 80094a2:	9b02      	ldr	r3, [sp, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	4607      	mov	r7, r0
 80094a8:	f300 808e 	bgt.w	80095c8 <_dtoa_r+0x990>
 80094ac:	9b06      	ldr	r3, [sp, #24]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	dc51      	bgt.n	8009556 <_dtoa_r+0x91e>
 80094b2:	e089      	b.n	80095c8 <_dtoa_r+0x990>
 80094b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094ba:	e74b      	b.n	8009354 <_dtoa_r+0x71c>
 80094bc:	9b03      	ldr	r3, [sp, #12]
 80094be:	1e5e      	subs	r6, r3, #1
 80094c0:	9b07      	ldr	r3, [sp, #28]
 80094c2:	42b3      	cmp	r3, r6
 80094c4:	bfbf      	itttt	lt
 80094c6:	9b07      	ldrlt	r3, [sp, #28]
 80094c8:	9607      	strlt	r6, [sp, #28]
 80094ca:	1af2      	sublt	r2, r6, r3
 80094cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80094ce:	bfb6      	itet	lt
 80094d0:	189b      	addlt	r3, r3, r2
 80094d2:	1b9e      	subge	r6, r3, r6
 80094d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80094d6:	9b03      	ldr	r3, [sp, #12]
 80094d8:	bfb8      	it	lt
 80094da:	2600      	movlt	r6, #0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	bfb7      	itett	lt
 80094e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80094e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80094e8:	1a9d      	sublt	r5, r3, r2
 80094ea:	2300      	movlt	r3, #0
 80094ec:	e734      	b.n	8009358 <_dtoa_r+0x720>
 80094ee:	9e07      	ldr	r6, [sp, #28]
 80094f0:	9d04      	ldr	r5, [sp, #16]
 80094f2:	9f08      	ldr	r7, [sp, #32]
 80094f4:	e73b      	b.n	800936e <_dtoa_r+0x736>
 80094f6:	9a07      	ldr	r2, [sp, #28]
 80094f8:	e767      	b.n	80093ca <_dtoa_r+0x792>
 80094fa:	9b06      	ldr	r3, [sp, #24]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	dc18      	bgt.n	8009532 <_dtoa_r+0x8fa>
 8009500:	f1ba 0f00 	cmp.w	sl, #0
 8009504:	d115      	bne.n	8009532 <_dtoa_r+0x8fa>
 8009506:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800950a:	b993      	cbnz	r3, 8009532 <_dtoa_r+0x8fa>
 800950c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009510:	0d1b      	lsrs	r3, r3, #20
 8009512:	051b      	lsls	r3, r3, #20
 8009514:	b183      	cbz	r3, 8009538 <_dtoa_r+0x900>
 8009516:	9b04      	ldr	r3, [sp, #16]
 8009518:	3301      	adds	r3, #1
 800951a:	9304      	str	r3, [sp, #16]
 800951c:	9b05      	ldr	r3, [sp, #20]
 800951e:	3301      	adds	r3, #1
 8009520:	9305      	str	r3, [sp, #20]
 8009522:	f04f 0801 	mov.w	r8, #1
 8009526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009528:	2b00      	cmp	r3, #0
 800952a:	f47f af6a 	bne.w	8009402 <_dtoa_r+0x7ca>
 800952e:	2001      	movs	r0, #1
 8009530:	e76f      	b.n	8009412 <_dtoa_r+0x7da>
 8009532:	f04f 0800 	mov.w	r8, #0
 8009536:	e7f6      	b.n	8009526 <_dtoa_r+0x8ee>
 8009538:	4698      	mov	r8, r3
 800953a:	e7f4      	b.n	8009526 <_dtoa_r+0x8ee>
 800953c:	f43f af7d 	beq.w	800943a <_dtoa_r+0x802>
 8009540:	4618      	mov	r0, r3
 8009542:	301c      	adds	r0, #28
 8009544:	e772      	b.n	800942c <_dtoa_r+0x7f4>
 8009546:	9b03      	ldr	r3, [sp, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	dc37      	bgt.n	80095bc <_dtoa_r+0x984>
 800954c:	9b06      	ldr	r3, [sp, #24]
 800954e:	2b02      	cmp	r3, #2
 8009550:	dd34      	ble.n	80095bc <_dtoa_r+0x984>
 8009552:	9b03      	ldr	r3, [sp, #12]
 8009554:	9302      	str	r3, [sp, #8]
 8009556:	9b02      	ldr	r3, [sp, #8]
 8009558:	b96b      	cbnz	r3, 8009576 <_dtoa_r+0x93e>
 800955a:	4631      	mov	r1, r6
 800955c:	2205      	movs	r2, #5
 800955e:	4620      	mov	r0, r4
 8009560:	f000 f9d4 	bl	800990c <__multadd>
 8009564:	4601      	mov	r1, r0
 8009566:	4606      	mov	r6, r0
 8009568:	ee18 0a10 	vmov	r0, s16
 800956c:	f000 fbee 	bl	8009d4c <__mcmp>
 8009570:	2800      	cmp	r0, #0
 8009572:	f73f adbb 	bgt.w	80090ec <_dtoa_r+0x4b4>
 8009576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009578:	9d01      	ldr	r5, [sp, #4]
 800957a:	43db      	mvns	r3, r3
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	f04f 0800 	mov.w	r8, #0
 8009582:	4631      	mov	r1, r6
 8009584:	4620      	mov	r0, r4
 8009586:	f000 f99f 	bl	80098c8 <_Bfree>
 800958a:	2f00      	cmp	r7, #0
 800958c:	f43f aea4 	beq.w	80092d8 <_dtoa_r+0x6a0>
 8009590:	f1b8 0f00 	cmp.w	r8, #0
 8009594:	d005      	beq.n	80095a2 <_dtoa_r+0x96a>
 8009596:	45b8      	cmp	r8, r7
 8009598:	d003      	beq.n	80095a2 <_dtoa_r+0x96a>
 800959a:	4641      	mov	r1, r8
 800959c:	4620      	mov	r0, r4
 800959e:	f000 f993 	bl	80098c8 <_Bfree>
 80095a2:	4639      	mov	r1, r7
 80095a4:	4620      	mov	r0, r4
 80095a6:	f000 f98f 	bl	80098c8 <_Bfree>
 80095aa:	e695      	b.n	80092d8 <_dtoa_r+0x6a0>
 80095ac:	2600      	movs	r6, #0
 80095ae:	4637      	mov	r7, r6
 80095b0:	e7e1      	b.n	8009576 <_dtoa_r+0x93e>
 80095b2:	9700      	str	r7, [sp, #0]
 80095b4:	4637      	mov	r7, r6
 80095b6:	e599      	b.n	80090ec <_dtoa_r+0x4b4>
 80095b8:	40240000 	.word	0x40240000
 80095bc:	9b08      	ldr	r3, [sp, #32]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f000 80ca 	beq.w	8009758 <_dtoa_r+0xb20>
 80095c4:	9b03      	ldr	r3, [sp, #12]
 80095c6:	9302      	str	r3, [sp, #8]
 80095c8:	2d00      	cmp	r5, #0
 80095ca:	dd05      	ble.n	80095d8 <_dtoa_r+0x9a0>
 80095cc:	4639      	mov	r1, r7
 80095ce:	462a      	mov	r2, r5
 80095d0:	4620      	mov	r0, r4
 80095d2:	f000 fb4b 	bl	8009c6c <__lshift>
 80095d6:	4607      	mov	r7, r0
 80095d8:	f1b8 0f00 	cmp.w	r8, #0
 80095dc:	d05b      	beq.n	8009696 <_dtoa_r+0xa5e>
 80095de:	6879      	ldr	r1, [r7, #4]
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 f931 	bl	8009848 <_Balloc>
 80095e6:	4605      	mov	r5, r0
 80095e8:	b928      	cbnz	r0, 80095f6 <_dtoa_r+0x9be>
 80095ea:	4b87      	ldr	r3, [pc, #540]	; (8009808 <_dtoa_r+0xbd0>)
 80095ec:	4602      	mov	r2, r0
 80095ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80095f2:	f7ff bb3b 	b.w	8008c6c <_dtoa_r+0x34>
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	3202      	adds	r2, #2
 80095fa:	0092      	lsls	r2, r2, #2
 80095fc:	f107 010c 	add.w	r1, r7, #12
 8009600:	300c      	adds	r0, #12
 8009602:	f000 f913 	bl	800982c <memcpy>
 8009606:	2201      	movs	r2, #1
 8009608:	4629      	mov	r1, r5
 800960a:	4620      	mov	r0, r4
 800960c:	f000 fb2e 	bl	8009c6c <__lshift>
 8009610:	9b01      	ldr	r3, [sp, #4]
 8009612:	f103 0901 	add.w	r9, r3, #1
 8009616:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800961a:	4413      	add	r3, r2
 800961c:	9305      	str	r3, [sp, #20]
 800961e:	f00a 0301 	and.w	r3, sl, #1
 8009622:	46b8      	mov	r8, r7
 8009624:	9304      	str	r3, [sp, #16]
 8009626:	4607      	mov	r7, r0
 8009628:	4631      	mov	r1, r6
 800962a:	ee18 0a10 	vmov	r0, s16
 800962e:	f7ff fa75 	bl	8008b1c <quorem>
 8009632:	4641      	mov	r1, r8
 8009634:	9002      	str	r0, [sp, #8]
 8009636:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800963a:	ee18 0a10 	vmov	r0, s16
 800963e:	f000 fb85 	bl	8009d4c <__mcmp>
 8009642:	463a      	mov	r2, r7
 8009644:	9003      	str	r0, [sp, #12]
 8009646:	4631      	mov	r1, r6
 8009648:	4620      	mov	r0, r4
 800964a:	f000 fb9b 	bl	8009d84 <__mdiff>
 800964e:	68c2      	ldr	r2, [r0, #12]
 8009650:	f109 3bff 	add.w	fp, r9, #4294967295
 8009654:	4605      	mov	r5, r0
 8009656:	bb02      	cbnz	r2, 800969a <_dtoa_r+0xa62>
 8009658:	4601      	mov	r1, r0
 800965a:	ee18 0a10 	vmov	r0, s16
 800965e:	f000 fb75 	bl	8009d4c <__mcmp>
 8009662:	4602      	mov	r2, r0
 8009664:	4629      	mov	r1, r5
 8009666:	4620      	mov	r0, r4
 8009668:	9207      	str	r2, [sp, #28]
 800966a:	f000 f92d 	bl	80098c8 <_Bfree>
 800966e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009672:	ea43 0102 	orr.w	r1, r3, r2
 8009676:	9b04      	ldr	r3, [sp, #16]
 8009678:	430b      	orrs	r3, r1
 800967a:	464d      	mov	r5, r9
 800967c:	d10f      	bne.n	800969e <_dtoa_r+0xa66>
 800967e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009682:	d02a      	beq.n	80096da <_dtoa_r+0xaa2>
 8009684:	9b03      	ldr	r3, [sp, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	dd02      	ble.n	8009690 <_dtoa_r+0xa58>
 800968a:	9b02      	ldr	r3, [sp, #8]
 800968c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009690:	f88b a000 	strb.w	sl, [fp]
 8009694:	e775      	b.n	8009582 <_dtoa_r+0x94a>
 8009696:	4638      	mov	r0, r7
 8009698:	e7ba      	b.n	8009610 <_dtoa_r+0x9d8>
 800969a:	2201      	movs	r2, #1
 800969c:	e7e2      	b.n	8009664 <_dtoa_r+0xa2c>
 800969e:	9b03      	ldr	r3, [sp, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	db04      	blt.n	80096ae <_dtoa_r+0xa76>
 80096a4:	9906      	ldr	r1, [sp, #24]
 80096a6:	430b      	orrs	r3, r1
 80096a8:	9904      	ldr	r1, [sp, #16]
 80096aa:	430b      	orrs	r3, r1
 80096ac:	d122      	bne.n	80096f4 <_dtoa_r+0xabc>
 80096ae:	2a00      	cmp	r2, #0
 80096b0:	ddee      	ble.n	8009690 <_dtoa_r+0xa58>
 80096b2:	ee18 1a10 	vmov	r1, s16
 80096b6:	2201      	movs	r2, #1
 80096b8:	4620      	mov	r0, r4
 80096ba:	f000 fad7 	bl	8009c6c <__lshift>
 80096be:	4631      	mov	r1, r6
 80096c0:	ee08 0a10 	vmov	s16, r0
 80096c4:	f000 fb42 	bl	8009d4c <__mcmp>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	dc03      	bgt.n	80096d4 <_dtoa_r+0xa9c>
 80096cc:	d1e0      	bne.n	8009690 <_dtoa_r+0xa58>
 80096ce:	f01a 0f01 	tst.w	sl, #1
 80096d2:	d0dd      	beq.n	8009690 <_dtoa_r+0xa58>
 80096d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096d8:	d1d7      	bne.n	800968a <_dtoa_r+0xa52>
 80096da:	2339      	movs	r3, #57	; 0x39
 80096dc:	f88b 3000 	strb.w	r3, [fp]
 80096e0:	462b      	mov	r3, r5
 80096e2:	461d      	mov	r5, r3
 80096e4:	3b01      	subs	r3, #1
 80096e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096ea:	2a39      	cmp	r2, #57	; 0x39
 80096ec:	d071      	beq.n	80097d2 <_dtoa_r+0xb9a>
 80096ee:	3201      	adds	r2, #1
 80096f0:	701a      	strb	r2, [r3, #0]
 80096f2:	e746      	b.n	8009582 <_dtoa_r+0x94a>
 80096f4:	2a00      	cmp	r2, #0
 80096f6:	dd07      	ble.n	8009708 <_dtoa_r+0xad0>
 80096f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096fc:	d0ed      	beq.n	80096da <_dtoa_r+0xaa2>
 80096fe:	f10a 0301 	add.w	r3, sl, #1
 8009702:	f88b 3000 	strb.w	r3, [fp]
 8009706:	e73c      	b.n	8009582 <_dtoa_r+0x94a>
 8009708:	9b05      	ldr	r3, [sp, #20]
 800970a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800970e:	4599      	cmp	r9, r3
 8009710:	d047      	beq.n	80097a2 <_dtoa_r+0xb6a>
 8009712:	ee18 1a10 	vmov	r1, s16
 8009716:	2300      	movs	r3, #0
 8009718:	220a      	movs	r2, #10
 800971a:	4620      	mov	r0, r4
 800971c:	f000 f8f6 	bl	800990c <__multadd>
 8009720:	45b8      	cmp	r8, r7
 8009722:	ee08 0a10 	vmov	s16, r0
 8009726:	f04f 0300 	mov.w	r3, #0
 800972a:	f04f 020a 	mov.w	r2, #10
 800972e:	4641      	mov	r1, r8
 8009730:	4620      	mov	r0, r4
 8009732:	d106      	bne.n	8009742 <_dtoa_r+0xb0a>
 8009734:	f000 f8ea 	bl	800990c <__multadd>
 8009738:	4680      	mov	r8, r0
 800973a:	4607      	mov	r7, r0
 800973c:	f109 0901 	add.w	r9, r9, #1
 8009740:	e772      	b.n	8009628 <_dtoa_r+0x9f0>
 8009742:	f000 f8e3 	bl	800990c <__multadd>
 8009746:	4639      	mov	r1, r7
 8009748:	4680      	mov	r8, r0
 800974a:	2300      	movs	r3, #0
 800974c:	220a      	movs	r2, #10
 800974e:	4620      	mov	r0, r4
 8009750:	f000 f8dc 	bl	800990c <__multadd>
 8009754:	4607      	mov	r7, r0
 8009756:	e7f1      	b.n	800973c <_dtoa_r+0xb04>
 8009758:	9b03      	ldr	r3, [sp, #12]
 800975a:	9302      	str	r3, [sp, #8]
 800975c:	9d01      	ldr	r5, [sp, #4]
 800975e:	ee18 0a10 	vmov	r0, s16
 8009762:	4631      	mov	r1, r6
 8009764:	f7ff f9da 	bl	8008b1c <quorem>
 8009768:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800976c:	9b01      	ldr	r3, [sp, #4]
 800976e:	f805 ab01 	strb.w	sl, [r5], #1
 8009772:	1aea      	subs	r2, r5, r3
 8009774:	9b02      	ldr	r3, [sp, #8]
 8009776:	4293      	cmp	r3, r2
 8009778:	dd09      	ble.n	800978e <_dtoa_r+0xb56>
 800977a:	ee18 1a10 	vmov	r1, s16
 800977e:	2300      	movs	r3, #0
 8009780:	220a      	movs	r2, #10
 8009782:	4620      	mov	r0, r4
 8009784:	f000 f8c2 	bl	800990c <__multadd>
 8009788:	ee08 0a10 	vmov	s16, r0
 800978c:	e7e7      	b.n	800975e <_dtoa_r+0xb26>
 800978e:	9b02      	ldr	r3, [sp, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	bfc8      	it	gt
 8009794:	461d      	movgt	r5, r3
 8009796:	9b01      	ldr	r3, [sp, #4]
 8009798:	bfd8      	it	le
 800979a:	2501      	movle	r5, #1
 800979c:	441d      	add	r5, r3
 800979e:	f04f 0800 	mov.w	r8, #0
 80097a2:	ee18 1a10 	vmov	r1, s16
 80097a6:	2201      	movs	r2, #1
 80097a8:	4620      	mov	r0, r4
 80097aa:	f000 fa5f 	bl	8009c6c <__lshift>
 80097ae:	4631      	mov	r1, r6
 80097b0:	ee08 0a10 	vmov	s16, r0
 80097b4:	f000 faca 	bl	8009d4c <__mcmp>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	dc91      	bgt.n	80096e0 <_dtoa_r+0xaa8>
 80097bc:	d102      	bne.n	80097c4 <_dtoa_r+0xb8c>
 80097be:	f01a 0f01 	tst.w	sl, #1
 80097c2:	d18d      	bne.n	80096e0 <_dtoa_r+0xaa8>
 80097c4:	462b      	mov	r3, r5
 80097c6:	461d      	mov	r5, r3
 80097c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097cc:	2a30      	cmp	r2, #48	; 0x30
 80097ce:	d0fa      	beq.n	80097c6 <_dtoa_r+0xb8e>
 80097d0:	e6d7      	b.n	8009582 <_dtoa_r+0x94a>
 80097d2:	9a01      	ldr	r2, [sp, #4]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d184      	bne.n	80096e2 <_dtoa_r+0xaaa>
 80097d8:	9b00      	ldr	r3, [sp, #0]
 80097da:	3301      	adds	r3, #1
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	2331      	movs	r3, #49	; 0x31
 80097e0:	7013      	strb	r3, [r2, #0]
 80097e2:	e6ce      	b.n	8009582 <_dtoa_r+0x94a>
 80097e4:	4b09      	ldr	r3, [pc, #36]	; (800980c <_dtoa_r+0xbd4>)
 80097e6:	f7ff ba95 	b.w	8008d14 <_dtoa_r+0xdc>
 80097ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f47f aa6e 	bne.w	8008cce <_dtoa_r+0x96>
 80097f2:	4b07      	ldr	r3, [pc, #28]	; (8009810 <_dtoa_r+0xbd8>)
 80097f4:	f7ff ba8e 	b.w	8008d14 <_dtoa_r+0xdc>
 80097f8:	9b02      	ldr	r3, [sp, #8]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	dcae      	bgt.n	800975c <_dtoa_r+0xb24>
 80097fe:	9b06      	ldr	r3, [sp, #24]
 8009800:	2b02      	cmp	r3, #2
 8009802:	f73f aea8 	bgt.w	8009556 <_dtoa_r+0x91e>
 8009806:	e7a9      	b.n	800975c <_dtoa_r+0xb24>
 8009808:	0800bed3 	.word	0x0800bed3
 800980c:	0800be30 	.word	0x0800be30
 8009810:	0800be54 	.word	0x0800be54

08009814 <_localeconv_r>:
 8009814:	4800      	ldr	r0, [pc, #0]	; (8009818 <_localeconv_r+0x4>)
 8009816:	4770      	bx	lr
 8009818:	20000184 	.word	0x20000184

0800981c <malloc>:
 800981c:	4b02      	ldr	r3, [pc, #8]	; (8009828 <malloc+0xc>)
 800981e:	4601      	mov	r1, r0
 8009820:	6818      	ldr	r0, [r3, #0]
 8009822:	f000 bc17 	b.w	800a054 <_malloc_r>
 8009826:	bf00      	nop
 8009828:	20000030 	.word	0x20000030

0800982c <memcpy>:
 800982c:	440a      	add	r2, r1
 800982e:	4291      	cmp	r1, r2
 8009830:	f100 33ff 	add.w	r3, r0, #4294967295
 8009834:	d100      	bne.n	8009838 <memcpy+0xc>
 8009836:	4770      	bx	lr
 8009838:	b510      	push	{r4, lr}
 800983a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800983e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009842:	4291      	cmp	r1, r2
 8009844:	d1f9      	bne.n	800983a <memcpy+0xe>
 8009846:	bd10      	pop	{r4, pc}

08009848 <_Balloc>:
 8009848:	b570      	push	{r4, r5, r6, lr}
 800984a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800984c:	4604      	mov	r4, r0
 800984e:	460d      	mov	r5, r1
 8009850:	b976      	cbnz	r6, 8009870 <_Balloc+0x28>
 8009852:	2010      	movs	r0, #16
 8009854:	f7ff ffe2 	bl	800981c <malloc>
 8009858:	4602      	mov	r2, r0
 800985a:	6260      	str	r0, [r4, #36]	; 0x24
 800985c:	b920      	cbnz	r0, 8009868 <_Balloc+0x20>
 800985e:	4b18      	ldr	r3, [pc, #96]	; (80098c0 <_Balloc+0x78>)
 8009860:	4818      	ldr	r0, [pc, #96]	; (80098c4 <_Balloc+0x7c>)
 8009862:	2166      	movs	r1, #102	; 0x66
 8009864:	f000 fc7a 	bl	800a15c <__assert_func>
 8009868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800986c:	6006      	str	r6, [r0, #0]
 800986e:	60c6      	str	r6, [r0, #12]
 8009870:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009872:	68f3      	ldr	r3, [r6, #12]
 8009874:	b183      	cbz	r3, 8009898 <_Balloc+0x50>
 8009876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800987e:	b9b8      	cbnz	r0, 80098b0 <_Balloc+0x68>
 8009880:	2101      	movs	r1, #1
 8009882:	fa01 f605 	lsl.w	r6, r1, r5
 8009886:	1d72      	adds	r2, r6, #5
 8009888:	0092      	lsls	r2, r2, #2
 800988a:	4620      	mov	r0, r4
 800988c:	f000 fb60 	bl	8009f50 <_calloc_r>
 8009890:	b160      	cbz	r0, 80098ac <_Balloc+0x64>
 8009892:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009896:	e00e      	b.n	80098b6 <_Balloc+0x6e>
 8009898:	2221      	movs	r2, #33	; 0x21
 800989a:	2104      	movs	r1, #4
 800989c:	4620      	mov	r0, r4
 800989e:	f000 fb57 	bl	8009f50 <_calloc_r>
 80098a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098a4:	60f0      	str	r0, [r6, #12]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1e4      	bne.n	8009876 <_Balloc+0x2e>
 80098ac:	2000      	movs	r0, #0
 80098ae:	bd70      	pop	{r4, r5, r6, pc}
 80098b0:	6802      	ldr	r2, [r0, #0]
 80098b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098b6:	2300      	movs	r3, #0
 80098b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098bc:	e7f7      	b.n	80098ae <_Balloc+0x66>
 80098be:	bf00      	nop
 80098c0:	0800be61 	.word	0x0800be61
 80098c4:	0800bee4 	.word	0x0800bee4

080098c8 <_Bfree>:
 80098c8:	b570      	push	{r4, r5, r6, lr}
 80098ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098cc:	4605      	mov	r5, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	b976      	cbnz	r6, 80098f0 <_Bfree+0x28>
 80098d2:	2010      	movs	r0, #16
 80098d4:	f7ff ffa2 	bl	800981c <malloc>
 80098d8:	4602      	mov	r2, r0
 80098da:	6268      	str	r0, [r5, #36]	; 0x24
 80098dc:	b920      	cbnz	r0, 80098e8 <_Bfree+0x20>
 80098de:	4b09      	ldr	r3, [pc, #36]	; (8009904 <_Bfree+0x3c>)
 80098e0:	4809      	ldr	r0, [pc, #36]	; (8009908 <_Bfree+0x40>)
 80098e2:	218a      	movs	r1, #138	; 0x8a
 80098e4:	f000 fc3a 	bl	800a15c <__assert_func>
 80098e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098ec:	6006      	str	r6, [r0, #0]
 80098ee:	60c6      	str	r6, [r0, #12]
 80098f0:	b13c      	cbz	r4, 8009902 <_Bfree+0x3a>
 80098f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098f4:	6862      	ldr	r2, [r4, #4]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098fc:	6021      	str	r1, [r4, #0]
 80098fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009902:	bd70      	pop	{r4, r5, r6, pc}
 8009904:	0800be61 	.word	0x0800be61
 8009908:	0800bee4 	.word	0x0800bee4

0800990c <__multadd>:
 800990c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009910:	690d      	ldr	r5, [r1, #16]
 8009912:	4607      	mov	r7, r0
 8009914:	460c      	mov	r4, r1
 8009916:	461e      	mov	r6, r3
 8009918:	f101 0c14 	add.w	ip, r1, #20
 800991c:	2000      	movs	r0, #0
 800991e:	f8dc 3000 	ldr.w	r3, [ip]
 8009922:	b299      	uxth	r1, r3
 8009924:	fb02 6101 	mla	r1, r2, r1, r6
 8009928:	0c1e      	lsrs	r6, r3, #16
 800992a:	0c0b      	lsrs	r3, r1, #16
 800992c:	fb02 3306 	mla	r3, r2, r6, r3
 8009930:	b289      	uxth	r1, r1
 8009932:	3001      	adds	r0, #1
 8009934:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009938:	4285      	cmp	r5, r0
 800993a:	f84c 1b04 	str.w	r1, [ip], #4
 800993e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009942:	dcec      	bgt.n	800991e <__multadd+0x12>
 8009944:	b30e      	cbz	r6, 800998a <__multadd+0x7e>
 8009946:	68a3      	ldr	r3, [r4, #8]
 8009948:	42ab      	cmp	r3, r5
 800994a:	dc19      	bgt.n	8009980 <__multadd+0x74>
 800994c:	6861      	ldr	r1, [r4, #4]
 800994e:	4638      	mov	r0, r7
 8009950:	3101      	adds	r1, #1
 8009952:	f7ff ff79 	bl	8009848 <_Balloc>
 8009956:	4680      	mov	r8, r0
 8009958:	b928      	cbnz	r0, 8009966 <__multadd+0x5a>
 800995a:	4602      	mov	r2, r0
 800995c:	4b0c      	ldr	r3, [pc, #48]	; (8009990 <__multadd+0x84>)
 800995e:	480d      	ldr	r0, [pc, #52]	; (8009994 <__multadd+0x88>)
 8009960:	21b5      	movs	r1, #181	; 0xb5
 8009962:	f000 fbfb 	bl	800a15c <__assert_func>
 8009966:	6922      	ldr	r2, [r4, #16]
 8009968:	3202      	adds	r2, #2
 800996a:	f104 010c 	add.w	r1, r4, #12
 800996e:	0092      	lsls	r2, r2, #2
 8009970:	300c      	adds	r0, #12
 8009972:	f7ff ff5b 	bl	800982c <memcpy>
 8009976:	4621      	mov	r1, r4
 8009978:	4638      	mov	r0, r7
 800997a:	f7ff ffa5 	bl	80098c8 <_Bfree>
 800997e:	4644      	mov	r4, r8
 8009980:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009984:	3501      	adds	r5, #1
 8009986:	615e      	str	r6, [r3, #20]
 8009988:	6125      	str	r5, [r4, #16]
 800998a:	4620      	mov	r0, r4
 800998c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009990:	0800bed3 	.word	0x0800bed3
 8009994:	0800bee4 	.word	0x0800bee4

08009998 <__hi0bits>:
 8009998:	0c03      	lsrs	r3, r0, #16
 800999a:	041b      	lsls	r3, r3, #16
 800999c:	b9d3      	cbnz	r3, 80099d4 <__hi0bits+0x3c>
 800999e:	0400      	lsls	r0, r0, #16
 80099a0:	2310      	movs	r3, #16
 80099a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80099a6:	bf04      	itt	eq
 80099a8:	0200      	lsleq	r0, r0, #8
 80099aa:	3308      	addeq	r3, #8
 80099ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80099b0:	bf04      	itt	eq
 80099b2:	0100      	lsleq	r0, r0, #4
 80099b4:	3304      	addeq	r3, #4
 80099b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80099ba:	bf04      	itt	eq
 80099bc:	0080      	lsleq	r0, r0, #2
 80099be:	3302      	addeq	r3, #2
 80099c0:	2800      	cmp	r0, #0
 80099c2:	db05      	blt.n	80099d0 <__hi0bits+0x38>
 80099c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80099c8:	f103 0301 	add.w	r3, r3, #1
 80099cc:	bf08      	it	eq
 80099ce:	2320      	moveq	r3, #32
 80099d0:	4618      	mov	r0, r3
 80099d2:	4770      	bx	lr
 80099d4:	2300      	movs	r3, #0
 80099d6:	e7e4      	b.n	80099a2 <__hi0bits+0xa>

080099d8 <__lo0bits>:
 80099d8:	6803      	ldr	r3, [r0, #0]
 80099da:	f013 0207 	ands.w	r2, r3, #7
 80099de:	4601      	mov	r1, r0
 80099e0:	d00b      	beq.n	80099fa <__lo0bits+0x22>
 80099e2:	07da      	lsls	r2, r3, #31
 80099e4:	d423      	bmi.n	8009a2e <__lo0bits+0x56>
 80099e6:	0798      	lsls	r0, r3, #30
 80099e8:	bf49      	itett	mi
 80099ea:	085b      	lsrmi	r3, r3, #1
 80099ec:	089b      	lsrpl	r3, r3, #2
 80099ee:	2001      	movmi	r0, #1
 80099f0:	600b      	strmi	r3, [r1, #0]
 80099f2:	bf5c      	itt	pl
 80099f4:	600b      	strpl	r3, [r1, #0]
 80099f6:	2002      	movpl	r0, #2
 80099f8:	4770      	bx	lr
 80099fa:	b298      	uxth	r0, r3
 80099fc:	b9a8      	cbnz	r0, 8009a2a <__lo0bits+0x52>
 80099fe:	0c1b      	lsrs	r3, r3, #16
 8009a00:	2010      	movs	r0, #16
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	b90a      	cbnz	r2, 8009a0a <__lo0bits+0x32>
 8009a06:	3008      	adds	r0, #8
 8009a08:	0a1b      	lsrs	r3, r3, #8
 8009a0a:	071a      	lsls	r2, r3, #28
 8009a0c:	bf04      	itt	eq
 8009a0e:	091b      	lsreq	r3, r3, #4
 8009a10:	3004      	addeq	r0, #4
 8009a12:	079a      	lsls	r2, r3, #30
 8009a14:	bf04      	itt	eq
 8009a16:	089b      	lsreq	r3, r3, #2
 8009a18:	3002      	addeq	r0, #2
 8009a1a:	07da      	lsls	r2, r3, #31
 8009a1c:	d403      	bmi.n	8009a26 <__lo0bits+0x4e>
 8009a1e:	085b      	lsrs	r3, r3, #1
 8009a20:	f100 0001 	add.w	r0, r0, #1
 8009a24:	d005      	beq.n	8009a32 <__lo0bits+0x5a>
 8009a26:	600b      	str	r3, [r1, #0]
 8009a28:	4770      	bx	lr
 8009a2a:	4610      	mov	r0, r2
 8009a2c:	e7e9      	b.n	8009a02 <__lo0bits+0x2a>
 8009a2e:	2000      	movs	r0, #0
 8009a30:	4770      	bx	lr
 8009a32:	2020      	movs	r0, #32
 8009a34:	4770      	bx	lr
	...

08009a38 <__i2b>:
 8009a38:	b510      	push	{r4, lr}
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	f7ff ff03 	bl	8009848 <_Balloc>
 8009a42:	4602      	mov	r2, r0
 8009a44:	b928      	cbnz	r0, 8009a52 <__i2b+0x1a>
 8009a46:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <__i2b+0x24>)
 8009a48:	4805      	ldr	r0, [pc, #20]	; (8009a60 <__i2b+0x28>)
 8009a4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a4e:	f000 fb85 	bl	800a15c <__assert_func>
 8009a52:	2301      	movs	r3, #1
 8009a54:	6144      	str	r4, [r0, #20]
 8009a56:	6103      	str	r3, [r0, #16]
 8009a58:	bd10      	pop	{r4, pc}
 8009a5a:	bf00      	nop
 8009a5c:	0800bed3 	.word	0x0800bed3
 8009a60:	0800bee4 	.word	0x0800bee4

08009a64 <__multiply>:
 8009a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	4691      	mov	r9, r2
 8009a6a:	690a      	ldr	r2, [r1, #16]
 8009a6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	bfb8      	it	lt
 8009a74:	460b      	movlt	r3, r1
 8009a76:	460c      	mov	r4, r1
 8009a78:	bfbc      	itt	lt
 8009a7a:	464c      	movlt	r4, r9
 8009a7c:	4699      	movlt	r9, r3
 8009a7e:	6927      	ldr	r7, [r4, #16]
 8009a80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a84:	68a3      	ldr	r3, [r4, #8]
 8009a86:	6861      	ldr	r1, [r4, #4]
 8009a88:	eb07 060a 	add.w	r6, r7, sl
 8009a8c:	42b3      	cmp	r3, r6
 8009a8e:	b085      	sub	sp, #20
 8009a90:	bfb8      	it	lt
 8009a92:	3101      	addlt	r1, #1
 8009a94:	f7ff fed8 	bl	8009848 <_Balloc>
 8009a98:	b930      	cbnz	r0, 8009aa8 <__multiply+0x44>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	4b44      	ldr	r3, [pc, #272]	; (8009bb0 <__multiply+0x14c>)
 8009a9e:	4845      	ldr	r0, [pc, #276]	; (8009bb4 <__multiply+0x150>)
 8009aa0:	f240 115d 	movw	r1, #349	; 0x15d
 8009aa4:	f000 fb5a 	bl	800a15c <__assert_func>
 8009aa8:	f100 0514 	add.w	r5, r0, #20
 8009aac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ab0:	462b      	mov	r3, r5
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	4543      	cmp	r3, r8
 8009ab6:	d321      	bcc.n	8009afc <__multiply+0x98>
 8009ab8:	f104 0314 	add.w	r3, r4, #20
 8009abc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ac0:	f109 0314 	add.w	r3, r9, #20
 8009ac4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ac8:	9202      	str	r2, [sp, #8]
 8009aca:	1b3a      	subs	r2, r7, r4
 8009acc:	3a15      	subs	r2, #21
 8009ace:	f022 0203 	bic.w	r2, r2, #3
 8009ad2:	3204      	adds	r2, #4
 8009ad4:	f104 0115 	add.w	r1, r4, #21
 8009ad8:	428f      	cmp	r7, r1
 8009ada:	bf38      	it	cc
 8009adc:	2204      	movcc	r2, #4
 8009ade:	9201      	str	r2, [sp, #4]
 8009ae0:	9a02      	ldr	r2, [sp, #8]
 8009ae2:	9303      	str	r3, [sp, #12]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d80c      	bhi.n	8009b02 <__multiply+0x9e>
 8009ae8:	2e00      	cmp	r6, #0
 8009aea:	dd03      	ble.n	8009af4 <__multiply+0x90>
 8009aec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d05a      	beq.n	8009baa <__multiply+0x146>
 8009af4:	6106      	str	r6, [r0, #16]
 8009af6:	b005      	add	sp, #20
 8009af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afc:	f843 2b04 	str.w	r2, [r3], #4
 8009b00:	e7d8      	b.n	8009ab4 <__multiply+0x50>
 8009b02:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b06:	f1ba 0f00 	cmp.w	sl, #0
 8009b0a:	d024      	beq.n	8009b56 <__multiply+0xf2>
 8009b0c:	f104 0e14 	add.w	lr, r4, #20
 8009b10:	46a9      	mov	r9, r5
 8009b12:	f04f 0c00 	mov.w	ip, #0
 8009b16:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b1a:	f8d9 1000 	ldr.w	r1, [r9]
 8009b1e:	fa1f fb82 	uxth.w	fp, r2
 8009b22:	b289      	uxth	r1, r1
 8009b24:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8009b30:	4461      	add	r1, ip
 8009b32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b36:	fb0a c20b 	mla	r2, sl, fp, ip
 8009b3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b3e:	b289      	uxth	r1, r1
 8009b40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b44:	4577      	cmp	r7, lr
 8009b46:	f849 1b04 	str.w	r1, [r9], #4
 8009b4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b4e:	d8e2      	bhi.n	8009b16 <__multiply+0xb2>
 8009b50:	9a01      	ldr	r2, [sp, #4]
 8009b52:	f845 c002 	str.w	ip, [r5, r2]
 8009b56:	9a03      	ldr	r2, [sp, #12]
 8009b58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	f1b9 0f00 	cmp.w	r9, #0
 8009b62:	d020      	beq.n	8009ba6 <__multiply+0x142>
 8009b64:	6829      	ldr	r1, [r5, #0]
 8009b66:	f104 0c14 	add.w	ip, r4, #20
 8009b6a:	46ae      	mov	lr, r5
 8009b6c:	f04f 0a00 	mov.w	sl, #0
 8009b70:	f8bc b000 	ldrh.w	fp, [ip]
 8009b74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b78:	fb09 220b 	mla	r2, r9, fp, r2
 8009b7c:	4492      	add	sl, r2
 8009b7e:	b289      	uxth	r1, r1
 8009b80:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009b84:	f84e 1b04 	str.w	r1, [lr], #4
 8009b88:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b8c:	f8be 1000 	ldrh.w	r1, [lr]
 8009b90:	0c12      	lsrs	r2, r2, #16
 8009b92:	fb09 1102 	mla	r1, r9, r2, r1
 8009b96:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009b9a:	4567      	cmp	r7, ip
 8009b9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ba0:	d8e6      	bhi.n	8009b70 <__multiply+0x10c>
 8009ba2:	9a01      	ldr	r2, [sp, #4]
 8009ba4:	50a9      	str	r1, [r5, r2]
 8009ba6:	3504      	adds	r5, #4
 8009ba8:	e79a      	b.n	8009ae0 <__multiply+0x7c>
 8009baa:	3e01      	subs	r6, #1
 8009bac:	e79c      	b.n	8009ae8 <__multiply+0x84>
 8009bae:	bf00      	nop
 8009bb0:	0800bed3 	.word	0x0800bed3
 8009bb4:	0800bee4 	.word	0x0800bee4

08009bb8 <__pow5mult>:
 8009bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bbc:	4615      	mov	r5, r2
 8009bbe:	f012 0203 	ands.w	r2, r2, #3
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	460f      	mov	r7, r1
 8009bc6:	d007      	beq.n	8009bd8 <__pow5mult+0x20>
 8009bc8:	4c25      	ldr	r4, [pc, #148]	; (8009c60 <__pow5mult+0xa8>)
 8009bca:	3a01      	subs	r2, #1
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bd2:	f7ff fe9b 	bl	800990c <__multadd>
 8009bd6:	4607      	mov	r7, r0
 8009bd8:	10ad      	asrs	r5, r5, #2
 8009bda:	d03d      	beq.n	8009c58 <__pow5mult+0xa0>
 8009bdc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009bde:	b97c      	cbnz	r4, 8009c00 <__pow5mult+0x48>
 8009be0:	2010      	movs	r0, #16
 8009be2:	f7ff fe1b 	bl	800981c <malloc>
 8009be6:	4602      	mov	r2, r0
 8009be8:	6270      	str	r0, [r6, #36]	; 0x24
 8009bea:	b928      	cbnz	r0, 8009bf8 <__pow5mult+0x40>
 8009bec:	4b1d      	ldr	r3, [pc, #116]	; (8009c64 <__pow5mult+0xac>)
 8009bee:	481e      	ldr	r0, [pc, #120]	; (8009c68 <__pow5mult+0xb0>)
 8009bf0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009bf4:	f000 fab2 	bl	800a15c <__assert_func>
 8009bf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bfc:	6004      	str	r4, [r0, #0]
 8009bfe:	60c4      	str	r4, [r0, #12]
 8009c00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c08:	b94c      	cbnz	r4, 8009c1e <__pow5mult+0x66>
 8009c0a:	f240 2171 	movw	r1, #625	; 0x271
 8009c0e:	4630      	mov	r0, r6
 8009c10:	f7ff ff12 	bl	8009a38 <__i2b>
 8009c14:	2300      	movs	r3, #0
 8009c16:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	6003      	str	r3, [r0, #0]
 8009c1e:	f04f 0900 	mov.w	r9, #0
 8009c22:	07eb      	lsls	r3, r5, #31
 8009c24:	d50a      	bpl.n	8009c3c <__pow5mult+0x84>
 8009c26:	4639      	mov	r1, r7
 8009c28:	4622      	mov	r2, r4
 8009c2a:	4630      	mov	r0, r6
 8009c2c:	f7ff ff1a 	bl	8009a64 <__multiply>
 8009c30:	4639      	mov	r1, r7
 8009c32:	4680      	mov	r8, r0
 8009c34:	4630      	mov	r0, r6
 8009c36:	f7ff fe47 	bl	80098c8 <_Bfree>
 8009c3a:	4647      	mov	r7, r8
 8009c3c:	106d      	asrs	r5, r5, #1
 8009c3e:	d00b      	beq.n	8009c58 <__pow5mult+0xa0>
 8009c40:	6820      	ldr	r0, [r4, #0]
 8009c42:	b938      	cbnz	r0, 8009c54 <__pow5mult+0x9c>
 8009c44:	4622      	mov	r2, r4
 8009c46:	4621      	mov	r1, r4
 8009c48:	4630      	mov	r0, r6
 8009c4a:	f7ff ff0b 	bl	8009a64 <__multiply>
 8009c4e:	6020      	str	r0, [r4, #0]
 8009c50:	f8c0 9000 	str.w	r9, [r0]
 8009c54:	4604      	mov	r4, r0
 8009c56:	e7e4      	b.n	8009c22 <__pow5mult+0x6a>
 8009c58:	4638      	mov	r0, r7
 8009c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c5e:	bf00      	nop
 8009c60:	0800c030 	.word	0x0800c030
 8009c64:	0800be61 	.word	0x0800be61
 8009c68:	0800bee4 	.word	0x0800bee4

08009c6c <__lshift>:
 8009c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c70:	460c      	mov	r4, r1
 8009c72:	6849      	ldr	r1, [r1, #4]
 8009c74:	6923      	ldr	r3, [r4, #16]
 8009c76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c7a:	68a3      	ldr	r3, [r4, #8]
 8009c7c:	4607      	mov	r7, r0
 8009c7e:	4691      	mov	r9, r2
 8009c80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c84:	f108 0601 	add.w	r6, r8, #1
 8009c88:	42b3      	cmp	r3, r6
 8009c8a:	db0b      	blt.n	8009ca4 <__lshift+0x38>
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	f7ff fddb 	bl	8009848 <_Balloc>
 8009c92:	4605      	mov	r5, r0
 8009c94:	b948      	cbnz	r0, 8009caa <__lshift+0x3e>
 8009c96:	4602      	mov	r2, r0
 8009c98:	4b2a      	ldr	r3, [pc, #168]	; (8009d44 <__lshift+0xd8>)
 8009c9a:	482b      	ldr	r0, [pc, #172]	; (8009d48 <__lshift+0xdc>)
 8009c9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ca0:	f000 fa5c 	bl	800a15c <__assert_func>
 8009ca4:	3101      	adds	r1, #1
 8009ca6:	005b      	lsls	r3, r3, #1
 8009ca8:	e7ee      	b.n	8009c88 <__lshift+0x1c>
 8009caa:	2300      	movs	r3, #0
 8009cac:	f100 0114 	add.w	r1, r0, #20
 8009cb0:	f100 0210 	add.w	r2, r0, #16
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	4553      	cmp	r3, sl
 8009cb8:	db37      	blt.n	8009d2a <__lshift+0xbe>
 8009cba:	6920      	ldr	r0, [r4, #16]
 8009cbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cc0:	f104 0314 	add.w	r3, r4, #20
 8009cc4:	f019 091f 	ands.w	r9, r9, #31
 8009cc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ccc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009cd0:	d02f      	beq.n	8009d32 <__lshift+0xc6>
 8009cd2:	f1c9 0e20 	rsb	lr, r9, #32
 8009cd6:	468a      	mov	sl, r1
 8009cd8:	f04f 0c00 	mov.w	ip, #0
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	fa02 f209 	lsl.w	r2, r2, r9
 8009ce2:	ea42 020c 	orr.w	r2, r2, ip
 8009ce6:	f84a 2b04 	str.w	r2, [sl], #4
 8009cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cee:	4298      	cmp	r0, r3
 8009cf0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009cf4:	d8f2      	bhi.n	8009cdc <__lshift+0x70>
 8009cf6:	1b03      	subs	r3, r0, r4
 8009cf8:	3b15      	subs	r3, #21
 8009cfa:	f023 0303 	bic.w	r3, r3, #3
 8009cfe:	3304      	adds	r3, #4
 8009d00:	f104 0215 	add.w	r2, r4, #21
 8009d04:	4290      	cmp	r0, r2
 8009d06:	bf38      	it	cc
 8009d08:	2304      	movcc	r3, #4
 8009d0a:	f841 c003 	str.w	ip, [r1, r3]
 8009d0e:	f1bc 0f00 	cmp.w	ip, #0
 8009d12:	d001      	beq.n	8009d18 <__lshift+0xac>
 8009d14:	f108 0602 	add.w	r6, r8, #2
 8009d18:	3e01      	subs	r6, #1
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	612e      	str	r6, [r5, #16]
 8009d1e:	4621      	mov	r1, r4
 8009d20:	f7ff fdd2 	bl	80098c8 <_Bfree>
 8009d24:	4628      	mov	r0, r5
 8009d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d2e:	3301      	adds	r3, #1
 8009d30:	e7c1      	b.n	8009cb6 <__lshift+0x4a>
 8009d32:	3904      	subs	r1, #4
 8009d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d38:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d3c:	4298      	cmp	r0, r3
 8009d3e:	d8f9      	bhi.n	8009d34 <__lshift+0xc8>
 8009d40:	e7ea      	b.n	8009d18 <__lshift+0xac>
 8009d42:	bf00      	nop
 8009d44:	0800bed3 	.word	0x0800bed3
 8009d48:	0800bee4 	.word	0x0800bee4

08009d4c <__mcmp>:
 8009d4c:	b530      	push	{r4, r5, lr}
 8009d4e:	6902      	ldr	r2, [r0, #16]
 8009d50:	690c      	ldr	r4, [r1, #16]
 8009d52:	1b12      	subs	r2, r2, r4
 8009d54:	d10e      	bne.n	8009d74 <__mcmp+0x28>
 8009d56:	f100 0314 	add.w	r3, r0, #20
 8009d5a:	3114      	adds	r1, #20
 8009d5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d6c:	42a5      	cmp	r5, r4
 8009d6e:	d003      	beq.n	8009d78 <__mcmp+0x2c>
 8009d70:	d305      	bcc.n	8009d7e <__mcmp+0x32>
 8009d72:	2201      	movs	r2, #1
 8009d74:	4610      	mov	r0, r2
 8009d76:	bd30      	pop	{r4, r5, pc}
 8009d78:	4283      	cmp	r3, r0
 8009d7a:	d3f3      	bcc.n	8009d64 <__mcmp+0x18>
 8009d7c:	e7fa      	b.n	8009d74 <__mcmp+0x28>
 8009d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d82:	e7f7      	b.n	8009d74 <__mcmp+0x28>

08009d84 <__mdiff>:
 8009d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d88:	460c      	mov	r4, r1
 8009d8a:	4606      	mov	r6, r0
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	4620      	mov	r0, r4
 8009d90:	4690      	mov	r8, r2
 8009d92:	f7ff ffdb 	bl	8009d4c <__mcmp>
 8009d96:	1e05      	subs	r5, r0, #0
 8009d98:	d110      	bne.n	8009dbc <__mdiff+0x38>
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f7ff fd53 	bl	8009848 <_Balloc>
 8009da2:	b930      	cbnz	r0, 8009db2 <__mdiff+0x2e>
 8009da4:	4b3a      	ldr	r3, [pc, #232]	; (8009e90 <__mdiff+0x10c>)
 8009da6:	4602      	mov	r2, r0
 8009da8:	f240 2132 	movw	r1, #562	; 0x232
 8009dac:	4839      	ldr	r0, [pc, #228]	; (8009e94 <__mdiff+0x110>)
 8009dae:	f000 f9d5 	bl	800a15c <__assert_func>
 8009db2:	2301      	movs	r3, #1
 8009db4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dbc:	bfa4      	itt	ge
 8009dbe:	4643      	movge	r3, r8
 8009dc0:	46a0      	movge	r8, r4
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009dc8:	bfa6      	itte	ge
 8009dca:	461c      	movge	r4, r3
 8009dcc:	2500      	movge	r5, #0
 8009dce:	2501      	movlt	r5, #1
 8009dd0:	f7ff fd3a 	bl	8009848 <_Balloc>
 8009dd4:	b920      	cbnz	r0, 8009de0 <__mdiff+0x5c>
 8009dd6:	4b2e      	ldr	r3, [pc, #184]	; (8009e90 <__mdiff+0x10c>)
 8009dd8:	4602      	mov	r2, r0
 8009dda:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009dde:	e7e5      	b.n	8009dac <__mdiff+0x28>
 8009de0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009de4:	6926      	ldr	r6, [r4, #16]
 8009de6:	60c5      	str	r5, [r0, #12]
 8009de8:	f104 0914 	add.w	r9, r4, #20
 8009dec:	f108 0514 	add.w	r5, r8, #20
 8009df0:	f100 0e14 	add.w	lr, r0, #20
 8009df4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009df8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009dfc:	f108 0210 	add.w	r2, r8, #16
 8009e00:	46f2      	mov	sl, lr
 8009e02:	2100      	movs	r1, #0
 8009e04:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e0c:	fa1f f883 	uxth.w	r8, r3
 8009e10:	fa11 f18b 	uxtah	r1, r1, fp
 8009e14:	0c1b      	lsrs	r3, r3, #16
 8009e16:	eba1 0808 	sub.w	r8, r1, r8
 8009e1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e22:	fa1f f888 	uxth.w	r8, r8
 8009e26:	1419      	asrs	r1, r3, #16
 8009e28:	454e      	cmp	r6, r9
 8009e2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e2e:	f84a 3b04 	str.w	r3, [sl], #4
 8009e32:	d8e7      	bhi.n	8009e04 <__mdiff+0x80>
 8009e34:	1b33      	subs	r3, r6, r4
 8009e36:	3b15      	subs	r3, #21
 8009e38:	f023 0303 	bic.w	r3, r3, #3
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	3415      	adds	r4, #21
 8009e40:	42a6      	cmp	r6, r4
 8009e42:	bf38      	it	cc
 8009e44:	2304      	movcc	r3, #4
 8009e46:	441d      	add	r5, r3
 8009e48:	4473      	add	r3, lr
 8009e4a:	469e      	mov	lr, r3
 8009e4c:	462e      	mov	r6, r5
 8009e4e:	4566      	cmp	r6, ip
 8009e50:	d30e      	bcc.n	8009e70 <__mdiff+0xec>
 8009e52:	f10c 0203 	add.w	r2, ip, #3
 8009e56:	1b52      	subs	r2, r2, r5
 8009e58:	f022 0203 	bic.w	r2, r2, #3
 8009e5c:	3d03      	subs	r5, #3
 8009e5e:	45ac      	cmp	ip, r5
 8009e60:	bf38      	it	cc
 8009e62:	2200      	movcc	r2, #0
 8009e64:	441a      	add	r2, r3
 8009e66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e6a:	b17b      	cbz	r3, 8009e8c <__mdiff+0x108>
 8009e6c:	6107      	str	r7, [r0, #16]
 8009e6e:	e7a3      	b.n	8009db8 <__mdiff+0x34>
 8009e70:	f856 8b04 	ldr.w	r8, [r6], #4
 8009e74:	fa11 f288 	uxtah	r2, r1, r8
 8009e78:	1414      	asrs	r4, r2, #16
 8009e7a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e7e:	b292      	uxth	r2, r2
 8009e80:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009e84:	f84e 2b04 	str.w	r2, [lr], #4
 8009e88:	1421      	asrs	r1, r4, #16
 8009e8a:	e7e0      	b.n	8009e4e <__mdiff+0xca>
 8009e8c:	3f01      	subs	r7, #1
 8009e8e:	e7ea      	b.n	8009e66 <__mdiff+0xe2>
 8009e90:	0800bed3 	.word	0x0800bed3
 8009e94:	0800bee4 	.word	0x0800bee4

08009e98 <__d2b>:
 8009e98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e9c:	4689      	mov	r9, r1
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	ec57 6b10 	vmov	r6, r7, d0
 8009ea4:	4690      	mov	r8, r2
 8009ea6:	f7ff fccf 	bl	8009848 <_Balloc>
 8009eaa:	4604      	mov	r4, r0
 8009eac:	b930      	cbnz	r0, 8009ebc <__d2b+0x24>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	4b25      	ldr	r3, [pc, #148]	; (8009f48 <__d2b+0xb0>)
 8009eb2:	4826      	ldr	r0, [pc, #152]	; (8009f4c <__d2b+0xb4>)
 8009eb4:	f240 310a 	movw	r1, #778	; 0x30a
 8009eb8:	f000 f950 	bl	800a15c <__assert_func>
 8009ebc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ec0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ec4:	bb35      	cbnz	r5, 8009f14 <__d2b+0x7c>
 8009ec6:	2e00      	cmp	r6, #0
 8009ec8:	9301      	str	r3, [sp, #4]
 8009eca:	d028      	beq.n	8009f1e <__d2b+0x86>
 8009ecc:	4668      	mov	r0, sp
 8009ece:	9600      	str	r6, [sp, #0]
 8009ed0:	f7ff fd82 	bl	80099d8 <__lo0bits>
 8009ed4:	9900      	ldr	r1, [sp, #0]
 8009ed6:	b300      	cbz	r0, 8009f1a <__d2b+0x82>
 8009ed8:	9a01      	ldr	r2, [sp, #4]
 8009eda:	f1c0 0320 	rsb	r3, r0, #32
 8009ede:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee2:	430b      	orrs	r3, r1
 8009ee4:	40c2      	lsrs	r2, r0
 8009ee6:	6163      	str	r3, [r4, #20]
 8009ee8:	9201      	str	r2, [sp, #4]
 8009eea:	9b01      	ldr	r3, [sp, #4]
 8009eec:	61a3      	str	r3, [r4, #24]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	bf14      	ite	ne
 8009ef2:	2202      	movne	r2, #2
 8009ef4:	2201      	moveq	r2, #1
 8009ef6:	6122      	str	r2, [r4, #16]
 8009ef8:	b1d5      	cbz	r5, 8009f30 <__d2b+0x98>
 8009efa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009efe:	4405      	add	r5, r0
 8009f00:	f8c9 5000 	str.w	r5, [r9]
 8009f04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f08:	f8c8 0000 	str.w	r0, [r8]
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	b003      	add	sp, #12
 8009f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f18:	e7d5      	b.n	8009ec6 <__d2b+0x2e>
 8009f1a:	6161      	str	r1, [r4, #20]
 8009f1c:	e7e5      	b.n	8009eea <__d2b+0x52>
 8009f1e:	a801      	add	r0, sp, #4
 8009f20:	f7ff fd5a 	bl	80099d8 <__lo0bits>
 8009f24:	9b01      	ldr	r3, [sp, #4]
 8009f26:	6163      	str	r3, [r4, #20]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	6122      	str	r2, [r4, #16]
 8009f2c:	3020      	adds	r0, #32
 8009f2e:	e7e3      	b.n	8009ef8 <__d2b+0x60>
 8009f30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f38:	f8c9 0000 	str.w	r0, [r9]
 8009f3c:	6918      	ldr	r0, [r3, #16]
 8009f3e:	f7ff fd2b 	bl	8009998 <__hi0bits>
 8009f42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f46:	e7df      	b.n	8009f08 <__d2b+0x70>
 8009f48:	0800bed3 	.word	0x0800bed3
 8009f4c:	0800bee4 	.word	0x0800bee4

08009f50 <_calloc_r>:
 8009f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f52:	fba1 2402 	umull	r2, r4, r1, r2
 8009f56:	b94c      	cbnz	r4, 8009f6c <_calloc_r+0x1c>
 8009f58:	4611      	mov	r1, r2
 8009f5a:	9201      	str	r2, [sp, #4]
 8009f5c:	f000 f87a 	bl	800a054 <_malloc_r>
 8009f60:	9a01      	ldr	r2, [sp, #4]
 8009f62:	4605      	mov	r5, r0
 8009f64:	b930      	cbnz	r0, 8009f74 <_calloc_r+0x24>
 8009f66:	4628      	mov	r0, r5
 8009f68:	b003      	add	sp, #12
 8009f6a:	bd30      	pop	{r4, r5, pc}
 8009f6c:	220c      	movs	r2, #12
 8009f6e:	6002      	str	r2, [r0, #0]
 8009f70:	2500      	movs	r5, #0
 8009f72:	e7f8      	b.n	8009f66 <_calloc_r+0x16>
 8009f74:	4621      	mov	r1, r4
 8009f76:	f7fe f95f 	bl	8008238 <memset>
 8009f7a:	e7f4      	b.n	8009f66 <_calloc_r+0x16>

08009f7c <_free_r>:
 8009f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f7e:	2900      	cmp	r1, #0
 8009f80:	d044      	beq.n	800a00c <_free_r+0x90>
 8009f82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f86:	9001      	str	r0, [sp, #4]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f1a1 0404 	sub.w	r4, r1, #4
 8009f8e:	bfb8      	it	lt
 8009f90:	18e4      	addlt	r4, r4, r3
 8009f92:	f000 f925 	bl	800a1e0 <__malloc_lock>
 8009f96:	4a1e      	ldr	r2, [pc, #120]	; (800a010 <_free_r+0x94>)
 8009f98:	9801      	ldr	r0, [sp, #4]
 8009f9a:	6813      	ldr	r3, [r2, #0]
 8009f9c:	b933      	cbnz	r3, 8009fac <_free_r+0x30>
 8009f9e:	6063      	str	r3, [r4, #4]
 8009fa0:	6014      	str	r4, [r2, #0]
 8009fa2:	b003      	add	sp, #12
 8009fa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fa8:	f000 b920 	b.w	800a1ec <__malloc_unlock>
 8009fac:	42a3      	cmp	r3, r4
 8009fae:	d908      	bls.n	8009fc2 <_free_r+0x46>
 8009fb0:	6825      	ldr	r5, [r4, #0]
 8009fb2:	1961      	adds	r1, r4, r5
 8009fb4:	428b      	cmp	r3, r1
 8009fb6:	bf01      	itttt	eq
 8009fb8:	6819      	ldreq	r1, [r3, #0]
 8009fba:	685b      	ldreq	r3, [r3, #4]
 8009fbc:	1949      	addeq	r1, r1, r5
 8009fbe:	6021      	streq	r1, [r4, #0]
 8009fc0:	e7ed      	b.n	8009f9e <_free_r+0x22>
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	b10b      	cbz	r3, 8009fcc <_free_r+0x50>
 8009fc8:	42a3      	cmp	r3, r4
 8009fca:	d9fa      	bls.n	8009fc2 <_free_r+0x46>
 8009fcc:	6811      	ldr	r1, [r2, #0]
 8009fce:	1855      	adds	r5, r2, r1
 8009fd0:	42a5      	cmp	r5, r4
 8009fd2:	d10b      	bne.n	8009fec <_free_r+0x70>
 8009fd4:	6824      	ldr	r4, [r4, #0]
 8009fd6:	4421      	add	r1, r4
 8009fd8:	1854      	adds	r4, r2, r1
 8009fda:	42a3      	cmp	r3, r4
 8009fdc:	6011      	str	r1, [r2, #0]
 8009fde:	d1e0      	bne.n	8009fa2 <_free_r+0x26>
 8009fe0:	681c      	ldr	r4, [r3, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	6053      	str	r3, [r2, #4]
 8009fe6:	4421      	add	r1, r4
 8009fe8:	6011      	str	r1, [r2, #0]
 8009fea:	e7da      	b.n	8009fa2 <_free_r+0x26>
 8009fec:	d902      	bls.n	8009ff4 <_free_r+0x78>
 8009fee:	230c      	movs	r3, #12
 8009ff0:	6003      	str	r3, [r0, #0]
 8009ff2:	e7d6      	b.n	8009fa2 <_free_r+0x26>
 8009ff4:	6825      	ldr	r5, [r4, #0]
 8009ff6:	1961      	adds	r1, r4, r5
 8009ff8:	428b      	cmp	r3, r1
 8009ffa:	bf04      	itt	eq
 8009ffc:	6819      	ldreq	r1, [r3, #0]
 8009ffe:	685b      	ldreq	r3, [r3, #4]
 800a000:	6063      	str	r3, [r4, #4]
 800a002:	bf04      	itt	eq
 800a004:	1949      	addeq	r1, r1, r5
 800a006:	6021      	streq	r1, [r4, #0]
 800a008:	6054      	str	r4, [r2, #4]
 800a00a:	e7ca      	b.n	8009fa2 <_free_r+0x26>
 800a00c:	b003      	add	sp, #12
 800a00e:	bd30      	pop	{r4, r5, pc}
 800a010:	200091d4 	.word	0x200091d4

0800a014 <sbrk_aligned>:
 800a014:	b570      	push	{r4, r5, r6, lr}
 800a016:	4e0e      	ldr	r6, [pc, #56]	; (800a050 <sbrk_aligned+0x3c>)
 800a018:	460c      	mov	r4, r1
 800a01a:	6831      	ldr	r1, [r6, #0]
 800a01c:	4605      	mov	r5, r0
 800a01e:	b911      	cbnz	r1, 800a026 <sbrk_aligned+0x12>
 800a020:	f000 f88c 	bl	800a13c <_sbrk_r>
 800a024:	6030      	str	r0, [r6, #0]
 800a026:	4621      	mov	r1, r4
 800a028:	4628      	mov	r0, r5
 800a02a:	f000 f887 	bl	800a13c <_sbrk_r>
 800a02e:	1c43      	adds	r3, r0, #1
 800a030:	d00a      	beq.n	800a048 <sbrk_aligned+0x34>
 800a032:	1cc4      	adds	r4, r0, #3
 800a034:	f024 0403 	bic.w	r4, r4, #3
 800a038:	42a0      	cmp	r0, r4
 800a03a:	d007      	beq.n	800a04c <sbrk_aligned+0x38>
 800a03c:	1a21      	subs	r1, r4, r0
 800a03e:	4628      	mov	r0, r5
 800a040:	f000 f87c 	bl	800a13c <_sbrk_r>
 800a044:	3001      	adds	r0, #1
 800a046:	d101      	bne.n	800a04c <sbrk_aligned+0x38>
 800a048:	f04f 34ff 	mov.w	r4, #4294967295
 800a04c:	4620      	mov	r0, r4
 800a04e:	bd70      	pop	{r4, r5, r6, pc}
 800a050:	200091d8 	.word	0x200091d8

0800a054 <_malloc_r>:
 800a054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a058:	1ccd      	adds	r5, r1, #3
 800a05a:	f025 0503 	bic.w	r5, r5, #3
 800a05e:	3508      	adds	r5, #8
 800a060:	2d0c      	cmp	r5, #12
 800a062:	bf38      	it	cc
 800a064:	250c      	movcc	r5, #12
 800a066:	2d00      	cmp	r5, #0
 800a068:	4607      	mov	r7, r0
 800a06a:	db01      	blt.n	800a070 <_malloc_r+0x1c>
 800a06c:	42a9      	cmp	r1, r5
 800a06e:	d905      	bls.n	800a07c <_malloc_r+0x28>
 800a070:	230c      	movs	r3, #12
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	2600      	movs	r6, #0
 800a076:	4630      	mov	r0, r6
 800a078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a07c:	4e2e      	ldr	r6, [pc, #184]	; (800a138 <_malloc_r+0xe4>)
 800a07e:	f000 f8af 	bl	800a1e0 <__malloc_lock>
 800a082:	6833      	ldr	r3, [r6, #0]
 800a084:	461c      	mov	r4, r3
 800a086:	bb34      	cbnz	r4, 800a0d6 <_malloc_r+0x82>
 800a088:	4629      	mov	r1, r5
 800a08a:	4638      	mov	r0, r7
 800a08c:	f7ff ffc2 	bl	800a014 <sbrk_aligned>
 800a090:	1c43      	adds	r3, r0, #1
 800a092:	4604      	mov	r4, r0
 800a094:	d14d      	bne.n	800a132 <_malloc_r+0xde>
 800a096:	6834      	ldr	r4, [r6, #0]
 800a098:	4626      	mov	r6, r4
 800a09a:	2e00      	cmp	r6, #0
 800a09c:	d140      	bne.n	800a120 <_malloc_r+0xcc>
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	4631      	mov	r1, r6
 800a0a2:	4638      	mov	r0, r7
 800a0a4:	eb04 0803 	add.w	r8, r4, r3
 800a0a8:	f000 f848 	bl	800a13c <_sbrk_r>
 800a0ac:	4580      	cmp	r8, r0
 800a0ae:	d13a      	bne.n	800a126 <_malloc_r+0xd2>
 800a0b0:	6821      	ldr	r1, [r4, #0]
 800a0b2:	3503      	adds	r5, #3
 800a0b4:	1a6d      	subs	r5, r5, r1
 800a0b6:	f025 0503 	bic.w	r5, r5, #3
 800a0ba:	3508      	adds	r5, #8
 800a0bc:	2d0c      	cmp	r5, #12
 800a0be:	bf38      	it	cc
 800a0c0:	250c      	movcc	r5, #12
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	4638      	mov	r0, r7
 800a0c6:	f7ff ffa5 	bl	800a014 <sbrk_aligned>
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	d02b      	beq.n	800a126 <_malloc_r+0xd2>
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	442b      	add	r3, r5
 800a0d2:	6023      	str	r3, [r4, #0]
 800a0d4:	e00e      	b.n	800a0f4 <_malloc_r+0xa0>
 800a0d6:	6822      	ldr	r2, [r4, #0]
 800a0d8:	1b52      	subs	r2, r2, r5
 800a0da:	d41e      	bmi.n	800a11a <_malloc_r+0xc6>
 800a0dc:	2a0b      	cmp	r2, #11
 800a0de:	d916      	bls.n	800a10e <_malloc_r+0xba>
 800a0e0:	1961      	adds	r1, r4, r5
 800a0e2:	42a3      	cmp	r3, r4
 800a0e4:	6025      	str	r5, [r4, #0]
 800a0e6:	bf18      	it	ne
 800a0e8:	6059      	strne	r1, [r3, #4]
 800a0ea:	6863      	ldr	r3, [r4, #4]
 800a0ec:	bf08      	it	eq
 800a0ee:	6031      	streq	r1, [r6, #0]
 800a0f0:	5162      	str	r2, [r4, r5]
 800a0f2:	604b      	str	r3, [r1, #4]
 800a0f4:	4638      	mov	r0, r7
 800a0f6:	f104 060b 	add.w	r6, r4, #11
 800a0fa:	f000 f877 	bl	800a1ec <__malloc_unlock>
 800a0fe:	f026 0607 	bic.w	r6, r6, #7
 800a102:	1d23      	adds	r3, r4, #4
 800a104:	1af2      	subs	r2, r6, r3
 800a106:	d0b6      	beq.n	800a076 <_malloc_r+0x22>
 800a108:	1b9b      	subs	r3, r3, r6
 800a10a:	50a3      	str	r3, [r4, r2]
 800a10c:	e7b3      	b.n	800a076 <_malloc_r+0x22>
 800a10e:	6862      	ldr	r2, [r4, #4]
 800a110:	42a3      	cmp	r3, r4
 800a112:	bf0c      	ite	eq
 800a114:	6032      	streq	r2, [r6, #0]
 800a116:	605a      	strne	r2, [r3, #4]
 800a118:	e7ec      	b.n	800a0f4 <_malloc_r+0xa0>
 800a11a:	4623      	mov	r3, r4
 800a11c:	6864      	ldr	r4, [r4, #4]
 800a11e:	e7b2      	b.n	800a086 <_malloc_r+0x32>
 800a120:	4634      	mov	r4, r6
 800a122:	6876      	ldr	r6, [r6, #4]
 800a124:	e7b9      	b.n	800a09a <_malloc_r+0x46>
 800a126:	230c      	movs	r3, #12
 800a128:	603b      	str	r3, [r7, #0]
 800a12a:	4638      	mov	r0, r7
 800a12c:	f000 f85e 	bl	800a1ec <__malloc_unlock>
 800a130:	e7a1      	b.n	800a076 <_malloc_r+0x22>
 800a132:	6025      	str	r5, [r4, #0]
 800a134:	e7de      	b.n	800a0f4 <_malloc_r+0xa0>
 800a136:	bf00      	nop
 800a138:	200091d4 	.word	0x200091d4

0800a13c <_sbrk_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4d06      	ldr	r5, [pc, #24]	; (800a158 <_sbrk_r+0x1c>)
 800a140:	2300      	movs	r3, #0
 800a142:	4604      	mov	r4, r0
 800a144:	4608      	mov	r0, r1
 800a146:	602b      	str	r3, [r5, #0]
 800a148:	f7f8 fec4 	bl	8002ed4 <_sbrk>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d102      	bne.n	800a156 <_sbrk_r+0x1a>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	b103      	cbz	r3, 800a156 <_sbrk_r+0x1a>
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	200091dc 	.word	0x200091dc

0800a15c <__assert_func>:
 800a15c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a15e:	4614      	mov	r4, r2
 800a160:	461a      	mov	r2, r3
 800a162:	4b09      	ldr	r3, [pc, #36]	; (800a188 <__assert_func+0x2c>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4605      	mov	r5, r0
 800a168:	68d8      	ldr	r0, [r3, #12]
 800a16a:	b14c      	cbz	r4, 800a180 <__assert_func+0x24>
 800a16c:	4b07      	ldr	r3, [pc, #28]	; (800a18c <__assert_func+0x30>)
 800a16e:	9100      	str	r1, [sp, #0]
 800a170:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a174:	4906      	ldr	r1, [pc, #24]	; (800a190 <__assert_func+0x34>)
 800a176:	462b      	mov	r3, r5
 800a178:	f000 f80e 	bl	800a198 <fiprintf>
 800a17c:	f000 fa64 	bl	800a648 <abort>
 800a180:	4b04      	ldr	r3, [pc, #16]	; (800a194 <__assert_func+0x38>)
 800a182:	461c      	mov	r4, r3
 800a184:	e7f3      	b.n	800a16e <__assert_func+0x12>
 800a186:	bf00      	nop
 800a188:	20000030 	.word	0x20000030
 800a18c:	0800c03c 	.word	0x0800c03c
 800a190:	0800c049 	.word	0x0800c049
 800a194:	0800c077 	.word	0x0800c077

0800a198 <fiprintf>:
 800a198:	b40e      	push	{r1, r2, r3}
 800a19a:	b503      	push	{r0, r1, lr}
 800a19c:	4601      	mov	r1, r0
 800a19e:	ab03      	add	r3, sp, #12
 800a1a0:	4805      	ldr	r0, [pc, #20]	; (800a1b8 <fiprintf+0x20>)
 800a1a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1a6:	6800      	ldr	r0, [r0, #0]
 800a1a8:	9301      	str	r3, [sp, #4]
 800a1aa:	f000 f84f 	bl	800a24c <_vfiprintf_r>
 800a1ae:	b002      	add	sp, #8
 800a1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1b4:	b003      	add	sp, #12
 800a1b6:	4770      	bx	lr
 800a1b8:	20000030 	.word	0x20000030

0800a1bc <__ascii_mbtowc>:
 800a1bc:	b082      	sub	sp, #8
 800a1be:	b901      	cbnz	r1, 800a1c2 <__ascii_mbtowc+0x6>
 800a1c0:	a901      	add	r1, sp, #4
 800a1c2:	b142      	cbz	r2, 800a1d6 <__ascii_mbtowc+0x1a>
 800a1c4:	b14b      	cbz	r3, 800a1da <__ascii_mbtowc+0x1e>
 800a1c6:	7813      	ldrb	r3, [r2, #0]
 800a1c8:	600b      	str	r3, [r1, #0]
 800a1ca:	7812      	ldrb	r2, [r2, #0]
 800a1cc:	1e10      	subs	r0, r2, #0
 800a1ce:	bf18      	it	ne
 800a1d0:	2001      	movne	r0, #1
 800a1d2:	b002      	add	sp, #8
 800a1d4:	4770      	bx	lr
 800a1d6:	4610      	mov	r0, r2
 800a1d8:	e7fb      	b.n	800a1d2 <__ascii_mbtowc+0x16>
 800a1da:	f06f 0001 	mvn.w	r0, #1
 800a1de:	e7f8      	b.n	800a1d2 <__ascii_mbtowc+0x16>

0800a1e0 <__malloc_lock>:
 800a1e0:	4801      	ldr	r0, [pc, #4]	; (800a1e8 <__malloc_lock+0x8>)
 800a1e2:	f000 bbf1 	b.w	800a9c8 <__retarget_lock_acquire_recursive>
 800a1e6:	bf00      	nop
 800a1e8:	200091e0 	.word	0x200091e0

0800a1ec <__malloc_unlock>:
 800a1ec:	4801      	ldr	r0, [pc, #4]	; (800a1f4 <__malloc_unlock+0x8>)
 800a1ee:	f000 bbec 	b.w	800a9ca <__retarget_lock_release_recursive>
 800a1f2:	bf00      	nop
 800a1f4:	200091e0 	.word	0x200091e0

0800a1f8 <__sfputc_r>:
 800a1f8:	6893      	ldr	r3, [r2, #8]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	b410      	push	{r4}
 800a200:	6093      	str	r3, [r2, #8]
 800a202:	da08      	bge.n	800a216 <__sfputc_r+0x1e>
 800a204:	6994      	ldr	r4, [r2, #24]
 800a206:	42a3      	cmp	r3, r4
 800a208:	db01      	blt.n	800a20e <__sfputc_r+0x16>
 800a20a:	290a      	cmp	r1, #10
 800a20c:	d103      	bne.n	800a216 <__sfputc_r+0x1e>
 800a20e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a212:	f000 b94b 	b.w	800a4ac <__swbuf_r>
 800a216:	6813      	ldr	r3, [r2, #0]
 800a218:	1c58      	adds	r0, r3, #1
 800a21a:	6010      	str	r0, [r2, #0]
 800a21c:	7019      	strb	r1, [r3, #0]
 800a21e:	4608      	mov	r0, r1
 800a220:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <__sfputs_r>:
 800a226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a228:	4606      	mov	r6, r0
 800a22a:	460f      	mov	r7, r1
 800a22c:	4614      	mov	r4, r2
 800a22e:	18d5      	adds	r5, r2, r3
 800a230:	42ac      	cmp	r4, r5
 800a232:	d101      	bne.n	800a238 <__sfputs_r+0x12>
 800a234:	2000      	movs	r0, #0
 800a236:	e007      	b.n	800a248 <__sfputs_r+0x22>
 800a238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a23c:	463a      	mov	r2, r7
 800a23e:	4630      	mov	r0, r6
 800a240:	f7ff ffda 	bl	800a1f8 <__sfputc_r>
 800a244:	1c43      	adds	r3, r0, #1
 800a246:	d1f3      	bne.n	800a230 <__sfputs_r+0xa>
 800a248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a24c <_vfiprintf_r>:
 800a24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a250:	460d      	mov	r5, r1
 800a252:	b09d      	sub	sp, #116	; 0x74
 800a254:	4614      	mov	r4, r2
 800a256:	4698      	mov	r8, r3
 800a258:	4606      	mov	r6, r0
 800a25a:	b118      	cbz	r0, 800a264 <_vfiprintf_r+0x18>
 800a25c:	6983      	ldr	r3, [r0, #24]
 800a25e:	b90b      	cbnz	r3, 800a264 <_vfiprintf_r+0x18>
 800a260:	f000 fb14 	bl	800a88c <__sinit>
 800a264:	4b89      	ldr	r3, [pc, #548]	; (800a48c <_vfiprintf_r+0x240>)
 800a266:	429d      	cmp	r5, r3
 800a268:	d11b      	bne.n	800a2a2 <_vfiprintf_r+0x56>
 800a26a:	6875      	ldr	r5, [r6, #4]
 800a26c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a26e:	07d9      	lsls	r1, r3, #31
 800a270:	d405      	bmi.n	800a27e <_vfiprintf_r+0x32>
 800a272:	89ab      	ldrh	r3, [r5, #12]
 800a274:	059a      	lsls	r2, r3, #22
 800a276:	d402      	bmi.n	800a27e <_vfiprintf_r+0x32>
 800a278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a27a:	f000 fba5 	bl	800a9c8 <__retarget_lock_acquire_recursive>
 800a27e:	89ab      	ldrh	r3, [r5, #12]
 800a280:	071b      	lsls	r3, r3, #28
 800a282:	d501      	bpl.n	800a288 <_vfiprintf_r+0x3c>
 800a284:	692b      	ldr	r3, [r5, #16]
 800a286:	b9eb      	cbnz	r3, 800a2c4 <_vfiprintf_r+0x78>
 800a288:	4629      	mov	r1, r5
 800a28a:	4630      	mov	r0, r6
 800a28c:	f000 f96e 	bl	800a56c <__swsetup_r>
 800a290:	b1c0      	cbz	r0, 800a2c4 <_vfiprintf_r+0x78>
 800a292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a294:	07dc      	lsls	r4, r3, #31
 800a296:	d50e      	bpl.n	800a2b6 <_vfiprintf_r+0x6a>
 800a298:	f04f 30ff 	mov.w	r0, #4294967295
 800a29c:	b01d      	add	sp, #116	; 0x74
 800a29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a2:	4b7b      	ldr	r3, [pc, #492]	; (800a490 <_vfiprintf_r+0x244>)
 800a2a4:	429d      	cmp	r5, r3
 800a2a6:	d101      	bne.n	800a2ac <_vfiprintf_r+0x60>
 800a2a8:	68b5      	ldr	r5, [r6, #8]
 800a2aa:	e7df      	b.n	800a26c <_vfiprintf_r+0x20>
 800a2ac:	4b79      	ldr	r3, [pc, #484]	; (800a494 <_vfiprintf_r+0x248>)
 800a2ae:	429d      	cmp	r5, r3
 800a2b0:	bf08      	it	eq
 800a2b2:	68f5      	ldreq	r5, [r6, #12]
 800a2b4:	e7da      	b.n	800a26c <_vfiprintf_r+0x20>
 800a2b6:	89ab      	ldrh	r3, [r5, #12]
 800a2b8:	0598      	lsls	r0, r3, #22
 800a2ba:	d4ed      	bmi.n	800a298 <_vfiprintf_r+0x4c>
 800a2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2be:	f000 fb84 	bl	800a9ca <__retarget_lock_release_recursive>
 800a2c2:	e7e9      	b.n	800a298 <_vfiprintf_r+0x4c>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c8:	2320      	movs	r3, #32
 800a2ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2d2:	2330      	movs	r3, #48	; 0x30
 800a2d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a498 <_vfiprintf_r+0x24c>
 800a2d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2dc:	f04f 0901 	mov.w	r9, #1
 800a2e0:	4623      	mov	r3, r4
 800a2e2:	469a      	mov	sl, r3
 800a2e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2e8:	b10a      	cbz	r2, 800a2ee <_vfiprintf_r+0xa2>
 800a2ea:	2a25      	cmp	r2, #37	; 0x25
 800a2ec:	d1f9      	bne.n	800a2e2 <_vfiprintf_r+0x96>
 800a2ee:	ebba 0b04 	subs.w	fp, sl, r4
 800a2f2:	d00b      	beq.n	800a30c <_vfiprintf_r+0xc0>
 800a2f4:	465b      	mov	r3, fp
 800a2f6:	4622      	mov	r2, r4
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	f7ff ff93 	bl	800a226 <__sfputs_r>
 800a300:	3001      	adds	r0, #1
 800a302:	f000 80aa 	beq.w	800a45a <_vfiprintf_r+0x20e>
 800a306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a308:	445a      	add	r2, fp
 800a30a:	9209      	str	r2, [sp, #36]	; 0x24
 800a30c:	f89a 3000 	ldrb.w	r3, [sl]
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 80a2 	beq.w	800a45a <_vfiprintf_r+0x20e>
 800a316:	2300      	movs	r3, #0
 800a318:	f04f 32ff 	mov.w	r2, #4294967295
 800a31c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a320:	f10a 0a01 	add.w	sl, sl, #1
 800a324:	9304      	str	r3, [sp, #16]
 800a326:	9307      	str	r3, [sp, #28]
 800a328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a32c:	931a      	str	r3, [sp, #104]	; 0x68
 800a32e:	4654      	mov	r4, sl
 800a330:	2205      	movs	r2, #5
 800a332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a336:	4858      	ldr	r0, [pc, #352]	; (800a498 <_vfiprintf_r+0x24c>)
 800a338:	f7f5 ff62 	bl	8000200 <memchr>
 800a33c:	9a04      	ldr	r2, [sp, #16]
 800a33e:	b9d8      	cbnz	r0, 800a378 <_vfiprintf_r+0x12c>
 800a340:	06d1      	lsls	r1, r2, #27
 800a342:	bf44      	itt	mi
 800a344:	2320      	movmi	r3, #32
 800a346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a34a:	0713      	lsls	r3, r2, #28
 800a34c:	bf44      	itt	mi
 800a34e:	232b      	movmi	r3, #43	; 0x2b
 800a350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a354:	f89a 3000 	ldrb.w	r3, [sl]
 800a358:	2b2a      	cmp	r3, #42	; 0x2a
 800a35a:	d015      	beq.n	800a388 <_vfiprintf_r+0x13c>
 800a35c:	9a07      	ldr	r2, [sp, #28]
 800a35e:	4654      	mov	r4, sl
 800a360:	2000      	movs	r0, #0
 800a362:	f04f 0c0a 	mov.w	ip, #10
 800a366:	4621      	mov	r1, r4
 800a368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a36c:	3b30      	subs	r3, #48	; 0x30
 800a36e:	2b09      	cmp	r3, #9
 800a370:	d94e      	bls.n	800a410 <_vfiprintf_r+0x1c4>
 800a372:	b1b0      	cbz	r0, 800a3a2 <_vfiprintf_r+0x156>
 800a374:	9207      	str	r2, [sp, #28]
 800a376:	e014      	b.n	800a3a2 <_vfiprintf_r+0x156>
 800a378:	eba0 0308 	sub.w	r3, r0, r8
 800a37c:	fa09 f303 	lsl.w	r3, r9, r3
 800a380:	4313      	orrs	r3, r2
 800a382:	9304      	str	r3, [sp, #16]
 800a384:	46a2      	mov	sl, r4
 800a386:	e7d2      	b.n	800a32e <_vfiprintf_r+0xe2>
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	1d19      	adds	r1, r3, #4
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	9103      	str	r1, [sp, #12]
 800a390:	2b00      	cmp	r3, #0
 800a392:	bfbb      	ittet	lt
 800a394:	425b      	neglt	r3, r3
 800a396:	f042 0202 	orrlt.w	r2, r2, #2
 800a39a:	9307      	strge	r3, [sp, #28]
 800a39c:	9307      	strlt	r3, [sp, #28]
 800a39e:	bfb8      	it	lt
 800a3a0:	9204      	strlt	r2, [sp, #16]
 800a3a2:	7823      	ldrb	r3, [r4, #0]
 800a3a4:	2b2e      	cmp	r3, #46	; 0x2e
 800a3a6:	d10c      	bne.n	800a3c2 <_vfiprintf_r+0x176>
 800a3a8:	7863      	ldrb	r3, [r4, #1]
 800a3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ac:	d135      	bne.n	800a41a <_vfiprintf_r+0x1ce>
 800a3ae:	9b03      	ldr	r3, [sp, #12]
 800a3b0:	1d1a      	adds	r2, r3, #4
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	9203      	str	r2, [sp, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	bfb8      	it	lt
 800a3ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3be:	3402      	adds	r4, #2
 800a3c0:	9305      	str	r3, [sp, #20]
 800a3c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a4a8 <_vfiprintf_r+0x25c>
 800a3c6:	7821      	ldrb	r1, [r4, #0]
 800a3c8:	2203      	movs	r2, #3
 800a3ca:	4650      	mov	r0, sl
 800a3cc:	f7f5 ff18 	bl	8000200 <memchr>
 800a3d0:	b140      	cbz	r0, 800a3e4 <_vfiprintf_r+0x198>
 800a3d2:	2340      	movs	r3, #64	; 0x40
 800a3d4:	eba0 000a 	sub.w	r0, r0, sl
 800a3d8:	fa03 f000 	lsl.w	r0, r3, r0
 800a3dc:	9b04      	ldr	r3, [sp, #16]
 800a3de:	4303      	orrs	r3, r0
 800a3e0:	3401      	adds	r4, #1
 800a3e2:	9304      	str	r3, [sp, #16]
 800a3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e8:	482c      	ldr	r0, [pc, #176]	; (800a49c <_vfiprintf_r+0x250>)
 800a3ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ee:	2206      	movs	r2, #6
 800a3f0:	f7f5 ff06 	bl	8000200 <memchr>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d03f      	beq.n	800a478 <_vfiprintf_r+0x22c>
 800a3f8:	4b29      	ldr	r3, [pc, #164]	; (800a4a0 <_vfiprintf_r+0x254>)
 800a3fa:	bb1b      	cbnz	r3, 800a444 <_vfiprintf_r+0x1f8>
 800a3fc:	9b03      	ldr	r3, [sp, #12]
 800a3fe:	3307      	adds	r3, #7
 800a400:	f023 0307 	bic.w	r3, r3, #7
 800a404:	3308      	adds	r3, #8
 800a406:	9303      	str	r3, [sp, #12]
 800a408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a40a:	443b      	add	r3, r7
 800a40c:	9309      	str	r3, [sp, #36]	; 0x24
 800a40e:	e767      	b.n	800a2e0 <_vfiprintf_r+0x94>
 800a410:	fb0c 3202 	mla	r2, ip, r2, r3
 800a414:	460c      	mov	r4, r1
 800a416:	2001      	movs	r0, #1
 800a418:	e7a5      	b.n	800a366 <_vfiprintf_r+0x11a>
 800a41a:	2300      	movs	r3, #0
 800a41c:	3401      	adds	r4, #1
 800a41e:	9305      	str	r3, [sp, #20]
 800a420:	4619      	mov	r1, r3
 800a422:	f04f 0c0a 	mov.w	ip, #10
 800a426:	4620      	mov	r0, r4
 800a428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a42c:	3a30      	subs	r2, #48	; 0x30
 800a42e:	2a09      	cmp	r2, #9
 800a430:	d903      	bls.n	800a43a <_vfiprintf_r+0x1ee>
 800a432:	2b00      	cmp	r3, #0
 800a434:	d0c5      	beq.n	800a3c2 <_vfiprintf_r+0x176>
 800a436:	9105      	str	r1, [sp, #20]
 800a438:	e7c3      	b.n	800a3c2 <_vfiprintf_r+0x176>
 800a43a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a43e:	4604      	mov	r4, r0
 800a440:	2301      	movs	r3, #1
 800a442:	e7f0      	b.n	800a426 <_vfiprintf_r+0x1da>
 800a444:	ab03      	add	r3, sp, #12
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	462a      	mov	r2, r5
 800a44a:	4b16      	ldr	r3, [pc, #88]	; (800a4a4 <_vfiprintf_r+0x258>)
 800a44c:	a904      	add	r1, sp, #16
 800a44e:	4630      	mov	r0, r6
 800a450:	f7fd ff9a 	bl	8008388 <_printf_float>
 800a454:	4607      	mov	r7, r0
 800a456:	1c78      	adds	r0, r7, #1
 800a458:	d1d6      	bne.n	800a408 <_vfiprintf_r+0x1bc>
 800a45a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a45c:	07d9      	lsls	r1, r3, #31
 800a45e:	d405      	bmi.n	800a46c <_vfiprintf_r+0x220>
 800a460:	89ab      	ldrh	r3, [r5, #12]
 800a462:	059a      	lsls	r2, r3, #22
 800a464:	d402      	bmi.n	800a46c <_vfiprintf_r+0x220>
 800a466:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a468:	f000 faaf 	bl	800a9ca <__retarget_lock_release_recursive>
 800a46c:	89ab      	ldrh	r3, [r5, #12]
 800a46e:	065b      	lsls	r3, r3, #25
 800a470:	f53f af12 	bmi.w	800a298 <_vfiprintf_r+0x4c>
 800a474:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a476:	e711      	b.n	800a29c <_vfiprintf_r+0x50>
 800a478:	ab03      	add	r3, sp, #12
 800a47a:	9300      	str	r3, [sp, #0]
 800a47c:	462a      	mov	r2, r5
 800a47e:	4b09      	ldr	r3, [pc, #36]	; (800a4a4 <_vfiprintf_r+0x258>)
 800a480:	a904      	add	r1, sp, #16
 800a482:	4630      	mov	r0, r6
 800a484:	f7fe fa24 	bl	80088d0 <_printf_i>
 800a488:	e7e4      	b.n	800a454 <_vfiprintf_r+0x208>
 800a48a:	bf00      	nop
 800a48c:	0800c1b4 	.word	0x0800c1b4
 800a490:	0800c1d4 	.word	0x0800c1d4
 800a494:	0800c194 	.word	0x0800c194
 800a498:	0800c082 	.word	0x0800c082
 800a49c:	0800c08c 	.word	0x0800c08c
 800a4a0:	08008389 	.word	0x08008389
 800a4a4:	0800a227 	.word	0x0800a227
 800a4a8:	0800c088 	.word	0x0800c088

0800a4ac <__swbuf_r>:
 800a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ae:	460e      	mov	r6, r1
 800a4b0:	4614      	mov	r4, r2
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	b118      	cbz	r0, 800a4be <__swbuf_r+0x12>
 800a4b6:	6983      	ldr	r3, [r0, #24]
 800a4b8:	b90b      	cbnz	r3, 800a4be <__swbuf_r+0x12>
 800a4ba:	f000 f9e7 	bl	800a88c <__sinit>
 800a4be:	4b21      	ldr	r3, [pc, #132]	; (800a544 <__swbuf_r+0x98>)
 800a4c0:	429c      	cmp	r4, r3
 800a4c2:	d12b      	bne.n	800a51c <__swbuf_r+0x70>
 800a4c4:	686c      	ldr	r4, [r5, #4]
 800a4c6:	69a3      	ldr	r3, [r4, #24]
 800a4c8:	60a3      	str	r3, [r4, #8]
 800a4ca:	89a3      	ldrh	r3, [r4, #12]
 800a4cc:	071a      	lsls	r2, r3, #28
 800a4ce:	d52f      	bpl.n	800a530 <__swbuf_r+0x84>
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	b36b      	cbz	r3, 800a530 <__swbuf_r+0x84>
 800a4d4:	6923      	ldr	r3, [r4, #16]
 800a4d6:	6820      	ldr	r0, [r4, #0]
 800a4d8:	1ac0      	subs	r0, r0, r3
 800a4da:	6963      	ldr	r3, [r4, #20]
 800a4dc:	b2f6      	uxtb	r6, r6
 800a4de:	4283      	cmp	r3, r0
 800a4e0:	4637      	mov	r7, r6
 800a4e2:	dc04      	bgt.n	800a4ee <__swbuf_r+0x42>
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f000 f93c 	bl	800a764 <_fflush_r>
 800a4ec:	bb30      	cbnz	r0, 800a53c <__swbuf_r+0x90>
 800a4ee:	68a3      	ldr	r3, [r4, #8]
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	60a3      	str	r3, [r4, #8]
 800a4f4:	6823      	ldr	r3, [r4, #0]
 800a4f6:	1c5a      	adds	r2, r3, #1
 800a4f8:	6022      	str	r2, [r4, #0]
 800a4fa:	701e      	strb	r6, [r3, #0]
 800a4fc:	6963      	ldr	r3, [r4, #20]
 800a4fe:	3001      	adds	r0, #1
 800a500:	4283      	cmp	r3, r0
 800a502:	d004      	beq.n	800a50e <__swbuf_r+0x62>
 800a504:	89a3      	ldrh	r3, [r4, #12]
 800a506:	07db      	lsls	r3, r3, #31
 800a508:	d506      	bpl.n	800a518 <__swbuf_r+0x6c>
 800a50a:	2e0a      	cmp	r6, #10
 800a50c:	d104      	bne.n	800a518 <__swbuf_r+0x6c>
 800a50e:	4621      	mov	r1, r4
 800a510:	4628      	mov	r0, r5
 800a512:	f000 f927 	bl	800a764 <_fflush_r>
 800a516:	b988      	cbnz	r0, 800a53c <__swbuf_r+0x90>
 800a518:	4638      	mov	r0, r7
 800a51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a51c:	4b0a      	ldr	r3, [pc, #40]	; (800a548 <__swbuf_r+0x9c>)
 800a51e:	429c      	cmp	r4, r3
 800a520:	d101      	bne.n	800a526 <__swbuf_r+0x7a>
 800a522:	68ac      	ldr	r4, [r5, #8]
 800a524:	e7cf      	b.n	800a4c6 <__swbuf_r+0x1a>
 800a526:	4b09      	ldr	r3, [pc, #36]	; (800a54c <__swbuf_r+0xa0>)
 800a528:	429c      	cmp	r4, r3
 800a52a:	bf08      	it	eq
 800a52c:	68ec      	ldreq	r4, [r5, #12]
 800a52e:	e7ca      	b.n	800a4c6 <__swbuf_r+0x1a>
 800a530:	4621      	mov	r1, r4
 800a532:	4628      	mov	r0, r5
 800a534:	f000 f81a 	bl	800a56c <__swsetup_r>
 800a538:	2800      	cmp	r0, #0
 800a53a:	d0cb      	beq.n	800a4d4 <__swbuf_r+0x28>
 800a53c:	f04f 37ff 	mov.w	r7, #4294967295
 800a540:	e7ea      	b.n	800a518 <__swbuf_r+0x6c>
 800a542:	bf00      	nop
 800a544:	0800c1b4 	.word	0x0800c1b4
 800a548:	0800c1d4 	.word	0x0800c1d4
 800a54c:	0800c194 	.word	0x0800c194

0800a550 <__ascii_wctomb>:
 800a550:	b149      	cbz	r1, 800a566 <__ascii_wctomb+0x16>
 800a552:	2aff      	cmp	r2, #255	; 0xff
 800a554:	bf85      	ittet	hi
 800a556:	238a      	movhi	r3, #138	; 0x8a
 800a558:	6003      	strhi	r3, [r0, #0]
 800a55a:	700a      	strbls	r2, [r1, #0]
 800a55c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a560:	bf98      	it	ls
 800a562:	2001      	movls	r0, #1
 800a564:	4770      	bx	lr
 800a566:	4608      	mov	r0, r1
 800a568:	4770      	bx	lr
	...

0800a56c <__swsetup_r>:
 800a56c:	4b32      	ldr	r3, [pc, #200]	; (800a638 <__swsetup_r+0xcc>)
 800a56e:	b570      	push	{r4, r5, r6, lr}
 800a570:	681d      	ldr	r5, [r3, #0]
 800a572:	4606      	mov	r6, r0
 800a574:	460c      	mov	r4, r1
 800a576:	b125      	cbz	r5, 800a582 <__swsetup_r+0x16>
 800a578:	69ab      	ldr	r3, [r5, #24]
 800a57a:	b913      	cbnz	r3, 800a582 <__swsetup_r+0x16>
 800a57c:	4628      	mov	r0, r5
 800a57e:	f000 f985 	bl	800a88c <__sinit>
 800a582:	4b2e      	ldr	r3, [pc, #184]	; (800a63c <__swsetup_r+0xd0>)
 800a584:	429c      	cmp	r4, r3
 800a586:	d10f      	bne.n	800a5a8 <__swsetup_r+0x3c>
 800a588:	686c      	ldr	r4, [r5, #4]
 800a58a:	89a3      	ldrh	r3, [r4, #12]
 800a58c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a590:	0719      	lsls	r1, r3, #28
 800a592:	d42c      	bmi.n	800a5ee <__swsetup_r+0x82>
 800a594:	06dd      	lsls	r5, r3, #27
 800a596:	d411      	bmi.n	800a5bc <__swsetup_r+0x50>
 800a598:	2309      	movs	r3, #9
 800a59a:	6033      	str	r3, [r6, #0]
 800a59c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5a0:	81a3      	strh	r3, [r4, #12]
 800a5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a6:	e03e      	b.n	800a626 <__swsetup_r+0xba>
 800a5a8:	4b25      	ldr	r3, [pc, #148]	; (800a640 <__swsetup_r+0xd4>)
 800a5aa:	429c      	cmp	r4, r3
 800a5ac:	d101      	bne.n	800a5b2 <__swsetup_r+0x46>
 800a5ae:	68ac      	ldr	r4, [r5, #8]
 800a5b0:	e7eb      	b.n	800a58a <__swsetup_r+0x1e>
 800a5b2:	4b24      	ldr	r3, [pc, #144]	; (800a644 <__swsetup_r+0xd8>)
 800a5b4:	429c      	cmp	r4, r3
 800a5b6:	bf08      	it	eq
 800a5b8:	68ec      	ldreq	r4, [r5, #12]
 800a5ba:	e7e6      	b.n	800a58a <__swsetup_r+0x1e>
 800a5bc:	0758      	lsls	r0, r3, #29
 800a5be:	d512      	bpl.n	800a5e6 <__swsetup_r+0x7a>
 800a5c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5c2:	b141      	cbz	r1, 800a5d6 <__swsetup_r+0x6a>
 800a5c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5c8:	4299      	cmp	r1, r3
 800a5ca:	d002      	beq.n	800a5d2 <__swsetup_r+0x66>
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f7ff fcd5 	bl	8009f7c <_free_r>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	6363      	str	r3, [r4, #52]	; 0x34
 800a5d6:	89a3      	ldrh	r3, [r4, #12]
 800a5d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5dc:	81a3      	strh	r3, [r4, #12]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	6063      	str	r3, [r4, #4]
 800a5e2:	6923      	ldr	r3, [r4, #16]
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	89a3      	ldrh	r3, [r4, #12]
 800a5e8:	f043 0308 	orr.w	r3, r3, #8
 800a5ec:	81a3      	strh	r3, [r4, #12]
 800a5ee:	6923      	ldr	r3, [r4, #16]
 800a5f0:	b94b      	cbnz	r3, 800a606 <__swsetup_r+0x9a>
 800a5f2:	89a3      	ldrh	r3, [r4, #12]
 800a5f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5fc:	d003      	beq.n	800a606 <__swsetup_r+0x9a>
 800a5fe:	4621      	mov	r1, r4
 800a600:	4630      	mov	r0, r6
 800a602:	f000 fa09 	bl	800aa18 <__smakebuf_r>
 800a606:	89a0      	ldrh	r0, [r4, #12]
 800a608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a60c:	f010 0301 	ands.w	r3, r0, #1
 800a610:	d00a      	beq.n	800a628 <__swsetup_r+0xbc>
 800a612:	2300      	movs	r3, #0
 800a614:	60a3      	str	r3, [r4, #8]
 800a616:	6963      	ldr	r3, [r4, #20]
 800a618:	425b      	negs	r3, r3
 800a61a:	61a3      	str	r3, [r4, #24]
 800a61c:	6923      	ldr	r3, [r4, #16]
 800a61e:	b943      	cbnz	r3, 800a632 <__swsetup_r+0xc6>
 800a620:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a624:	d1ba      	bne.n	800a59c <__swsetup_r+0x30>
 800a626:	bd70      	pop	{r4, r5, r6, pc}
 800a628:	0781      	lsls	r1, r0, #30
 800a62a:	bf58      	it	pl
 800a62c:	6963      	ldrpl	r3, [r4, #20]
 800a62e:	60a3      	str	r3, [r4, #8]
 800a630:	e7f4      	b.n	800a61c <__swsetup_r+0xb0>
 800a632:	2000      	movs	r0, #0
 800a634:	e7f7      	b.n	800a626 <__swsetup_r+0xba>
 800a636:	bf00      	nop
 800a638:	20000030 	.word	0x20000030
 800a63c:	0800c1b4 	.word	0x0800c1b4
 800a640:	0800c1d4 	.word	0x0800c1d4
 800a644:	0800c194 	.word	0x0800c194

0800a648 <abort>:
 800a648:	b508      	push	{r3, lr}
 800a64a:	2006      	movs	r0, #6
 800a64c:	f000 fa4c 	bl	800aae8 <raise>
 800a650:	2001      	movs	r0, #1
 800a652:	f7f8 fbc7 	bl	8002de4 <_exit>
	...

0800a658 <__sflush_r>:
 800a658:	898a      	ldrh	r2, [r1, #12]
 800a65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a65e:	4605      	mov	r5, r0
 800a660:	0710      	lsls	r0, r2, #28
 800a662:	460c      	mov	r4, r1
 800a664:	d458      	bmi.n	800a718 <__sflush_r+0xc0>
 800a666:	684b      	ldr	r3, [r1, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	dc05      	bgt.n	800a678 <__sflush_r+0x20>
 800a66c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a66e:	2b00      	cmp	r3, #0
 800a670:	dc02      	bgt.n	800a678 <__sflush_r+0x20>
 800a672:	2000      	movs	r0, #0
 800a674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a67a:	2e00      	cmp	r6, #0
 800a67c:	d0f9      	beq.n	800a672 <__sflush_r+0x1a>
 800a67e:	2300      	movs	r3, #0
 800a680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a684:	682f      	ldr	r7, [r5, #0]
 800a686:	602b      	str	r3, [r5, #0]
 800a688:	d032      	beq.n	800a6f0 <__sflush_r+0x98>
 800a68a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	075a      	lsls	r2, r3, #29
 800a690:	d505      	bpl.n	800a69e <__sflush_r+0x46>
 800a692:	6863      	ldr	r3, [r4, #4]
 800a694:	1ac0      	subs	r0, r0, r3
 800a696:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a698:	b10b      	cbz	r3, 800a69e <__sflush_r+0x46>
 800a69a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a69c:	1ac0      	subs	r0, r0, r3
 800a69e:	2300      	movs	r3, #0
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6a4:	6a21      	ldr	r1, [r4, #32]
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	47b0      	blx	r6
 800a6aa:	1c43      	adds	r3, r0, #1
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	d106      	bne.n	800a6be <__sflush_r+0x66>
 800a6b0:	6829      	ldr	r1, [r5, #0]
 800a6b2:	291d      	cmp	r1, #29
 800a6b4:	d82c      	bhi.n	800a710 <__sflush_r+0xb8>
 800a6b6:	4a2a      	ldr	r2, [pc, #168]	; (800a760 <__sflush_r+0x108>)
 800a6b8:	40ca      	lsrs	r2, r1
 800a6ba:	07d6      	lsls	r6, r2, #31
 800a6bc:	d528      	bpl.n	800a710 <__sflush_r+0xb8>
 800a6be:	2200      	movs	r2, #0
 800a6c0:	6062      	str	r2, [r4, #4]
 800a6c2:	04d9      	lsls	r1, r3, #19
 800a6c4:	6922      	ldr	r2, [r4, #16]
 800a6c6:	6022      	str	r2, [r4, #0]
 800a6c8:	d504      	bpl.n	800a6d4 <__sflush_r+0x7c>
 800a6ca:	1c42      	adds	r2, r0, #1
 800a6cc:	d101      	bne.n	800a6d2 <__sflush_r+0x7a>
 800a6ce:	682b      	ldr	r3, [r5, #0]
 800a6d0:	b903      	cbnz	r3, 800a6d4 <__sflush_r+0x7c>
 800a6d2:	6560      	str	r0, [r4, #84]	; 0x54
 800a6d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6d6:	602f      	str	r7, [r5, #0]
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	d0ca      	beq.n	800a672 <__sflush_r+0x1a>
 800a6dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6e0:	4299      	cmp	r1, r3
 800a6e2:	d002      	beq.n	800a6ea <__sflush_r+0x92>
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	f7ff fc49 	bl	8009f7c <_free_r>
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	6360      	str	r0, [r4, #52]	; 0x34
 800a6ee:	e7c1      	b.n	800a674 <__sflush_r+0x1c>
 800a6f0:	6a21      	ldr	r1, [r4, #32]
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	47b0      	blx	r6
 800a6f8:	1c41      	adds	r1, r0, #1
 800a6fa:	d1c7      	bne.n	800a68c <__sflush_r+0x34>
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d0c4      	beq.n	800a68c <__sflush_r+0x34>
 800a702:	2b1d      	cmp	r3, #29
 800a704:	d001      	beq.n	800a70a <__sflush_r+0xb2>
 800a706:	2b16      	cmp	r3, #22
 800a708:	d101      	bne.n	800a70e <__sflush_r+0xb6>
 800a70a:	602f      	str	r7, [r5, #0]
 800a70c:	e7b1      	b.n	800a672 <__sflush_r+0x1a>
 800a70e:	89a3      	ldrh	r3, [r4, #12]
 800a710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a714:	81a3      	strh	r3, [r4, #12]
 800a716:	e7ad      	b.n	800a674 <__sflush_r+0x1c>
 800a718:	690f      	ldr	r7, [r1, #16]
 800a71a:	2f00      	cmp	r7, #0
 800a71c:	d0a9      	beq.n	800a672 <__sflush_r+0x1a>
 800a71e:	0793      	lsls	r3, r2, #30
 800a720:	680e      	ldr	r6, [r1, #0]
 800a722:	bf08      	it	eq
 800a724:	694b      	ldreq	r3, [r1, #20]
 800a726:	600f      	str	r7, [r1, #0]
 800a728:	bf18      	it	ne
 800a72a:	2300      	movne	r3, #0
 800a72c:	eba6 0807 	sub.w	r8, r6, r7
 800a730:	608b      	str	r3, [r1, #8]
 800a732:	f1b8 0f00 	cmp.w	r8, #0
 800a736:	dd9c      	ble.n	800a672 <__sflush_r+0x1a>
 800a738:	6a21      	ldr	r1, [r4, #32]
 800a73a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a73c:	4643      	mov	r3, r8
 800a73e:	463a      	mov	r2, r7
 800a740:	4628      	mov	r0, r5
 800a742:	47b0      	blx	r6
 800a744:	2800      	cmp	r0, #0
 800a746:	dc06      	bgt.n	800a756 <__sflush_r+0xfe>
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a74e:	81a3      	strh	r3, [r4, #12]
 800a750:	f04f 30ff 	mov.w	r0, #4294967295
 800a754:	e78e      	b.n	800a674 <__sflush_r+0x1c>
 800a756:	4407      	add	r7, r0
 800a758:	eba8 0800 	sub.w	r8, r8, r0
 800a75c:	e7e9      	b.n	800a732 <__sflush_r+0xda>
 800a75e:	bf00      	nop
 800a760:	20400001 	.word	0x20400001

0800a764 <_fflush_r>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	690b      	ldr	r3, [r1, #16]
 800a768:	4605      	mov	r5, r0
 800a76a:	460c      	mov	r4, r1
 800a76c:	b913      	cbnz	r3, 800a774 <_fflush_r+0x10>
 800a76e:	2500      	movs	r5, #0
 800a770:	4628      	mov	r0, r5
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	b118      	cbz	r0, 800a77e <_fflush_r+0x1a>
 800a776:	6983      	ldr	r3, [r0, #24]
 800a778:	b90b      	cbnz	r3, 800a77e <_fflush_r+0x1a>
 800a77a:	f000 f887 	bl	800a88c <__sinit>
 800a77e:	4b14      	ldr	r3, [pc, #80]	; (800a7d0 <_fflush_r+0x6c>)
 800a780:	429c      	cmp	r4, r3
 800a782:	d11b      	bne.n	800a7bc <_fflush_r+0x58>
 800a784:	686c      	ldr	r4, [r5, #4]
 800a786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d0ef      	beq.n	800a76e <_fflush_r+0xa>
 800a78e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a790:	07d0      	lsls	r0, r2, #31
 800a792:	d404      	bmi.n	800a79e <_fflush_r+0x3a>
 800a794:	0599      	lsls	r1, r3, #22
 800a796:	d402      	bmi.n	800a79e <_fflush_r+0x3a>
 800a798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a79a:	f000 f915 	bl	800a9c8 <__retarget_lock_acquire_recursive>
 800a79e:	4628      	mov	r0, r5
 800a7a0:	4621      	mov	r1, r4
 800a7a2:	f7ff ff59 	bl	800a658 <__sflush_r>
 800a7a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7a8:	07da      	lsls	r2, r3, #31
 800a7aa:	4605      	mov	r5, r0
 800a7ac:	d4e0      	bmi.n	800a770 <_fflush_r+0xc>
 800a7ae:	89a3      	ldrh	r3, [r4, #12]
 800a7b0:	059b      	lsls	r3, r3, #22
 800a7b2:	d4dd      	bmi.n	800a770 <_fflush_r+0xc>
 800a7b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7b6:	f000 f908 	bl	800a9ca <__retarget_lock_release_recursive>
 800a7ba:	e7d9      	b.n	800a770 <_fflush_r+0xc>
 800a7bc:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <_fflush_r+0x70>)
 800a7be:	429c      	cmp	r4, r3
 800a7c0:	d101      	bne.n	800a7c6 <_fflush_r+0x62>
 800a7c2:	68ac      	ldr	r4, [r5, #8]
 800a7c4:	e7df      	b.n	800a786 <_fflush_r+0x22>
 800a7c6:	4b04      	ldr	r3, [pc, #16]	; (800a7d8 <_fflush_r+0x74>)
 800a7c8:	429c      	cmp	r4, r3
 800a7ca:	bf08      	it	eq
 800a7cc:	68ec      	ldreq	r4, [r5, #12]
 800a7ce:	e7da      	b.n	800a786 <_fflush_r+0x22>
 800a7d0:	0800c1b4 	.word	0x0800c1b4
 800a7d4:	0800c1d4 	.word	0x0800c1d4
 800a7d8:	0800c194 	.word	0x0800c194

0800a7dc <std>:
 800a7dc:	2300      	movs	r3, #0
 800a7de:	b510      	push	{r4, lr}
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	e9c0 3300 	strd	r3, r3, [r0]
 800a7e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7ea:	6083      	str	r3, [r0, #8]
 800a7ec:	8181      	strh	r1, [r0, #12]
 800a7ee:	6643      	str	r3, [r0, #100]	; 0x64
 800a7f0:	81c2      	strh	r2, [r0, #14]
 800a7f2:	6183      	str	r3, [r0, #24]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	2208      	movs	r2, #8
 800a7f8:	305c      	adds	r0, #92	; 0x5c
 800a7fa:	f7fd fd1d 	bl	8008238 <memset>
 800a7fe:	4b05      	ldr	r3, [pc, #20]	; (800a814 <std+0x38>)
 800a800:	6263      	str	r3, [r4, #36]	; 0x24
 800a802:	4b05      	ldr	r3, [pc, #20]	; (800a818 <std+0x3c>)
 800a804:	62a3      	str	r3, [r4, #40]	; 0x28
 800a806:	4b05      	ldr	r3, [pc, #20]	; (800a81c <std+0x40>)
 800a808:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a80a:	4b05      	ldr	r3, [pc, #20]	; (800a820 <std+0x44>)
 800a80c:	6224      	str	r4, [r4, #32]
 800a80e:	6323      	str	r3, [r4, #48]	; 0x30
 800a810:	bd10      	pop	{r4, pc}
 800a812:	bf00      	nop
 800a814:	0800ab21 	.word	0x0800ab21
 800a818:	0800ab43 	.word	0x0800ab43
 800a81c:	0800ab7b 	.word	0x0800ab7b
 800a820:	0800ab9f 	.word	0x0800ab9f

0800a824 <_cleanup_r>:
 800a824:	4901      	ldr	r1, [pc, #4]	; (800a82c <_cleanup_r+0x8>)
 800a826:	f000 b8af 	b.w	800a988 <_fwalk_reent>
 800a82a:	bf00      	nop
 800a82c:	0800a765 	.word	0x0800a765

0800a830 <__sfmoreglue>:
 800a830:	b570      	push	{r4, r5, r6, lr}
 800a832:	2268      	movs	r2, #104	; 0x68
 800a834:	1e4d      	subs	r5, r1, #1
 800a836:	4355      	muls	r5, r2
 800a838:	460e      	mov	r6, r1
 800a83a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a83e:	f7ff fc09 	bl	800a054 <_malloc_r>
 800a842:	4604      	mov	r4, r0
 800a844:	b140      	cbz	r0, 800a858 <__sfmoreglue+0x28>
 800a846:	2100      	movs	r1, #0
 800a848:	e9c0 1600 	strd	r1, r6, [r0]
 800a84c:	300c      	adds	r0, #12
 800a84e:	60a0      	str	r0, [r4, #8]
 800a850:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a854:	f7fd fcf0 	bl	8008238 <memset>
 800a858:	4620      	mov	r0, r4
 800a85a:	bd70      	pop	{r4, r5, r6, pc}

0800a85c <__sfp_lock_acquire>:
 800a85c:	4801      	ldr	r0, [pc, #4]	; (800a864 <__sfp_lock_acquire+0x8>)
 800a85e:	f000 b8b3 	b.w	800a9c8 <__retarget_lock_acquire_recursive>
 800a862:	bf00      	nop
 800a864:	200091e1 	.word	0x200091e1

0800a868 <__sfp_lock_release>:
 800a868:	4801      	ldr	r0, [pc, #4]	; (800a870 <__sfp_lock_release+0x8>)
 800a86a:	f000 b8ae 	b.w	800a9ca <__retarget_lock_release_recursive>
 800a86e:	bf00      	nop
 800a870:	200091e1 	.word	0x200091e1

0800a874 <__sinit_lock_acquire>:
 800a874:	4801      	ldr	r0, [pc, #4]	; (800a87c <__sinit_lock_acquire+0x8>)
 800a876:	f000 b8a7 	b.w	800a9c8 <__retarget_lock_acquire_recursive>
 800a87a:	bf00      	nop
 800a87c:	200091e2 	.word	0x200091e2

0800a880 <__sinit_lock_release>:
 800a880:	4801      	ldr	r0, [pc, #4]	; (800a888 <__sinit_lock_release+0x8>)
 800a882:	f000 b8a2 	b.w	800a9ca <__retarget_lock_release_recursive>
 800a886:	bf00      	nop
 800a888:	200091e2 	.word	0x200091e2

0800a88c <__sinit>:
 800a88c:	b510      	push	{r4, lr}
 800a88e:	4604      	mov	r4, r0
 800a890:	f7ff fff0 	bl	800a874 <__sinit_lock_acquire>
 800a894:	69a3      	ldr	r3, [r4, #24]
 800a896:	b11b      	cbz	r3, 800a8a0 <__sinit+0x14>
 800a898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a89c:	f7ff bff0 	b.w	800a880 <__sinit_lock_release>
 800a8a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a8a4:	6523      	str	r3, [r4, #80]	; 0x50
 800a8a6:	4b13      	ldr	r3, [pc, #76]	; (800a8f4 <__sinit+0x68>)
 800a8a8:	4a13      	ldr	r2, [pc, #76]	; (800a8f8 <__sinit+0x6c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800a8ae:	42a3      	cmp	r3, r4
 800a8b0:	bf04      	itt	eq
 800a8b2:	2301      	moveq	r3, #1
 800a8b4:	61a3      	streq	r3, [r4, #24]
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f000 f820 	bl	800a8fc <__sfp>
 800a8bc:	6060      	str	r0, [r4, #4]
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f000 f81c 	bl	800a8fc <__sfp>
 800a8c4:	60a0      	str	r0, [r4, #8]
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f000 f818 	bl	800a8fc <__sfp>
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	60e0      	str	r0, [r4, #12]
 800a8d0:	2104      	movs	r1, #4
 800a8d2:	6860      	ldr	r0, [r4, #4]
 800a8d4:	f7ff ff82 	bl	800a7dc <std>
 800a8d8:	68a0      	ldr	r0, [r4, #8]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	2109      	movs	r1, #9
 800a8de:	f7ff ff7d 	bl	800a7dc <std>
 800a8e2:	68e0      	ldr	r0, [r4, #12]
 800a8e4:	2202      	movs	r2, #2
 800a8e6:	2112      	movs	r1, #18
 800a8e8:	f7ff ff78 	bl	800a7dc <std>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	61a3      	str	r3, [r4, #24]
 800a8f0:	e7d2      	b.n	800a898 <__sinit+0xc>
 800a8f2:	bf00      	nop
 800a8f4:	0800be1c 	.word	0x0800be1c
 800a8f8:	0800a825 	.word	0x0800a825

0800a8fc <__sfp>:
 800a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fe:	4607      	mov	r7, r0
 800a900:	f7ff ffac 	bl	800a85c <__sfp_lock_acquire>
 800a904:	4b1e      	ldr	r3, [pc, #120]	; (800a980 <__sfp+0x84>)
 800a906:	681e      	ldr	r6, [r3, #0]
 800a908:	69b3      	ldr	r3, [r6, #24]
 800a90a:	b913      	cbnz	r3, 800a912 <__sfp+0x16>
 800a90c:	4630      	mov	r0, r6
 800a90e:	f7ff ffbd 	bl	800a88c <__sinit>
 800a912:	3648      	adds	r6, #72	; 0x48
 800a914:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a918:	3b01      	subs	r3, #1
 800a91a:	d503      	bpl.n	800a924 <__sfp+0x28>
 800a91c:	6833      	ldr	r3, [r6, #0]
 800a91e:	b30b      	cbz	r3, 800a964 <__sfp+0x68>
 800a920:	6836      	ldr	r6, [r6, #0]
 800a922:	e7f7      	b.n	800a914 <__sfp+0x18>
 800a924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a928:	b9d5      	cbnz	r5, 800a960 <__sfp+0x64>
 800a92a:	4b16      	ldr	r3, [pc, #88]	; (800a984 <__sfp+0x88>)
 800a92c:	60e3      	str	r3, [r4, #12]
 800a92e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a932:	6665      	str	r5, [r4, #100]	; 0x64
 800a934:	f000 f847 	bl	800a9c6 <__retarget_lock_init_recursive>
 800a938:	f7ff ff96 	bl	800a868 <__sfp_lock_release>
 800a93c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a940:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a944:	6025      	str	r5, [r4, #0]
 800a946:	61a5      	str	r5, [r4, #24]
 800a948:	2208      	movs	r2, #8
 800a94a:	4629      	mov	r1, r5
 800a94c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a950:	f7fd fc72 	bl	8008238 <memset>
 800a954:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a958:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a95c:	4620      	mov	r0, r4
 800a95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a960:	3468      	adds	r4, #104	; 0x68
 800a962:	e7d9      	b.n	800a918 <__sfp+0x1c>
 800a964:	2104      	movs	r1, #4
 800a966:	4638      	mov	r0, r7
 800a968:	f7ff ff62 	bl	800a830 <__sfmoreglue>
 800a96c:	4604      	mov	r4, r0
 800a96e:	6030      	str	r0, [r6, #0]
 800a970:	2800      	cmp	r0, #0
 800a972:	d1d5      	bne.n	800a920 <__sfp+0x24>
 800a974:	f7ff ff78 	bl	800a868 <__sfp_lock_release>
 800a978:	230c      	movs	r3, #12
 800a97a:	603b      	str	r3, [r7, #0]
 800a97c:	e7ee      	b.n	800a95c <__sfp+0x60>
 800a97e:	bf00      	nop
 800a980:	0800be1c 	.word	0x0800be1c
 800a984:	ffff0001 	.word	0xffff0001

0800a988 <_fwalk_reent>:
 800a988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a98c:	4606      	mov	r6, r0
 800a98e:	4688      	mov	r8, r1
 800a990:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a994:	2700      	movs	r7, #0
 800a996:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a99a:	f1b9 0901 	subs.w	r9, r9, #1
 800a99e:	d505      	bpl.n	800a9ac <_fwalk_reent+0x24>
 800a9a0:	6824      	ldr	r4, [r4, #0]
 800a9a2:	2c00      	cmp	r4, #0
 800a9a4:	d1f7      	bne.n	800a996 <_fwalk_reent+0xe>
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ac:	89ab      	ldrh	r3, [r5, #12]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d907      	bls.n	800a9c2 <_fwalk_reent+0x3a>
 800a9b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	d003      	beq.n	800a9c2 <_fwalk_reent+0x3a>
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	4630      	mov	r0, r6
 800a9be:	47c0      	blx	r8
 800a9c0:	4307      	orrs	r7, r0
 800a9c2:	3568      	adds	r5, #104	; 0x68
 800a9c4:	e7e9      	b.n	800a99a <_fwalk_reent+0x12>

0800a9c6 <__retarget_lock_init_recursive>:
 800a9c6:	4770      	bx	lr

0800a9c8 <__retarget_lock_acquire_recursive>:
 800a9c8:	4770      	bx	lr

0800a9ca <__retarget_lock_release_recursive>:
 800a9ca:	4770      	bx	lr

0800a9cc <__swhatbuf_r>:
 800a9cc:	b570      	push	{r4, r5, r6, lr}
 800a9ce:	460e      	mov	r6, r1
 800a9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d4:	2900      	cmp	r1, #0
 800a9d6:	b096      	sub	sp, #88	; 0x58
 800a9d8:	4614      	mov	r4, r2
 800a9da:	461d      	mov	r5, r3
 800a9dc:	da08      	bge.n	800a9f0 <__swhatbuf_r+0x24>
 800a9de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	602a      	str	r2, [r5, #0]
 800a9e6:	061a      	lsls	r2, r3, #24
 800a9e8:	d410      	bmi.n	800aa0c <__swhatbuf_r+0x40>
 800a9ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ee:	e00e      	b.n	800aa0e <__swhatbuf_r+0x42>
 800a9f0:	466a      	mov	r2, sp
 800a9f2:	f000 f8fb 	bl	800abec <_fstat_r>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	dbf1      	blt.n	800a9de <__swhatbuf_r+0x12>
 800a9fa:	9a01      	ldr	r2, [sp, #4]
 800a9fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa04:	425a      	negs	r2, r3
 800aa06:	415a      	adcs	r2, r3
 800aa08:	602a      	str	r2, [r5, #0]
 800aa0a:	e7ee      	b.n	800a9ea <__swhatbuf_r+0x1e>
 800aa0c:	2340      	movs	r3, #64	; 0x40
 800aa0e:	2000      	movs	r0, #0
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	b016      	add	sp, #88	; 0x58
 800aa14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa18 <__smakebuf_r>:
 800aa18:	898b      	ldrh	r3, [r1, #12]
 800aa1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa1c:	079d      	lsls	r5, r3, #30
 800aa1e:	4606      	mov	r6, r0
 800aa20:	460c      	mov	r4, r1
 800aa22:	d507      	bpl.n	800aa34 <__smakebuf_r+0x1c>
 800aa24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	6123      	str	r3, [r4, #16]
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	6163      	str	r3, [r4, #20]
 800aa30:	b002      	add	sp, #8
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	ab01      	add	r3, sp, #4
 800aa36:	466a      	mov	r2, sp
 800aa38:	f7ff ffc8 	bl	800a9cc <__swhatbuf_r>
 800aa3c:	9900      	ldr	r1, [sp, #0]
 800aa3e:	4605      	mov	r5, r0
 800aa40:	4630      	mov	r0, r6
 800aa42:	f7ff fb07 	bl	800a054 <_malloc_r>
 800aa46:	b948      	cbnz	r0, 800aa5c <__smakebuf_r+0x44>
 800aa48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa4c:	059a      	lsls	r2, r3, #22
 800aa4e:	d4ef      	bmi.n	800aa30 <__smakebuf_r+0x18>
 800aa50:	f023 0303 	bic.w	r3, r3, #3
 800aa54:	f043 0302 	orr.w	r3, r3, #2
 800aa58:	81a3      	strh	r3, [r4, #12]
 800aa5a:	e7e3      	b.n	800aa24 <__smakebuf_r+0xc>
 800aa5c:	4b0d      	ldr	r3, [pc, #52]	; (800aa94 <__smakebuf_r+0x7c>)
 800aa5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	6020      	str	r0, [r4, #0]
 800aa64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa68:	81a3      	strh	r3, [r4, #12]
 800aa6a:	9b00      	ldr	r3, [sp, #0]
 800aa6c:	6163      	str	r3, [r4, #20]
 800aa6e:	9b01      	ldr	r3, [sp, #4]
 800aa70:	6120      	str	r0, [r4, #16]
 800aa72:	b15b      	cbz	r3, 800aa8c <__smakebuf_r+0x74>
 800aa74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa78:	4630      	mov	r0, r6
 800aa7a:	f000 f8c9 	bl	800ac10 <_isatty_r>
 800aa7e:	b128      	cbz	r0, 800aa8c <__smakebuf_r+0x74>
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	f023 0303 	bic.w	r3, r3, #3
 800aa86:	f043 0301 	orr.w	r3, r3, #1
 800aa8a:	81a3      	strh	r3, [r4, #12]
 800aa8c:	89a0      	ldrh	r0, [r4, #12]
 800aa8e:	4305      	orrs	r5, r0
 800aa90:	81a5      	strh	r5, [r4, #12]
 800aa92:	e7cd      	b.n	800aa30 <__smakebuf_r+0x18>
 800aa94:	0800a825 	.word	0x0800a825

0800aa98 <_raise_r>:
 800aa98:	291f      	cmp	r1, #31
 800aa9a:	b538      	push	{r3, r4, r5, lr}
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	460d      	mov	r5, r1
 800aaa0:	d904      	bls.n	800aaac <_raise_r+0x14>
 800aaa2:	2316      	movs	r3, #22
 800aaa4:	6003      	str	r3, [r0, #0]
 800aaa6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaaa:	bd38      	pop	{r3, r4, r5, pc}
 800aaac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aaae:	b112      	cbz	r2, 800aab6 <_raise_r+0x1e>
 800aab0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aab4:	b94b      	cbnz	r3, 800aaca <_raise_r+0x32>
 800aab6:	4620      	mov	r0, r4
 800aab8:	f000 f830 	bl	800ab1c <_getpid_r>
 800aabc:	462a      	mov	r2, r5
 800aabe:	4601      	mov	r1, r0
 800aac0:	4620      	mov	r0, r4
 800aac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aac6:	f000 b817 	b.w	800aaf8 <_kill_r>
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d00a      	beq.n	800aae4 <_raise_r+0x4c>
 800aace:	1c59      	adds	r1, r3, #1
 800aad0:	d103      	bne.n	800aada <_raise_r+0x42>
 800aad2:	2316      	movs	r3, #22
 800aad4:	6003      	str	r3, [r0, #0]
 800aad6:	2001      	movs	r0, #1
 800aad8:	e7e7      	b.n	800aaaa <_raise_r+0x12>
 800aada:	2400      	movs	r4, #0
 800aadc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aae0:	4628      	mov	r0, r5
 800aae2:	4798      	blx	r3
 800aae4:	2000      	movs	r0, #0
 800aae6:	e7e0      	b.n	800aaaa <_raise_r+0x12>

0800aae8 <raise>:
 800aae8:	4b02      	ldr	r3, [pc, #8]	; (800aaf4 <raise+0xc>)
 800aaea:	4601      	mov	r1, r0
 800aaec:	6818      	ldr	r0, [r3, #0]
 800aaee:	f7ff bfd3 	b.w	800aa98 <_raise_r>
 800aaf2:	bf00      	nop
 800aaf4:	20000030 	.word	0x20000030

0800aaf8 <_kill_r>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	4d07      	ldr	r5, [pc, #28]	; (800ab18 <_kill_r+0x20>)
 800aafc:	2300      	movs	r3, #0
 800aafe:	4604      	mov	r4, r0
 800ab00:	4608      	mov	r0, r1
 800ab02:	4611      	mov	r1, r2
 800ab04:	602b      	str	r3, [r5, #0]
 800ab06:	f7f8 f95d 	bl	8002dc4 <_kill>
 800ab0a:	1c43      	adds	r3, r0, #1
 800ab0c:	d102      	bne.n	800ab14 <_kill_r+0x1c>
 800ab0e:	682b      	ldr	r3, [r5, #0]
 800ab10:	b103      	cbz	r3, 800ab14 <_kill_r+0x1c>
 800ab12:	6023      	str	r3, [r4, #0]
 800ab14:	bd38      	pop	{r3, r4, r5, pc}
 800ab16:	bf00      	nop
 800ab18:	200091dc 	.word	0x200091dc

0800ab1c <_getpid_r>:
 800ab1c:	f7f8 b94a 	b.w	8002db4 <_getpid>

0800ab20 <__sread>:
 800ab20:	b510      	push	{r4, lr}
 800ab22:	460c      	mov	r4, r1
 800ab24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab28:	f000 f894 	bl	800ac54 <_read_r>
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	bfab      	itete	ge
 800ab30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab32:	89a3      	ldrhlt	r3, [r4, #12]
 800ab34:	181b      	addge	r3, r3, r0
 800ab36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab3a:	bfac      	ite	ge
 800ab3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab3e:	81a3      	strhlt	r3, [r4, #12]
 800ab40:	bd10      	pop	{r4, pc}

0800ab42 <__swrite>:
 800ab42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab46:	461f      	mov	r7, r3
 800ab48:	898b      	ldrh	r3, [r1, #12]
 800ab4a:	05db      	lsls	r3, r3, #23
 800ab4c:	4605      	mov	r5, r0
 800ab4e:	460c      	mov	r4, r1
 800ab50:	4616      	mov	r6, r2
 800ab52:	d505      	bpl.n	800ab60 <__swrite+0x1e>
 800ab54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab58:	2302      	movs	r3, #2
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f000 f868 	bl	800ac30 <_lseek_r>
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab6a:	81a3      	strh	r3, [r4, #12]
 800ab6c:	4632      	mov	r2, r6
 800ab6e:	463b      	mov	r3, r7
 800ab70:	4628      	mov	r0, r5
 800ab72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab76:	f000 b817 	b.w	800aba8 <_write_r>

0800ab7a <__sseek>:
 800ab7a:	b510      	push	{r4, lr}
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab82:	f000 f855 	bl	800ac30 <_lseek_r>
 800ab86:	1c43      	adds	r3, r0, #1
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	bf15      	itete	ne
 800ab8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab96:	81a3      	strheq	r3, [r4, #12]
 800ab98:	bf18      	it	ne
 800ab9a:	81a3      	strhne	r3, [r4, #12]
 800ab9c:	bd10      	pop	{r4, pc}

0800ab9e <__sclose>:
 800ab9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba2:	f000 b813 	b.w	800abcc <_close_r>
	...

0800aba8 <_write_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	4d07      	ldr	r5, [pc, #28]	; (800abc8 <_write_r+0x20>)
 800abac:	4604      	mov	r4, r0
 800abae:	4608      	mov	r0, r1
 800abb0:	4611      	mov	r1, r2
 800abb2:	2200      	movs	r2, #0
 800abb4:	602a      	str	r2, [r5, #0]
 800abb6:	461a      	mov	r2, r3
 800abb8:	f7f8 f93b 	bl	8002e32 <_write>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	d102      	bne.n	800abc6 <_write_r+0x1e>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	b103      	cbz	r3, 800abc6 <_write_r+0x1e>
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	200091dc 	.word	0x200091dc

0800abcc <_close_r>:
 800abcc:	b538      	push	{r3, r4, r5, lr}
 800abce:	4d06      	ldr	r5, [pc, #24]	; (800abe8 <_close_r+0x1c>)
 800abd0:	2300      	movs	r3, #0
 800abd2:	4604      	mov	r4, r0
 800abd4:	4608      	mov	r0, r1
 800abd6:	602b      	str	r3, [r5, #0]
 800abd8:	f7f8 f947 	bl	8002e6a <_close>
 800abdc:	1c43      	adds	r3, r0, #1
 800abde:	d102      	bne.n	800abe6 <_close_r+0x1a>
 800abe0:	682b      	ldr	r3, [r5, #0]
 800abe2:	b103      	cbz	r3, 800abe6 <_close_r+0x1a>
 800abe4:	6023      	str	r3, [r4, #0]
 800abe6:	bd38      	pop	{r3, r4, r5, pc}
 800abe8:	200091dc 	.word	0x200091dc

0800abec <_fstat_r>:
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	4d07      	ldr	r5, [pc, #28]	; (800ac0c <_fstat_r+0x20>)
 800abf0:	2300      	movs	r3, #0
 800abf2:	4604      	mov	r4, r0
 800abf4:	4608      	mov	r0, r1
 800abf6:	4611      	mov	r1, r2
 800abf8:	602b      	str	r3, [r5, #0]
 800abfa:	f7f8 f942 	bl	8002e82 <_fstat>
 800abfe:	1c43      	adds	r3, r0, #1
 800ac00:	d102      	bne.n	800ac08 <_fstat_r+0x1c>
 800ac02:	682b      	ldr	r3, [r5, #0]
 800ac04:	b103      	cbz	r3, 800ac08 <_fstat_r+0x1c>
 800ac06:	6023      	str	r3, [r4, #0]
 800ac08:	bd38      	pop	{r3, r4, r5, pc}
 800ac0a:	bf00      	nop
 800ac0c:	200091dc 	.word	0x200091dc

0800ac10 <_isatty_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4d06      	ldr	r5, [pc, #24]	; (800ac2c <_isatty_r+0x1c>)
 800ac14:	2300      	movs	r3, #0
 800ac16:	4604      	mov	r4, r0
 800ac18:	4608      	mov	r0, r1
 800ac1a:	602b      	str	r3, [r5, #0]
 800ac1c:	f7f8 f941 	bl	8002ea2 <_isatty>
 800ac20:	1c43      	adds	r3, r0, #1
 800ac22:	d102      	bne.n	800ac2a <_isatty_r+0x1a>
 800ac24:	682b      	ldr	r3, [r5, #0]
 800ac26:	b103      	cbz	r3, 800ac2a <_isatty_r+0x1a>
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	200091dc 	.word	0x200091dc

0800ac30 <_lseek_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4d07      	ldr	r5, [pc, #28]	; (800ac50 <_lseek_r+0x20>)
 800ac34:	4604      	mov	r4, r0
 800ac36:	4608      	mov	r0, r1
 800ac38:	4611      	mov	r1, r2
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	602a      	str	r2, [r5, #0]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	f7f8 f93a 	bl	8002eb8 <_lseek>
 800ac44:	1c43      	adds	r3, r0, #1
 800ac46:	d102      	bne.n	800ac4e <_lseek_r+0x1e>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	b103      	cbz	r3, 800ac4e <_lseek_r+0x1e>
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	bd38      	pop	{r3, r4, r5, pc}
 800ac50:	200091dc 	.word	0x200091dc

0800ac54 <_read_r>:
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	4d07      	ldr	r5, [pc, #28]	; (800ac74 <_read_r+0x20>)
 800ac58:	4604      	mov	r4, r0
 800ac5a:	4608      	mov	r0, r1
 800ac5c:	4611      	mov	r1, r2
 800ac5e:	2200      	movs	r2, #0
 800ac60:	602a      	str	r2, [r5, #0]
 800ac62:	461a      	mov	r2, r3
 800ac64:	f7f8 f8c8 	bl	8002df8 <_read>
 800ac68:	1c43      	adds	r3, r0, #1
 800ac6a:	d102      	bne.n	800ac72 <_read_r+0x1e>
 800ac6c:	682b      	ldr	r3, [r5, #0]
 800ac6e:	b103      	cbz	r3, 800ac72 <_read_r+0x1e>
 800ac70:	6023      	str	r3, [r4, #0]
 800ac72:	bd38      	pop	{r3, r4, r5, pc}
 800ac74:	200091dc 	.word	0x200091dc

0800ac78 <cos>:
 800ac78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac7a:	ec53 2b10 	vmov	r2, r3, d0
 800ac7e:	4826      	ldr	r0, [pc, #152]	; (800ad18 <cos+0xa0>)
 800ac80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ac84:	4281      	cmp	r1, r0
 800ac86:	dc06      	bgt.n	800ac96 <cos+0x1e>
 800ac88:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ad10 <cos+0x98>
 800ac8c:	b005      	add	sp, #20
 800ac8e:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac92:	f000 baa9 	b.w	800b1e8 <__kernel_cos>
 800ac96:	4821      	ldr	r0, [pc, #132]	; (800ad1c <cos+0xa4>)
 800ac98:	4281      	cmp	r1, r0
 800ac9a:	dd09      	ble.n	800acb0 <cos+0x38>
 800ac9c:	ee10 0a10 	vmov	r0, s0
 800aca0:	4619      	mov	r1, r3
 800aca2:	f7f5 fb01 	bl	80002a8 <__aeabi_dsub>
 800aca6:	ec41 0b10 	vmov	d0, r0, r1
 800acaa:	b005      	add	sp, #20
 800acac:	f85d fb04 	ldr.w	pc, [sp], #4
 800acb0:	4668      	mov	r0, sp
 800acb2:	f000 f88d 	bl	800add0 <__ieee754_rem_pio2>
 800acb6:	f000 0003 	and.w	r0, r0, #3
 800acba:	2801      	cmp	r0, #1
 800acbc:	d00b      	beq.n	800acd6 <cos+0x5e>
 800acbe:	2802      	cmp	r0, #2
 800acc0:	d016      	beq.n	800acf0 <cos+0x78>
 800acc2:	b9e0      	cbnz	r0, 800acfe <cos+0x86>
 800acc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800acc8:	ed9d 0b00 	vldr	d0, [sp]
 800accc:	f000 fa8c 	bl	800b1e8 <__kernel_cos>
 800acd0:	ec51 0b10 	vmov	r0, r1, d0
 800acd4:	e7e7      	b.n	800aca6 <cos+0x2e>
 800acd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800acda:	ed9d 0b00 	vldr	d0, [sp]
 800acde:	f000 fe9b 	bl	800ba18 <__kernel_sin>
 800ace2:	ec53 2b10 	vmov	r2, r3, d0
 800ace6:	ee10 0a10 	vmov	r0, s0
 800acea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800acee:	e7da      	b.n	800aca6 <cos+0x2e>
 800acf0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800acf4:	ed9d 0b00 	vldr	d0, [sp]
 800acf8:	f000 fa76 	bl	800b1e8 <__kernel_cos>
 800acfc:	e7f1      	b.n	800ace2 <cos+0x6a>
 800acfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad02:	ed9d 0b00 	vldr	d0, [sp]
 800ad06:	2001      	movs	r0, #1
 800ad08:	f000 fe86 	bl	800ba18 <__kernel_sin>
 800ad0c:	e7e0      	b.n	800acd0 <cos+0x58>
 800ad0e:	bf00      	nop
	...
 800ad18:	3fe921fb 	.word	0x3fe921fb
 800ad1c:	7fefffff 	.word	0x7fefffff

0800ad20 <sin>:
 800ad20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad22:	ec53 2b10 	vmov	r2, r3, d0
 800ad26:	4828      	ldr	r0, [pc, #160]	; (800adc8 <sin+0xa8>)
 800ad28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ad2c:	4281      	cmp	r1, r0
 800ad2e:	dc07      	bgt.n	800ad40 <sin+0x20>
 800ad30:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800adc0 <sin+0xa0>
 800ad34:	2000      	movs	r0, #0
 800ad36:	b005      	add	sp, #20
 800ad38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad3c:	f000 be6c 	b.w	800ba18 <__kernel_sin>
 800ad40:	4822      	ldr	r0, [pc, #136]	; (800adcc <sin+0xac>)
 800ad42:	4281      	cmp	r1, r0
 800ad44:	dd09      	ble.n	800ad5a <sin+0x3a>
 800ad46:	ee10 0a10 	vmov	r0, s0
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	f7f5 faac 	bl	80002a8 <__aeabi_dsub>
 800ad50:	ec41 0b10 	vmov	d0, r0, r1
 800ad54:	b005      	add	sp, #20
 800ad56:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad5a:	4668      	mov	r0, sp
 800ad5c:	f000 f838 	bl	800add0 <__ieee754_rem_pio2>
 800ad60:	f000 0003 	and.w	r0, r0, #3
 800ad64:	2801      	cmp	r0, #1
 800ad66:	d00c      	beq.n	800ad82 <sin+0x62>
 800ad68:	2802      	cmp	r0, #2
 800ad6a:	d011      	beq.n	800ad90 <sin+0x70>
 800ad6c:	b9f0      	cbnz	r0, 800adac <sin+0x8c>
 800ad6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad72:	ed9d 0b00 	vldr	d0, [sp]
 800ad76:	2001      	movs	r0, #1
 800ad78:	f000 fe4e 	bl	800ba18 <__kernel_sin>
 800ad7c:	ec51 0b10 	vmov	r0, r1, d0
 800ad80:	e7e6      	b.n	800ad50 <sin+0x30>
 800ad82:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad86:	ed9d 0b00 	vldr	d0, [sp]
 800ad8a:	f000 fa2d 	bl	800b1e8 <__kernel_cos>
 800ad8e:	e7f5      	b.n	800ad7c <sin+0x5c>
 800ad90:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad94:	ed9d 0b00 	vldr	d0, [sp]
 800ad98:	2001      	movs	r0, #1
 800ad9a:	f000 fe3d 	bl	800ba18 <__kernel_sin>
 800ad9e:	ec53 2b10 	vmov	r2, r3, d0
 800ada2:	ee10 0a10 	vmov	r0, s0
 800ada6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800adaa:	e7d1      	b.n	800ad50 <sin+0x30>
 800adac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800adb0:	ed9d 0b00 	vldr	d0, [sp]
 800adb4:	f000 fa18 	bl	800b1e8 <__kernel_cos>
 800adb8:	e7f1      	b.n	800ad9e <sin+0x7e>
 800adba:	bf00      	nop
 800adbc:	f3af 8000 	nop.w
	...
 800adc8:	3fe921fb 	.word	0x3fe921fb
 800adcc:	7fefffff 	.word	0x7fefffff

0800add0 <__ieee754_rem_pio2>:
 800add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	ed2d 8b02 	vpush	{d8}
 800add8:	ec55 4b10 	vmov	r4, r5, d0
 800addc:	4bca      	ldr	r3, [pc, #808]	; (800b108 <__ieee754_rem_pio2+0x338>)
 800adde:	b08b      	sub	sp, #44	; 0x2c
 800ade0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ade4:	4598      	cmp	r8, r3
 800ade6:	4682      	mov	sl, r0
 800ade8:	9502      	str	r5, [sp, #8]
 800adea:	dc08      	bgt.n	800adfe <__ieee754_rem_pio2+0x2e>
 800adec:	2200      	movs	r2, #0
 800adee:	2300      	movs	r3, #0
 800adf0:	ed80 0b00 	vstr	d0, [r0]
 800adf4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800adf8:	f04f 0b00 	mov.w	fp, #0
 800adfc:	e028      	b.n	800ae50 <__ieee754_rem_pio2+0x80>
 800adfe:	4bc3      	ldr	r3, [pc, #780]	; (800b10c <__ieee754_rem_pio2+0x33c>)
 800ae00:	4598      	cmp	r8, r3
 800ae02:	dc78      	bgt.n	800aef6 <__ieee754_rem_pio2+0x126>
 800ae04:	9b02      	ldr	r3, [sp, #8]
 800ae06:	4ec2      	ldr	r6, [pc, #776]	; (800b110 <__ieee754_rem_pio2+0x340>)
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	ee10 0a10 	vmov	r0, s0
 800ae0e:	a3b0      	add	r3, pc, #704	; (adr r3, 800b0d0 <__ieee754_rem_pio2+0x300>)
 800ae10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae14:	4629      	mov	r1, r5
 800ae16:	dd39      	ble.n	800ae8c <__ieee754_rem_pio2+0xbc>
 800ae18:	f7f5 fa46 	bl	80002a8 <__aeabi_dsub>
 800ae1c:	45b0      	cmp	r8, r6
 800ae1e:	4604      	mov	r4, r0
 800ae20:	460d      	mov	r5, r1
 800ae22:	d01b      	beq.n	800ae5c <__ieee754_rem_pio2+0x8c>
 800ae24:	a3ac      	add	r3, pc, #688	; (adr r3, 800b0d8 <__ieee754_rem_pio2+0x308>)
 800ae26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2a:	f7f5 fa3d 	bl	80002a8 <__aeabi_dsub>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	e9ca 2300 	strd	r2, r3, [sl]
 800ae36:	4620      	mov	r0, r4
 800ae38:	4629      	mov	r1, r5
 800ae3a:	f7f5 fa35 	bl	80002a8 <__aeabi_dsub>
 800ae3e:	a3a6      	add	r3, pc, #664	; (adr r3, 800b0d8 <__ieee754_rem_pio2+0x308>)
 800ae40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae44:	f7f5 fa30 	bl	80002a8 <__aeabi_dsub>
 800ae48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae4c:	f04f 0b01 	mov.w	fp, #1
 800ae50:	4658      	mov	r0, fp
 800ae52:	b00b      	add	sp, #44	; 0x2c
 800ae54:	ecbd 8b02 	vpop	{d8}
 800ae58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae5c:	a3a0      	add	r3, pc, #640	; (adr r3, 800b0e0 <__ieee754_rem_pio2+0x310>)
 800ae5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae62:	f7f5 fa21 	bl	80002a8 <__aeabi_dsub>
 800ae66:	a3a0      	add	r3, pc, #640	; (adr r3, 800b0e8 <__ieee754_rem_pio2+0x318>)
 800ae68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	460d      	mov	r5, r1
 800ae70:	f7f5 fa1a 	bl	80002a8 <__aeabi_dsub>
 800ae74:	4602      	mov	r2, r0
 800ae76:	460b      	mov	r3, r1
 800ae78:	e9ca 2300 	strd	r2, r3, [sl]
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	4629      	mov	r1, r5
 800ae80:	f7f5 fa12 	bl	80002a8 <__aeabi_dsub>
 800ae84:	a398      	add	r3, pc, #608	; (adr r3, 800b0e8 <__ieee754_rem_pio2+0x318>)
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	e7db      	b.n	800ae44 <__ieee754_rem_pio2+0x74>
 800ae8c:	f7f5 fa0e 	bl	80002ac <__adddf3>
 800ae90:	45b0      	cmp	r8, r6
 800ae92:	4604      	mov	r4, r0
 800ae94:	460d      	mov	r5, r1
 800ae96:	d016      	beq.n	800aec6 <__ieee754_rem_pio2+0xf6>
 800ae98:	a38f      	add	r3, pc, #572	; (adr r3, 800b0d8 <__ieee754_rem_pio2+0x308>)
 800ae9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9e:	f7f5 fa05 	bl	80002ac <__adddf3>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	e9ca 2300 	strd	r2, r3, [sl]
 800aeaa:	4620      	mov	r0, r4
 800aeac:	4629      	mov	r1, r5
 800aeae:	f7f5 f9fb 	bl	80002a8 <__aeabi_dsub>
 800aeb2:	a389      	add	r3, pc, #548	; (adr r3, 800b0d8 <__ieee754_rem_pio2+0x308>)
 800aeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb8:	f7f5 f9f8 	bl	80002ac <__adddf3>
 800aebc:	f04f 3bff 	mov.w	fp, #4294967295
 800aec0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aec4:	e7c4      	b.n	800ae50 <__ieee754_rem_pio2+0x80>
 800aec6:	a386      	add	r3, pc, #536	; (adr r3, 800b0e0 <__ieee754_rem_pio2+0x310>)
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	f7f5 f9ee 	bl	80002ac <__adddf3>
 800aed0:	a385      	add	r3, pc, #532	; (adr r3, 800b0e8 <__ieee754_rem_pio2+0x318>)
 800aed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed6:	4604      	mov	r4, r0
 800aed8:	460d      	mov	r5, r1
 800aeda:	f7f5 f9e7 	bl	80002ac <__adddf3>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	e9ca 2300 	strd	r2, r3, [sl]
 800aee6:	4620      	mov	r0, r4
 800aee8:	4629      	mov	r1, r5
 800aeea:	f7f5 f9dd 	bl	80002a8 <__aeabi_dsub>
 800aeee:	a37e      	add	r3, pc, #504	; (adr r3, 800b0e8 <__ieee754_rem_pio2+0x318>)
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	e7e0      	b.n	800aeb8 <__ieee754_rem_pio2+0xe8>
 800aef6:	4b87      	ldr	r3, [pc, #540]	; (800b114 <__ieee754_rem_pio2+0x344>)
 800aef8:	4598      	cmp	r8, r3
 800aefa:	f300 80d9 	bgt.w	800b0b0 <__ieee754_rem_pio2+0x2e0>
 800aefe:	f000 fe49 	bl	800bb94 <fabs>
 800af02:	ec55 4b10 	vmov	r4, r5, d0
 800af06:	ee10 0a10 	vmov	r0, s0
 800af0a:	a379      	add	r3, pc, #484	; (adr r3, 800b0f0 <__ieee754_rem_pio2+0x320>)
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	4629      	mov	r1, r5
 800af12:	f7f5 fb81 	bl	8000618 <__aeabi_dmul>
 800af16:	4b80      	ldr	r3, [pc, #512]	; (800b118 <__ieee754_rem_pio2+0x348>)
 800af18:	2200      	movs	r2, #0
 800af1a:	f7f5 f9c7 	bl	80002ac <__adddf3>
 800af1e:	f7f5 fe2b 	bl	8000b78 <__aeabi_d2iz>
 800af22:	4683      	mov	fp, r0
 800af24:	f7f5 fb0e 	bl	8000544 <__aeabi_i2d>
 800af28:	4602      	mov	r2, r0
 800af2a:	460b      	mov	r3, r1
 800af2c:	ec43 2b18 	vmov	d8, r2, r3
 800af30:	a367      	add	r3, pc, #412	; (adr r3, 800b0d0 <__ieee754_rem_pio2+0x300>)
 800af32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af36:	f7f5 fb6f 	bl	8000618 <__aeabi_dmul>
 800af3a:	4602      	mov	r2, r0
 800af3c:	460b      	mov	r3, r1
 800af3e:	4620      	mov	r0, r4
 800af40:	4629      	mov	r1, r5
 800af42:	f7f5 f9b1 	bl	80002a8 <__aeabi_dsub>
 800af46:	a364      	add	r3, pc, #400	; (adr r3, 800b0d8 <__ieee754_rem_pio2+0x308>)
 800af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4c:	4606      	mov	r6, r0
 800af4e:	460f      	mov	r7, r1
 800af50:	ec51 0b18 	vmov	r0, r1, d8
 800af54:	f7f5 fb60 	bl	8000618 <__aeabi_dmul>
 800af58:	f1bb 0f1f 	cmp.w	fp, #31
 800af5c:	4604      	mov	r4, r0
 800af5e:	460d      	mov	r5, r1
 800af60:	dc0d      	bgt.n	800af7e <__ieee754_rem_pio2+0x1ae>
 800af62:	4b6e      	ldr	r3, [pc, #440]	; (800b11c <__ieee754_rem_pio2+0x34c>)
 800af64:	f10b 32ff 	add.w	r2, fp, #4294967295
 800af68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af6c:	4543      	cmp	r3, r8
 800af6e:	d006      	beq.n	800af7e <__ieee754_rem_pio2+0x1ae>
 800af70:	4622      	mov	r2, r4
 800af72:	462b      	mov	r3, r5
 800af74:	4630      	mov	r0, r6
 800af76:	4639      	mov	r1, r7
 800af78:	f7f5 f996 	bl	80002a8 <__aeabi_dsub>
 800af7c:	e00f      	b.n	800af9e <__ieee754_rem_pio2+0x1ce>
 800af7e:	462b      	mov	r3, r5
 800af80:	4622      	mov	r2, r4
 800af82:	4630      	mov	r0, r6
 800af84:	4639      	mov	r1, r7
 800af86:	f7f5 f98f 	bl	80002a8 <__aeabi_dsub>
 800af8a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800af8e:	9303      	str	r3, [sp, #12]
 800af90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800af94:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800af98:	f1b8 0f10 	cmp.w	r8, #16
 800af9c:	dc02      	bgt.n	800afa4 <__ieee754_rem_pio2+0x1d4>
 800af9e:	e9ca 0100 	strd	r0, r1, [sl]
 800afa2:	e039      	b.n	800b018 <__ieee754_rem_pio2+0x248>
 800afa4:	a34e      	add	r3, pc, #312	; (adr r3, 800b0e0 <__ieee754_rem_pio2+0x310>)
 800afa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afaa:	ec51 0b18 	vmov	r0, r1, d8
 800afae:	f7f5 fb33 	bl	8000618 <__aeabi_dmul>
 800afb2:	4604      	mov	r4, r0
 800afb4:	460d      	mov	r5, r1
 800afb6:	4602      	mov	r2, r0
 800afb8:	460b      	mov	r3, r1
 800afba:	4630      	mov	r0, r6
 800afbc:	4639      	mov	r1, r7
 800afbe:	f7f5 f973 	bl	80002a8 <__aeabi_dsub>
 800afc2:	4602      	mov	r2, r0
 800afc4:	460b      	mov	r3, r1
 800afc6:	4680      	mov	r8, r0
 800afc8:	4689      	mov	r9, r1
 800afca:	4630      	mov	r0, r6
 800afcc:	4639      	mov	r1, r7
 800afce:	f7f5 f96b 	bl	80002a8 <__aeabi_dsub>
 800afd2:	4622      	mov	r2, r4
 800afd4:	462b      	mov	r3, r5
 800afd6:	f7f5 f967 	bl	80002a8 <__aeabi_dsub>
 800afda:	a343      	add	r3, pc, #268	; (adr r3, 800b0e8 <__ieee754_rem_pio2+0x318>)
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	4604      	mov	r4, r0
 800afe2:	460d      	mov	r5, r1
 800afe4:	ec51 0b18 	vmov	r0, r1, d8
 800afe8:	f7f5 fb16 	bl	8000618 <__aeabi_dmul>
 800afec:	4622      	mov	r2, r4
 800afee:	462b      	mov	r3, r5
 800aff0:	f7f5 f95a 	bl	80002a8 <__aeabi_dsub>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	4604      	mov	r4, r0
 800affa:	460d      	mov	r5, r1
 800affc:	4640      	mov	r0, r8
 800affe:	4649      	mov	r1, r9
 800b000:	f7f5 f952 	bl	80002a8 <__aeabi_dsub>
 800b004:	9a03      	ldr	r2, [sp, #12]
 800b006:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b00a:	1ad3      	subs	r3, r2, r3
 800b00c:	2b31      	cmp	r3, #49	; 0x31
 800b00e:	dc24      	bgt.n	800b05a <__ieee754_rem_pio2+0x28a>
 800b010:	e9ca 0100 	strd	r0, r1, [sl]
 800b014:	4646      	mov	r6, r8
 800b016:	464f      	mov	r7, r9
 800b018:	e9da 8900 	ldrd	r8, r9, [sl]
 800b01c:	4630      	mov	r0, r6
 800b01e:	4642      	mov	r2, r8
 800b020:	464b      	mov	r3, r9
 800b022:	4639      	mov	r1, r7
 800b024:	f7f5 f940 	bl	80002a8 <__aeabi_dsub>
 800b028:	462b      	mov	r3, r5
 800b02a:	4622      	mov	r2, r4
 800b02c:	f7f5 f93c 	bl	80002a8 <__aeabi_dsub>
 800b030:	9b02      	ldr	r3, [sp, #8]
 800b032:	2b00      	cmp	r3, #0
 800b034:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b038:	f6bf af0a 	bge.w	800ae50 <__ieee754_rem_pio2+0x80>
 800b03c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b040:	f8ca 3004 	str.w	r3, [sl, #4]
 800b044:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b048:	f8ca 8000 	str.w	r8, [sl]
 800b04c:	f8ca 0008 	str.w	r0, [sl, #8]
 800b050:	f8ca 300c 	str.w	r3, [sl, #12]
 800b054:	f1cb 0b00 	rsb	fp, fp, #0
 800b058:	e6fa      	b.n	800ae50 <__ieee754_rem_pio2+0x80>
 800b05a:	a327      	add	r3, pc, #156	; (adr r3, 800b0f8 <__ieee754_rem_pio2+0x328>)
 800b05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b060:	ec51 0b18 	vmov	r0, r1, d8
 800b064:	f7f5 fad8 	bl	8000618 <__aeabi_dmul>
 800b068:	4604      	mov	r4, r0
 800b06a:	460d      	mov	r5, r1
 800b06c:	4602      	mov	r2, r0
 800b06e:	460b      	mov	r3, r1
 800b070:	4640      	mov	r0, r8
 800b072:	4649      	mov	r1, r9
 800b074:	f7f5 f918 	bl	80002a8 <__aeabi_dsub>
 800b078:	4602      	mov	r2, r0
 800b07a:	460b      	mov	r3, r1
 800b07c:	4606      	mov	r6, r0
 800b07e:	460f      	mov	r7, r1
 800b080:	4640      	mov	r0, r8
 800b082:	4649      	mov	r1, r9
 800b084:	f7f5 f910 	bl	80002a8 <__aeabi_dsub>
 800b088:	4622      	mov	r2, r4
 800b08a:	462b      	mov	r3, r5
 800b08c:	f7f5 f90c 	bl	80002a8 <__aeabi_dsub>
 800b090:	a31b      	add	r3, pc, #108	; (adr r3, 800b100 <__ieee754_rem_pio2+0x330>)
 800b092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b096:	4604      	mov	r4, r0
 800b098:	460d      	mov	r5, r1
 800b09a:	ec51 0b18 	vmov	r0, r1, d8
 800b09e:	f7f5 fabb 	bl	8000618 <__aeabi_dmul>
 800b0a2:	4622      	mov	r2, r4
 800b0a4:	462b      	mov	r3, r5
 800b0a6:	f7f5 f8ff 	bl	80002a8 <__aeabi_dsub>
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	460d      	mov	r5, r1
 800b0ae:	e75f      	b.n	800af70 <__ieee754_rem_pio2+0x1a0>
 800b0b0:	4b1b      	ldr	r3, [pc, #108]	; (800b120 <__ieee754_rem_pio2+0x350>)
 800b0b2:	4598      	cmp	r8, r3
 800b0b4:	dd36      	ble.n	800b124 <__ieee754_rem_pio2+0x354>
 800b0b6:	ee10 2a10 	vmov	r2, s0
 800b0ba:	462b      	mov	r3, r5
 800b0bc:	4620      	mov	r0, r4
 800b0be:	4629      	mov	r1, r5
 800b0c0:	f7f5 f8f2 	bl	80002a8 <__aeabi_dsub>
 800b0c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b0c8:	e9ca 0100 	strd	r0, r1, [sl]
 800b0cc:	e694      	b.n	800adf8 <__ieee754_rem_pio2+0x28>
 800b0ce:	bf00      	nop
 800b0d0:	54400000 	.word	0x54400000
 800b0d4:	3ff921fb 	.word	0x3ff921fb
 800b0d8:	1a626331 	.word	0x1a626331
 800b0dc:	3dd0b461 	.word	0x3dd0b461
 800b0e0:	1a600000 	.word	0x1a600000
 800b0e4:	3dd0b461 	.word	0x3dd0b461
 800b0e8:	2e037073 	.word	0x2e037073
 800b0ec:	3ba3198a 	.word	0x3ba3198a
 800b0f0:	6dc9c883 	.word	0x6dc9c883
 800b0f4:	3fe45f30 	.word	0x3fe45f30
 800b0f8:	2e000000 	.word	0x2e000000
 800b0fc:	3ba3198a 	.word	0x3ba3198a
 800b100:	252049c1 	.word	0x252049c1
 800b104:	397b839a 	.word	0x397b839a
 800b108:	3fe921fb 	.word	0x3fe921fb
 800b10c:	4002d97b 	.word	0x4002d97b
 800b110:	3ff921fb 	.word	0x3ff921fb
 800b114:	413921fb 	.word	0x413921fb
 800b118:	3fe00000 	.word	0x3fe00000
 800b11c:	0800c1f4 	.word	0x0800c1f4
 800b120:	7fefffff 	.word	0x7fefffff
 800b124:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b128:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b12c:	ee10 0a10 	vmov	r0, s0
 800b130:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b134:	ee10 6a10 	vmov	r6, s0
 800b138:	460f      	mov	r7, r1
 800b13a:	f7f5 fd1d 	bl	8000b78 <__aeabi_d2iz>
 800b13e:	f7f5 fa01 	bl	8000544 <__aeabi_i2d>
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
 800b146:	4630      	mov	r0, r6
 800b148:	4639      	mov	r1, r7
 800b14a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b14e:	f7f5 f8ab 	bl	80002a8 <__aeabi_dsub>
 800b152:	4b23      	ldr	r3, [pc, #140]	; (800b1e0 <__ieee754_rem_pio2+0x410>)
 800b154:	2200      	movs	r2, #0
 800b156:	f7f5 fa5f 	bl	8000618 <__aeabi_dmul>
 800b15a:	460f      	mov	r7, r1
 800b15c:	4606      	mov	r6, r0
 800b15e:	f7f5 fd0b 	bl	8000b78 <__aeabi_d2iz>
 800b162:	f7f5 f9ef 	bl	8000544 <__aeabi_i2d>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	4630      	mov	r0, r6
 800b16c:	4639      	mov	r1, r7
 800b16e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b172:	f7f5 f899 	bl	80002a8 <__aeabi_dsub>
 800b176:	4b1a      	ldr	r3, [pc, #104]	; (800b1e0 <__ieee754_rem_pio2+0x410>)
 800b178:	2200      	movs	r2, #0
 800b17a:	f7f5 fa4d 	bl	8000618 <__aeabi_dmul>
 800b17e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b182:	ad04      	add	r5, sp, #16
 800b184:	f04f 0803 	mov.w	r8, #3
 800b188:	46a9      	mov	r9, r5
 800b18a:	2600      	movs	r6, #0
 800b18c:	2700      	movs	r7, #0
 800b18e:	4632      	mov	r2, r6
 800b190:	463b      	mov	r3, r7
 800b192:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b196:	46c3      	mov	fp, r8
 800b198:	3d08      	subs	r5, #8
 800b19a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b19e:	f7f5 fca3 	bl	8000ae8 <__aeabi_dcmpeq>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d1f3      	bne.n	800b18e <__ieee754_rem_pio2+0x3be>
 800b1a6:	4b0f      	ldr	r3, [pc, #60]	; (800b1e4 <__ieee754_rem_pio2+0x414>)
 800b1a8:	9301      	str	r3, [sp, #4]
 800b1aa:	2302      	movs	r3, #2
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	465b      	mov	r3, fp
 800b1b2:	4651      	mov	r1, sl
 800b1b4:	4648      	mov	r0, r9
 800b1b6:	f000 f8df 	bl	800b378 <__kernel_rem_pio2>
 800b1ba:	9b02      	ldr	r3, [sp, #8]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	4683      	mov	fp, r0
 800b1c0:	f6bf ae46 	bge.w	800ae50 <__ieee754_rem_pio2+0x80>
 800b1c4:	e9da 2100 	ldrd	r2, r1, [sl]
 800b1c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1cc:	e9ca 2300 	strd	r2, r3, [sl]
 800b1d0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b1d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1d8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b1dc:	e73a      	b.n	800b054 <__ieee754_rem_pio2+0x284>
 800b1de:	bf00      	nop
 800b1e0:	41700000 	.word	0x41700000
 800b1e4:	0800c274 	.word	0x0800c274

0800b1e8 <__kernel_cos>:
 800b1e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ec:	ec57 6b10 	vmov	r6, r7, d0
 800b1f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b1f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b1f8:	ed8d 1b00 	vstr	d1, [sp]
 800b1fc:	da07      	bge.n	800b20e <__kernel_cos+0x26>
 800b1fe:	ee10 0a10 	vmov	r0, s0
 800b202:	4639      	mov	r1, r7
 800b204:	f7f5 fcb8 	bl	8000b78 <__aeabi_d2iz>
 800b208:	2800      	cmp	r0, #0
 800b20a:	f000 8088 	beq.w	800b31e <__kernel_cos+0x136>
 800b20e:	4632      	mov	r2, r6
 800b210:	463b      	mov	r3, r7
 800b212:	4630      	mov	r0, r6
 800b214:	4639      	mov	r1, r7
 800b216:	f7f5 f9ff 	bl	8000618 <__aeabi_dmul>
 800b21a:	4b51      	ldr	r3, [pc, #324]	; (800b360 <__kernel_cos+0x178>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	4604      	mov	r4, r0
 800b220:	460d      	mov	r5, r1
 800b222:	f7f5 f9f9 	bl	8000618 <__aeabi_dmul>
 800b226:	a340      	add	r3, pc, #256	; (adr r3, 800b328 <__kernel_cos+0x140>)
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	4682      	mov	sl, r0
 800b22e:	468b      	mov	fp, r1
 800b230:	4620      	mov	r0, r4
 800b232:	4629      	mov	r1, r5
 800b234:	f7f5 f9f0 	bl	8000618 <__aeabi_dmul>
 800b238:	a33d      	add	r3, pc, #244	; (adr r3, 800b330 <__kernel_cos+0x148>)
 800b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23e:	f7f5 f835 	bl	80002ac <__adddf3>
 800b242:	4622      	mov	r2, r4
 800b244:	462b      	mov	r3, r5
 800b246:	f7f5 f9e7 	bl	8000618 <__aeabi_dmul>
 800b24a:	a33b      	add	r3, pc, #236	; (adr r3, 800b338 <__kernel_cos+0x150>)
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	f7f5 f82a 	bl	80002a8 <__aeabi_dsub>
 800b254:	4622      	mov	r2, r4
 800b256:	462b      	mov	r3, r5
 800b258:	f7f5 f9de 	bl	8000618 <__aeabi_dmul>
 800b25c:	a338      	add	r3, pc, #224	; (adr r3, 800b340 <__kernel_cos+0x158>)
 800b25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b262:	f7f5 f823 	bl	80002ac <__adddf3>
 800b266:	4622      	mov	r2, r4
 800b268:	462b      	mov	r3, r5
 800b26a:	f7f5 f9d5 	bl	8000618 <__aeabi_dmul>
 800b26e:	a336      	add	r3, pc, #216	; (adr r3, 800b348 <__kernel_cos+0x160>)
 800b270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b274:	f7f5 f818 	bl	80002a8 <__aeabi_dsub>
 800b278:	4622      	mov	r2, r4
 800b27a:	462b      	mov	r3, r5
 800b27c:	f7f5 f9cc 	bl	8000618 <__aeabi_dmul>
 800b280:	a333      	add	r3, pc, #204	; (adr r3, 800b350 <__kernel_cos+0x168>)
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	f7f5 f811 	bl	80002ac <__adddf3>
 800b28a:	4622      	mov	r2, r4
 800b28c:	462b      	mov	r3, r5
 800b28e:	f7f5 f9c3 	bl	8000618 <__aeabi_dmul>
 800b292:	4622      	mov	r2, r4
 800b294:	462b      	mov	r3, r5
 800b296:	f7f5 f9bf 	bl	8000618 <__aeabi_dmul>
 800b29a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b29e:	4604      	mov	r4, r0
 800b2a0:	460d      	mov	r5, r1
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	4639      	mov	r1, r7
 800b2a6:	f7f5 f9b7 	bl	8000618 <__aeabi_dmul>
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f7f4 fff9 	bl	80002a8 <__aeabi_dsub>
 800b2b6:	4b2b      	ldr	r3, [pc, #172]	; (800b364 <__kernel_cos+0x17c>)
 800b2b8:	4598      	cmp	r8, r3
 800b2ba:	4606      	mov	r6, r0
 800b2bc:	460f      	mov	r7, r1
 800b2be:	dc10      	bgt.n	800b2e2 <__kernel_cos+0xfa>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4650      	mov	r0, sl
 800b2c6:	4659      	mov	r1, fp
 800b2c8:	f7f4 ffee 	bl	80002a8 <__aeabi_dsub>
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	4926      	ldr	r1, [pc, #152]	; (800b368 <__kernel_cos+0x180>)
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	f7f4 ffe8 	bl	80002a8 <__aeabi_dsub>
 800b2d8:	ec41 0b10 	vmov	d0, r0, r1
 800b2dc:	b003      	add	sp, #12
 800b2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e2:	4b22      	ldr	r3, [pc, #136]	; (800b36c <__kernel_cos+0x184>)
 800b2e4:	4920      	ldr	r1, [pc, #128]	; (800b368 <__kernel_cos+0x180>)
 800b2e6:	4598      	cmp	r8, r3
 800b2e8:	bfcc      	ite	gt
 800b2ea:	4d21      	ldrgt	r5, [pc, #132]	; (800b370 <__kernel_cos+0x188>)
 800b2ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b2f0:	2400      	movs	r4, #0
 800b2f2:	4622      	mov	r2, r4
 800b2f4:	462b      	mov	r3, r5
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	f7f4 ffd6 	bl	80002a8 <__aeabi_dsub>
 800b2fc:	4622      	mov	r2, r4
 800b2fe:	4680      	mov	r8, r0
 800b300:	4689      	mov	r9, r1
 800b302:	462b      	mov	r3, r5
 800b304:	4650      	mov	r0, sl
 800b306:	4659      	mov	r1, fp
 800b308:	f7f4 ffce 	bl	80002a8 <__aeabi_dsub>
 800b30c:	4632      	mov	r2, r6
 800b30e:	463b      	mov	r3, r7
 800b310:	f7f4 ffca 	bl	80002a8 <__aeabi_dsub>
 800b314:	4602      	mov	r2, r0
 800b316:	460b      	mov	r3, r1
 800b318:	4640      	mov	r0, r8
 800b31a:	4649      	mov	r1, r9
 800b31c:	e7da      	b.n	800b2d4 <__kernel_cos+0xec>
 800b31e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b358 <__kernel_cos+0x170>
 800b322:	e7db      	b.n	800b2dc <__kernel_cos+0xf4>
 800b324:	f3af 8000 	nop.w
 800b328:	be8838d4 	.word	0xbe8838d4
 800b32c:	bda8fae9 	.word	0xbda8fae9
 800b330:	bdb4b1c4 	.word	0xbdb4b1c4
 800b334:	3e21ee9e 	.word	0x3e21ee9e
 800b338:	809c52ad 	.word	0x809c52ad
 800b33c:	3e927e4f 	.word	0x3e927e4f
 800b340:	19cb1590 	.word	0x19cb1590
 800b344:	3efa01a0 	.word	0x3efa01a0
 800b348:	16c15177 	.word	0x16c15177
 800b34c:	3f56c16c 	.word	0x3f56c16c
 800b350:	5555554c 	.word	0x5555554c
 800b354:	3fa55555 	.word	0x3fa55555
 800b358:	00000000 	.word	0x00000000
 800b35c:	3ff00000 	.word	0x3ff00000
 800b360:	3fe00000 	.word	0x3fe00000
 800b364:	3fd33332 	.word	0x3fd33332
 800b368:	3ff00000 	.word	0x3ff00000
 800b36c:	3fe90000 	.word	0x3fe90000
 800b370:	3fd20000 	.word	0x3fd20000
 800b374:	00000000 	.word	0x00000000

0800b378 <__kernel_rem_pio2>:
 800b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37c:	ed2d 8b02 	vpush	{d8}
 800b380:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b384:	f112 0f14 	cmn.w	r2, #20
 800b388:	9308      	str	r3, [sp, #32]
 800b38a:	9101      	str	r1, [sp, #4]
 800b38c:	4bc4      	ldr	r3, [pc, #784]	; (800b6a0 <__kernel_rem_pio2+0x328>)
 800b38e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b390:	900b      	str	r0, [sp, #44]	; 0x2c
 800b392:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b396:	9302      	str	r3, [sp, #8]
 800b398:	9b08      	ldr	r3, [sp, #32]
 800b39a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b39e:	bfa8      	it	ge
 800b3a0:	1ed4      	subge	r4, r2, #3
 800b3a2:	9306      	str	r3, [sp, #24]
 800b3a4:	bfb2      	itee	lt
 800b3a6:	2400      	movlt	r4, #0
 800b3a8:	2318      	movge	r3, #24
 800b3aa:	fb94 f4f3 	sdivge	r4, r4, r3
 800b3ae:	f06f 0317 	mvn.w	r3, #23
 800b3b2:	fb04 3303 	mla	r3, r4, r3, r3
 800b3b6:	eb03 0a02 	add.w	sl, r3, r2
 800b3ba:	9b02      	ldr	r3, [sp, #8]
 800b3bc:	9a06      	ldr	r2, [sp, #24]
 800b3be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b690 <__kernel_rem_pio2+0x318>
 800b3c2:	eb03 0802 	add.w	r8, r3, r2
 800b3c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b3c8:	1aa7      	subs	r7, r4, r2
 800b3ca:	ae22      	add	r6, sp, #136	; 0x88
 800b3cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b3d0:	2500      	movs	r5, #0
 800b3d2:	4545      	cmp	r5, r8
 800b3d4:	dd13      	ble.n	800b3fe <__kernel_rem_pio2+0x86>
 800b3d6:	9b08      	ldr	r3, [sp, #32]
 800b3d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b690 <__kernel_rem_pio2+0x318>
 800b3dc:	aa22      	add	r2, sp, #136	; 0x88
 800b3de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b3e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b3e6:	f04f 0800 	mov.w	r8, #0
 800b3ea:	9b02      	ldr	r3, [sp, #8]
 800b3ec:	4598      	cmp	r8, r3
 800b3ee:	dc2f      	bgt.n	800b450 <__kernel_rem_pio2+0xd8>
 800b3f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b3f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b3f8:	462f      	mov	r7, r5
 800b3fa:	2600      	movs	r6, #0
 800b3fc:	e01b      	b.n	800b436 <__kernel_rem_pio2+0xbe>
 800b3fe:	42ef      	cmn	r7, r5
 800b400:	d407      	bmi.n	800b412 <__kernel_rem_pio2+0x9a>
 800b402:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b406:	f7f5 f89d 	bl	8000544 <__aeabi_i2d>
 800b40a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b40e:	3501      	adds	r5, #1
 800b410:	e7df      	b.n	800b3d2 <__kernel_rem_pio2+0x5a>
 800b412:	ec51 0b18 	vmov	r0, r1, d8
 800b416:	e7f8      	b.n	800b40a <__kernel_rem_pio2+0x92>
 800b418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b41c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b420:	f7f5 f8fa 	bl	8000618 <__aeabi_dmul>
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b42c:	f7f4 ff3e 	bl	80002ac <__adddf3>
 800b430:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b434:	3601      	adds	r6, #1
 800b436:	9b06      	ldr	r3, [sp, #24]
 800b438:	429e      	cmp	r6, r3
 800b43a:	f1a7 0708 	sub.w	r7, r7, #8
 800b43e:	ddeb      	ble.n	800b418 <__kernel_rem_pio2+0xa0>
 800b440:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b444:	f108 0801 	add.w	r8, r8, #1
 800b448:	ecab 7b02 	vstmia	fp!, {d7}
 800b44c:	3508      	adds	r5, #8
 800b44e:	e7cc      	b.n	800b3ea <__kernel_rem_pio2+0x72>
 800b450:	9b02      	ldr	r3, [sp, #8]
 800b452:	aa0e      	add	r2, sp, #56	; 0x38
 800b454:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b458:	930d      	str	r3, [sp, #52]	; 0x34
 800b45a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b45c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b460:	9c02      	ldr	r4, [sp, #8]
 800b462:	930c      	str	r3, [sp, #48]	; 0x30
 800b464:	00e3      	lsls	r3, r4, #3
 800b466:	930a      	str	r3, [sp, #40]	; 0x28
 800b468:	ab9a      	add	r3, sp, #616	; 0x268
 800b46a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b46e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b472:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b476:	ab72      	add	r3, sp, #456	; 0x1c8
 800b478:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b47c:	46c3      	mov	fp, r8
 800b47e:	46a1      	mov	r9, r4
 800b480:	f1b9 0f00 	cmp.w	r9, #0
 800b484:	f1a5 0508 	sub.w	r5, r5, #8
 800b488:	dc77      	bgt.n	800b57a <__kernel_rem_pio2+0x202>
 800b48a:	ec47 6b10 	vmov	d0, r6, r7
 800b48e:	4650      	mov	r0, sl
 800b490:	f000 fc0a 	bl	800bca8 <scalbn>
 800b494:	ec57 6b10 	vmov	r6, r7, d0
 800b498:	2200      	movs	r2, #0
 800b49a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b49e:	ee10 0a10 	vmov	r0, s0
 800b4a2:	4639      	mov	r1, r7
 800b4a4:	f7f5 f8b8 	bl	8000618 <__aeabi_dmul>
 800b4a8:	ec41 0b10 	vmov	d0, r0, r1
 800b4ac:	f000 fb7c 	bl	800bba8 <floor>
 800b4b0:	4b7c      	ldr	r3, [pc, #496]	; (800b6a4 <__kernel_rem_pio2+0x32c>)
 800b4b2:	ec51 0b10 	vmov	r0, r1, d0
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f7f5 f8ae 	bl	8000618 <__aeabi_dmul>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	f7f4 fef0 	bl	80002a8 <__aeabi_dsub>
 800b4c8:	460f      	mov	r7, r1
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	f7f5 fb54 	bl	8000b78 <__aeabi_d2iz>
 800b4d0:	9004      	str	r0, [sp, #16]
 800b4d2:	f7f5 f837 	bl	8000544 <__aeabi_i2d>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4630      	mov	r0, r6
 800b4dc:	4639      	mov	r1, r7
 800b4de:	f7f4 fee3 	bl	80002a8 <__aeabi_dsub>
 800b4e2:	f1ba 0f00 	cmp.w	sl, #0
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	460f      	mov	r7, r1
 800b4ea:	dd6d      	ble.n	800b5c8 <__kernel_rem_pio2+0x250>
 800b4ec:	1e62      	subs	r2, r4, #1
 800b4ee:	ab0e      	add	r3, sp, #56	; 0x38
 800b4f0:	9d04      	ldr	r5, [sp, #16]
 800b4f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b4f6:	f1ca 0118 	rsb	r1, sl, #24
 800b4fa:	fa40 f301 	asr.w	r3, r0, r1
 800b4fe:	441d      	add	r5, r3
 800b500:	408b      	lsls	r3, r1
 800b502:	1ac0      	subs	r0, r0, r3
 800b504:	ab0e      	add	r3, sp, #56	; 0x38
 800b506:	9504      	str	r5, [sp, #16]
 800b508:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b50c:	f1ca 0317 	rsb	r3, sl, #23
 800b510:	fa40 fb03 	asr.w	fp, r0, r3
 800b514:	f1bb 0f00 	cmp.w	fp, #0
 800b518:	dd65      	ble.n	800b5e6 <__kernel_rem_pio2+0x26e>
 800b51a:	9b04      	ldr	r3, [sp, #16]
 800b51c:	2200      	movs	r2, #0
 800b51e:	3301      	adds	r3, #1
 800b520:	9304      	str	r3, [sp, #16]
 800b522:	4615      	mov	r5, r2
 800b524:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b528:	4294      	cmp	r4, r2
 800b52a:	f300 809c 	bgt.w	800b666 <__kernel_rem_pio2+0x2ee>
 800b52e:	f1ba 0f00 	cmp.w	sl, #0
 800b532:	dd07      	ble.n	800b544 <__kernel_rem_pio2+0x1cc>
 800b534:	f1ba 0f01 	cmp.w	sl, #1
 800b538:	f000 80c0 	beq.w	800b6bc <__kernel_rem_pio2+0x344>
 800b53c:	f1ba 0f02 	cmp.w	sl, #2
 800b540:	f000 80c6 	beq.w	800b6d0 <__kernel_rem_pio2+0x358>
 800b544:	f1bb 0f02 	cmp.w	fp, #2
 800b548:	d14d      	bne.n	800b5e6 <__kernel_rem_pio2+0x26e>
 800b54a:	4632      	mov	r2, r6
 800b54c:	463b      	mov	r3, r7
 800b54e:	4956      	ldr	r1, [pc, #344]	; (800b6a8 <__kernel_rem_pio2+0x330>)
 800b550:	2000      	movs	r0, #0
 800b552:	f7f4 fea9 	bl	80002a8 <__aeabi_dsub>
 800b556:	4606      	mov	r6, r0
 800b558:	460f      	mov	r7, r1
 800b55a:	2d00      	cmp	r5, #0
 800b55c:	d043      	beq.n	800b5e6 <__kernel_rem_pio2+0x26e>
 800b55e:	4650      	mov	r0, sl
 800b560:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b698 <__kernel_rem_pio2+0x320>
 800b564:	f000 fba0 	bl	800bca8 <scalbn>
 800b568:	4630      	mov	r0, r6
 800b56a:	4639      	mov	r1, r7
 800b56c:	ec53 2b10 	vmov	r2, r3, d0
 800b570:	f7f4 fe9a 	bl	80002a8 <__aeabi_dsub>
 800b574:	4606      	mov	r6, r0
 800b576:	460f      	mov	r7, r1
 800b578:	e035      	b.n	800b5e6 <__kernel_rem_pio2+0x26e>
 800b57a:	4b4c      	ldr	r3, [pc, #304]	; (800b6ac <__kernel_rem_pio2+0x334>)
 800b57c:	2200      	movs	r2, #0
 800b57e:	4630      	mov	r0, r6
 800b580:	4639      	mov	r1, r7
 800b582:	f7f5 f849 	bl	8000618 <__aeabi_dmul>
 800b586:	f7f5 faf7 	bl	8000b78 <__aeabi_d2iz>
 800b58a:	f7f4 ffdb 	bl	8000544 <__aeabi_i2d>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	ec43 2b18 	vmov	d8, r2, r3
 800b596:	4b46      	ldr	r3, [pc, #280]	; (800b6b0 <__kernel_rem_pio2+0x338>)
 800b598:	2200      	movs	r2, #0
 800b59a:	f7f5 f83d 	bl	8000618 <__aeabi_dmul>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	4639      	mov	r1, r7
 800b5a6:	f7f4 fe7f 	bl	80002a8 <__aeabi_dsub>
 800b5aa:	f7f5 fae5 	bl	8000b78 <__aeabi_d2iz>
 800b5ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b5b2:	f84b 0b04 	str.w	r0, [fp], #4
 800b5b6:	ec51 0b18 	vmov	r0, r1, d8
 800b5ba:	f7f4 fe77 	bl	80002ac <__adddf3>
 800b5be:	f109 39ff 	add.w	r9, r9, #4294967295
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	460f      	mov	r7, r1
 800b5c6:	e75b      	b.n	800b480 <__kernel_rem_pio2+0x108>
 800b5c8:	d106      	bne.n	800b5d8 <__kernel_rem_pio2+0x260>
 800b5ca:	1e63      	subs	r3, r4, #1
 800b5cc:	aa0e      	add	r2, sp, #56	; 0x38
 800b5ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b5d2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b5d6:	e79d      	b.n	800b514 <__kernel_rem_pio2+0x19c>
 800b5d8:	4b36      	ldr	r3, [pc, #216]	; (800b6b4 <__kernel_rem_pio2+0x33c>)
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f7f5 faa2 	bl	8000b24 <__aeabi_dcmpge>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d13d      	bne.n	800b660 <__kernel_rem_pio2+0x2e8>
 800b5e4:	4683      	mov	fp, r0
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	4639      	mov	r1, r7
 800b5ee:	f7f5 fa7b 	bl	8000ae8 <__aeabi_dcmpeq>
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	f000 80c0 	beq.w	800b778 <__kernel_rem_pio2+0x400>
 800b5f8:	1e65      	subs	r5, r4, #1
 800b5fa:	462b      	mov	r3, r5
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	9902      	ldr	r1, [sp, #8]
 800b600:	428b      	cmp	r3, r1
 800b602:	da6c      	bge.n	800b6de <__kernel_rem_pio2+0x366>
 800b604:	2a00      	cmp	r2, #0
 800b606:	f000 8089 	beq.w	800b71c <__kernel_rem_pio2+0x3a4>
 800b60a:	ab0e      	add	r3, sp, #56	; 0x38
 800b60c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b610:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 80ad 	beq.w	800b774 <__kernel_rem_pio2+0x3fc>
 800b61a:	4650      	mov	r0, sl
 800b61c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b698 <__kernel_rem_pio2+0x320>
 800b620:	f000 fb42 	bl	800bca8 <scalbn>
 800b624:	ab9a      	add	r3, sp, #616	; 0x268
 800b626:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b62a:	ec57 6b10 	vmov	r6, r7, d0
 800b62e:	00ec      	lsls	r4, r5, #3
 800b630:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b634:	46aa      	mov	sl, r5
 800b636:	f1ba 0f00 	cmp.w	sl, #0
 800b63a:	f280 80d6 	bge.w	800b7ea <__kernel_rem_pio2+0x472>
 800b63e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b690 <__kernel_rem_pio2+0x318>
 800b642:	462e      	mov	r6, r5
 800b644:	2e00      	cmp	r6, #0
 800b646:	f2c0 8104 	blt.w	800b852 <__kernel_rem_pio2+0x4da>
 800b64a:	ab72      	add	r3, sp, #456	; 0x1c8
 800b64c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b650:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b6b8 <__kernel_rem_pio2+0x340>
 800b654:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b658:	f04f 0800 	mov.w	r8, #0
 800b65c:	1baf      	subs	r7, r5, r6
 800b65e:	e0ea      	b.n	800b836 <__kernel_rem_pio2+0x4be>
 800b660:	f04f 0b02 	mov.w	fp, #2
 800b664:	e759      	b.n	800b51a <__kernel_rem_pio2+0x1a2>
 800b666:	f8d8 3000 	ldr.w	r3, [r8]
 800b66a:	b955      	cbnz	r5, 800b682 <__kernel_rem_pio2+0x30a>
 800b66c:	b123      	cbz	r3, 800b678 <__kernel_rem_pio2+0x300>
 800b66e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b672:	f8c8 3000 	str.w	r3, [r8]
 800b676:	2301      	movs	r3, #1
 800b678:	3201      	adds	r2, #1
 800b67a:	f108 0804 	add.w	r8, r8, #4
 800b67e:	461d      	mov	r5, r3
 800b680:	e752      	b.n	800b528 <__kernel_rem_pio2+0x1b0>
 800b682:	1acb      	subs	r3, r1, r3
 800b684:	f8c8 3000 	str.w	r3, [r8]
 800b688:	462b      	mov	r3, r5
 800b68a:	e7f5      	b.n	800b678 <__kernel_rem_pio2+0x300>
 800b68c:	f3af 8000 	nop.w
	...
 800b69c:	3ff00000 	.word	0x3ff00000
 800b6a0:	0800c3c0 	.word	0x0800c3c0
 800b6a4:	40200000 	.word	0x40200000
 800b6a8:	3ff00000 	.word	0x3ff00000
 800b6ac:	3e700000 	.word	0x3e700000
 800b6b0:	41700000 	.word	0x41700000
 800b6b4:	3fe00000 	.word	0x3fe00000
 800b6b8:	0800c380 	.word	0x0800c380
 800b6bc:	1e62      	subs	r2, r4, #1
 800b6be:	ab0e      	add	r3, sp, #56	; 0x38
 800b6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b6c8:	a90e      	add	r1, sp, #56	; 0x38
 800b6ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b6ce:	e739      	b.n	800b544 <__kernel_rem_pio2+0x1cc>
 800b6d0:	1e62      	subs	r2, r4, #1
 800b6d2:	ab0e      	add	r3, sp, #56	; 0x38
 800b6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b6dc:	e7f4      	b.n	800b6c8 <__kernel_rem_pio2+0x350>
 800b6de:	a90e      	add	r1, sp, #56	; 0x38
 800b6e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	430a      	orrs	r2, r1
 800b6e8:	e789      	b.n	800b5fe <__kernel_rem_pio2+0x286>
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b6f0:	2900      	cmp	r1, #0
 800b6f2:	d0fa      	beq.n	800b6ea <__kernel_rem_pio2+0x372>
 800b6f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6f6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b6fa:	446a      	add	r2, sp
 800b6fc:	3a98      	subs	r2, #152	; 0x98
 800b6fe:	920a      	str	r2, [sp, #40]	; 0x28
 800b700:	9a08      	ldr	r2, [sp, #32]
 800b702:	18e3      	adds	r3, r4, r3
 800b704:	18a5      	adds	r5, r4, r2
 800b706:	aa22      	add	r2, sp, #136	; 0x88
 800b708:	f104 0801 	add.w	r8, r4, #1
 800b70c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b710:	9304      	str	r3, [sp, #16]
 800b712:	9b04      	ldr	r3, [sp, #16]
 800b714:	4543      	cmp	r3, r8
 800b716:	da04      	bge.n	800b722 <__kernel_rem_pio2+0x3aa>
 800b718:	461c      	mov	r4, r3
 800b71a:	e6a3      	b.n	800b464 <__kernel_rem_pio2+0xec>
 800b71c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b71e:	2301      	movs	r3, #1
 800b720:	e7e4      	b.n	800b6ec <__kernel_rem_pio2+0x374>
 800b722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b724:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b728:	f7f4 ff0c 	bl	8000544 <__aeabi_i2d>
 800b72c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b732:	46ab      	mov	fp, r5
 800b734:	461c      	mov	r4, r3
 800b736:	f04f 0900 	mov.w	r9, #0
 800b73a:	2600      	movs	r6, #0
 800b73c:	2700      	movs	r7, #0
 800b73e:	9b06      	ldr	r3, [sp, #24]
 800b740:	4599      	cmp	r9, r3
 800b742:	dd06      	ble.n	800b752 <__kernel_rem_pio2+0x3da>
 800b744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b746:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b74a:	f108 0801 	add.w	r8, r8, #1
 800b74e:	930a      	str	r3, [sp, #40]	; 0x28
 800b750:	e7df      	b.n	800b712 <__kernel_rem_pio2+0x39a>
 800b752:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b756:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b75a:	f7f4 ff5d 	bl	8000618 <__aeabi_dmul>
 800b75e:	4602      	mov	r2, r0
 800b760:	460b      	mov	r3, r1
 800b762:	4630      	mov	r0, r6
 800b764:	4639      	mov	r1, r7
 800b766:	f7f4 fda1 	bl	80002ac <__adddf3>
 800b76a:	f109 0901 	add.w	r9, r9, #1
 800b76e:	4606      	mov	r6, r0
 800b770:	460f      	mov	r7, r1
 800b772:	e7e4      	b.n	800b73e <__kernel_rem_pio2+0x3c6>
 800b774:	3d01      	subs	r5, #1
 800b776:	e748      	b.n	800b60a <__kernel_rem_pio2+0x292>
 800b778:	ec47 6b10 	vmov	d0, r6, r7
 800b77c:	f1ca 0000 	rsb	r0, sl, #0
 800b780:	f000 fa92 	bl	800bca8 <scalbn>
 800b784:	ec57 6b10 	vmov	r6, r7, d0
 800b788:	4ba0      	ldr	r3, [pc, #640]	; (800ba0c <__kernel_rem_pio2+0x694>)
 800b78a:	ee10 0a10 	vmov	r0, s0
 800b78e:	2200      	movs	r2, #0
 800b790:	4639      	mov	r1, r7
 800b792:	f7f5 f9c7 	bl	8000b24 <__aeabi_dcmpge>
 800b796:	b1f8      	cbz	r0, 800b7d8 <__kernel_rem_pio2+0x460>
 800b798:	4b9d      	ldr	r3, [pc, #628]	; (800ba10 <__kernel_rem_pio2+0x698>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	4630      	mov	r0, r6
 800b79e:	4639      	mov	r1, r7
 800b7a0:	f7f4 ff3a 	bl	8000618 <__aeabi_dmul>
 800b7a4:	f7f5 f9e8 	bl	8000b78 <__aeabi_d2iz>
 800b7a8:	4680      	mov	r8, r0
 800b7aa:	f7f4 fecb 	bl	8000544 <__aeabi_i2d>
 800b7ae:	4b97      	ldr	r3, [pc, #604]	; (800ba0c <__kernel_rem_pio2+0x694>)
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f7f4 ff31 	bl	8000618 <__aeabi_dmul>
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f7f4 fd73 	bl	80002a8 <__aeabi_dsub>
 800b7c2:	f7f5 f9d9 	bl	8000b78 <__aeabi_d2iz>
 800b7c6:	1c65      	adds	r5, r4, #1
 800b7c8:	ab0e      	add	r3, sp, #56	; 0x38
 800b7ca:	f10a 0a18 	add.w	sl, sl, #24
 800b7ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b7d2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b7d6:	e720      	b.n	800b61a <__kernel_rem_pio2+0x2a2>
 800b7d8:	4630      	mov	r0, r6
 800b7da:	4639      	mov	r1, r7
 800b7dc:	f7f5 f9cc 	bl	8000b78 <__aeabi_d2iz>
 800b7e0:	ab0e      	add	r3, sp, #56	; 0x38
 800b7e2:	4625      	mov	r5, r4
 800b7e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b7e8:	e717      	b.n	800b61a <__kernel_rem_pio2+0x2a2>
 800b7ea:	ab0e      	add	r3, sp, #56	; 0x38
 800b7ec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b7f0:	f7f4 fea8 	bl	8000544 <__aeabi_i2d>
 800b7f4:	4632      	mov	r2, r6
 800b7f6:	463b      	mov	r3, r7
 800b7f8:	f7f4 ff0e 	bl	8000618 <__aeabi_dmul>
 800b7fc:	4b84      	ldr	r3, [pc, #528]	; (800ba10 <__kernel_rem_pio2+0x698>)
 800b7fe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b802:	2200      	movs	r2, #0
 800b804:	4630      	mov	r0, r6
 800b806:	4639      	mov	r1, r7
 800b808:	f7f4 ff06 	bl	8000618 <__aeabi_dmul>
 800b80c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b810:	4606      	mov	r6, r0
 800b812:	460f      	mov	r7, r1
 800b814:	e70f      	b.n	800b636 <__kernel_rem_pio2+0x2be>
 800b816:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b81a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b81e:	f7f4 fefb 	bl	8000618 <__aeabi_dmul>
 800b822:	4602      	mov	r2, r0
 800b824:	460b      	mov	r3, r1
 800b826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b82a:	f7f4 fd3f 	bl	80002ac <__adddf3>
 800b82e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b832:	f108 0801 	add.w	r8, r8, #1
 800b836:	9b02      	ldr	r3, [sp, #8]
 800b838:	4598      	cmp	r8, r3
 800b83a:	dc01      	bgt.n	800b840 <__kernel_rem_pio2+0x4c8>
 800b83c:	45b8      	cmp	r8, r7
 800b83e:	ddea      	ble.n	800b816 <__kernel_rem_pio2+0x49e>
 800b840:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b844:	ab4a      	add	r3, sp, #296	; 0x128
 800b846:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b84a:	ed87 7b00 	vstr	d7, [r7]
 800b84e:	3e01      	subs	r6, #1
 800b850:	e6f8      	b.n	800b644 <__kernel_rem_pio2+0x2cc>
 800b852:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b854:	2b02      	cmp	r3, #2
 800b856:	dc0b      	bgt.n	800b870 <__kernel_rem_pio2+0x4f8>
 800b858:	2b00      	cmp	r3, #0
 800b85a:	dc35      	bgt.n	800b8c8 <__kernel_rem_pio2+0x550>
 800b85c:	d059      	beq.n	800b912 <__kernel_rem_pio2+0x59a>
 800b85e:	9b04      	ldr	r3, [sp, #16]
 800b860:	f003 0007 	and.w	r0, r3, #7
 800b864:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b868:	ecbd 8b02 	vpop	{d8}
 800b86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b870:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b872:	2b03      	cmp	r3, #3
 800b874:	d1f3      	bne.n	800b85e <__kernel_rem_pio2+0x4e6>
 800b876:	ab4a      	add	r3, sp, #296	; 0x128
 800b878:	4423      	add	r3, r4
 800b87a:	9306      	str	r3, [sp, #24]
 800b87c:	461c      	mov	r4, r3
 800b87e:	469a      	mov	sl, r3
 800b880:	9502      	str	r5, [sp, #8]
 800b882:	9b02      	ldr	r3, [sp, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	f1aa 0a08 	sub.w	sl, sl, #8
 800b88a:	dc6b      	bgt.n	800b964 <__kernel_rem_pio2+0x5ec>
 800b88c:	46aa      	mov	sl, r5
 800b88e:	f1ba 0f01 	cmp.w	sl, #1
 800b892:	f1a4 0408 	sub.w	r4, r4, #8
 800b896:	f300 8085 	bgt.w	800b9a4 <__kernel_rem_pio2+0x62c>
 800b89a:	9c06      	ldr	r4, [sp, #24]
 800b89c:	2000      	movs	r0, #0
 800b89e:	3408      	adds	r4, #8
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	2d01      	cmp	r5, #1
 800b8a4:	f300 809d 	bgt.w	800b9e2 <__kernel_rem_pio2+0x66a>
 800b8a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b8ac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b8b0:	f1bb 0f00 	cmp.w	fp, #0
 800b8b4:	f040 809b 	bne.w	800b9ee <__kernel_rem_pio2+0x676>
 800b8b8:	9b01      	ldr	r3, [sp, #4]
 800b8ba:	e9c3 5600 	strd	r5, r6, [r3]
 800b8be:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b8c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b8c6:	e7ca      	b.n	800b85e <__kernel_rem_pio2+0x4e6>
 800b8c8:	3408      	adds	r4, #8
 800b8ca:	ab4a      	add	r3, sp, #296	; 0x128
 800b8cc:	441c      	add	r4, r3
 800b8ce:	462e      	mov	r6, r5
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	2e00      	cmp	r6, #0
 800b8d6:	da36      	bge.n	800b946 <__kernel_rem_pio2+0x5ce>
 800b8d8:	f1bb 0f00 	cmp.w	fp, #0
 800b8dc:	d039      	beq.n	800b952 <__kernel_rem_pio2+0x5da>
 800b8de:	4602      	mov	r2, r0
 800b8e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8e4:	9c01      	ldr	r4, [sp, #4]
 800b8e6:	e9c4 2300 	strd	r2, r3, [r4]
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b8f2:	f7f4 fcd9 	bl	80002a8 <__aeabi_dsub>
 800b8f6:	ae4c      	add	r6, sp, #304	; 0x130
 800b8f8:	2401      	movs	r4, #1
 800b8fa:	42a5      	cmp	r5, r4
 800b8fc:	da2c      	bge.n	800b958 <__kernel_rem_pio2+0x5e0>
 800b8fe:	f1bb 0f00 	cmp.w	fp, #0
 800b902:	d002      	beq.n	800b90a <__kernel_rem_pio2+0x592>
 800b904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b908:	4619      	mov	r1, r3
 800b90a:	9b01      	ldr	r3, [sp, #4]
 800b90c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b910:	e7a5      	b.n	800b85e <__kernel_rem_pio2+0x4e6>
 800b912:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b916:	eb0d 0403 	add.w	r4, sp, r3
 800b91a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b91e:	2000      	movs	r0, #0
 800b920:	2100      	movs	r1, #0
 800b922:	2d00      	cmp	r5, #0
 800b924:	da09      	bge.n	800b93a <__kernel_rem_pio2+0x5c2>
 800b926:	f1bb 0f00 	cmp.w	fp, #0
 800b92a:	d002      	beq.n	800b932 <__kernel_rem_pio2+0x5ba>
 800b92c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b930:	4619      	mov	r1, r3
 800b932:	9b01      	ldr	r3, [sp, #4]
 800b934:	e9c3 0100 	strd	r0, r1, [r3]
 800b938:	e791      	b.n	800b85e <__kernel_rem_pio2+0x4e6>
 800b93a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b93e:	f7f4 fcb5 	bl	80002ac <__adddf3>
 800b942:	3d01      	subs	r5, #1
 800b944:	e7ed      	b.n	800b922 <__kernel_rem_pio2+0x5aa>
 800b946:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b94a:	f7f4 fcaf 	bl	80002ac <__adddf3>
 800b94e:	3e01      	subs	r6, #1
 800b950:	e7c0      	b.n	800b8d4 <__kernel_rem_pio2+0x55c>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	e7c5      	b.n	800b8e4 <__kernel_rem_pio2+0x56c>
 800b958:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b95c:	f7f4 fca6 	bl	80002ac <__adddf3>
 800b960:	3401      	adds	r4, #1
 800b962:	e7ca      	b.n	800b8fa <__kernel_rem_pio2+0x582>
 800b964:	e9da 8900 	ldrd	r8, r9, [sl]
 800b968:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b96c:	9b02      	ldr	r3, [sp, #8]
 800b96e:	3b01      	subs	r3, #1
 800b970:	9302      	str	r3, [sp, #8]
 800b972:	4632      	mov	r2, r6
 800b974:	463b      	mov	r3, r7
 800b976:	4640      	mov	r0, r8
 800b978:	4649      	mov	r1, r9
 800b97a:	f7f4 fc97 	bl	80002ac <__adddf3>
 800b97e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	4640      	mov	r0, r8
 800b988:	4649      	mov	r1, r9
 800b98a:	f7f4 fc8d 	bl	80002a8 <__aeabi_dsub>
 800b98e:	4632      	mov	r2, r6
 800b990:	463b      	mov	r3, r7
 800b992:	f7f4 fc8b 	bl	80002ac <__adddf3>
 800b996:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b99a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b99e:	ed8a 7b00 	vstr	d7, [sl]
 800b9a2:	e76e      	b.n	800b882 <__kernel_rem_pio2+0x50a>
 800b9a4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b9a8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b9ac:	4640      	mov	r0, r8
 800b9ae:	4632      	mov	r2, r6
 800b9b0:	463b      	mov	r3, r7
 800b9b2:	4649      	mov	r1, r9
 800b9b4:	f7f4 fc7a 	bl	80002ac <__adddf3>
 800b9b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4640      	mov	r0, r8
 800b9c2:	4649      	mov	r1, r9
 800b9c4:	f7f4 fc70 	bl	80002a8 <__aeabi_dsub>
 800b9c8:	4632      	mov	r2, r6
 800b9ca:	463b      	mov	r3, r7
 800b9cc:	f7f4 fc6e 	bl	80002ac <__adddf3>
 800b9d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b9d8:	ed84 7b00 	vstr	d7, [r4]
 800b9dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9e0:	e755      	b.n	800b88e <__kernel_rem_pio2+0x516>
 800b9e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b9e6:	f7f4 fc61 	bl	80002ac <__adddf3>
 800b9ea:	3d01      	subs	r5, #1
 800b9ec:	e759      	b.n	800b8a2 <__kernel_rem_pio2+0x52a>
 800b9ee:	9b01      	ldr	r3, [sp, #4]
 800b9f0:	9a01      	ldr	r2, [sp, #4]
 800b9f2:	601d      	str	r5, [r3, #0]
 800b9f4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b9f8:	605c      	str	r4, [r3, #4]
 800b9fa:	609f      	str	r7, [r3, #8]
 800b9fc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ba00:	60d3      	str	r3, [r2, #12]
 800ba02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba06:	6110      	str	r0, [r2, #16]
 800ba08:	6153      	str	r3, [r2, #20]
 800ba0a:	e728      	b.n	800b85e <__kernel_rem_pio2+0x4e6>
 800ba0c:	41700000 	.word	0x41700000
 800ba10:	3e700000 	.word	0x3e700000
 800ba14:	00000000 	.word	0x00000000

0800ba18 <__kernel_sin>:
 800ba18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba1c:	ed2d 8b04 	vpush	{d8-d9}
 800ba20:	eeb0 8a41 	vmov.f32	s16, s2
 800ba24:	eef0 8a61 	vmov.f32	s17, s3
 800ba28:	ec55 4b10 	vmov	r4, r5, d0
 800ba2c:	b083      	sub	sp, #12
 800ba2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ba36:	9001      	str	r0, [sp, #4]
 800ba38:	da06      	bge.n	800ba48 <__kernel_sin+0x30>
 800ba3a:	ee10 0a10 	vmov	r0, s0
 800ba3e:	4629      	mov	r1, r5
 800ba40:	f7f5 f89a 	bl	8000b78 <__aeabi_d2iz>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d051      	beq.n	800baec <__kernel_sin+0xd4>
 800ba48:	4622      	mov	r2, r4
 800ba4a:	462b      	mov	r3, r5
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	4629      	mov	r1, r5
 800ba50:	f7f4 fde2 	bl	8000618 <__aeabi_dmul>
 800ba54:	4682      	mov	sl, r0
 800ba56:	468b      	mov	fp, r1
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	4629      	mov	r1, r5
 800ba60:	f7f4 fdda 	bl	8000618 <__aeabi_dmul>
 800ba64:	a341      	add	r3, pc, #260	; (adr r3, 800bb6c <__kernel_sin+0x154>)
 800ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6a:	4680      	mov	r8, r0
 800ba6c:	4689      	mov	r9, r1
 800ba6e:	4650      	mov	r0, sl
 800ba70:	4659      	mov	r1, fp
 800ba72:	f7f4 fdd1 	bl	8000618 <__aeabi_dmul>
 800ba76:	a33f      	add	r3, pc, #252	; (adr r3, 800bb74 <__kernel_sin+0x15c>)
 800ba78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7c:	f7f4 fc14 	bl	80002a8 <__aeabi_dsub>
 800ba80:	4652      	mov	r2, sl
 800ba82:	465b      	mov	r3, fp
 800ba84:	f7f4 fdc8 	bl	8000618 <__aeabi_dmul>
 800ba88:	a33c      	add	r3, pc, #240	; (adr r3, 800bb7c <__kernel_sin+0x164>)
 800ba8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8e:	f7f4 fc0d 	bl	80002ac <__adddf3>
 800ba92:	4652      	mov	r2, sl
 800ba94:	465b      	mov	r3, fp
 800ba96:	f7f4 fdbf 	bl	8000618 <__aeabi_dmul>
 800ba9a:	a33a      	add	r3, pc, #232	; (adr r3, 800bb84 <__kernel_sin+0x16c>)
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	f7f4 fc02 	bl	80002a8 <__aeabi_dsub>
 800baa4:	4652      	mov	r2, sl
 800baa6:	465b      	mov	r3, fp
 800baa8:	f7f4 fdb6 	bl	8000618 <__aeabi_dmul>
 800baac:	a337      	add	r3, pc, #220	; (adr r3, 800bb8c <__kernel_sin+0x174>)
 800baae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab2:	f7f4 fbfb 	bl	80002ac <__adddf3>
 800bab6:	9b01      	ldr	r3, [sp, #4]
 800bab8:	4606      	mov	r6, r0
 800baba:	460f      	mov	r7, r1
 800babc:	b9eb      	cbnz	r3, 800bafa <__kernel_sin+0xe2>
 800babe:	4602      	mov	r2, r0
 800bac0:	460b      	mov	r3, r1
 800bac2:	4650      	mov	r0, sl
 800bac4:	4659      	mov	r1, fp
 800bac6:	f7f4 fda7 	bl	8000618 <__aeabi_dmul>
 800baca:	a325      	add	r3, pc, #148	; (adr r3, 800bb60 <__kernel_sin+0x148>)
 800bacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad0:	f7f4 fbea 	bl	80002a8 <__aeabi_dsub>
 800bad4:	4642      	mov	r2, r8
 800bad6:	464b      	mov	r3, r9
 800bad8:	f7f4 fd9e 	bl	8000618 <__aeabi_dmul>
 800badc:	4602      	mov	r2, r0
 800bade:	460b      	mov	r3, r1
 800bae0:	4620      	mov	r0, r4
 800bae2:	4629      	mov	r1, r5
 800bae4:	f7f4 fbe2 	bl	80002ac <__adddf3>
 800bae8:	4604      	mov	r4, r0
 800baea:	460d      	mov	r5, r1
 800baec:	ec45 4b10 	vmov	d0, r4, r5
 800baf0:	b003      	add	sp, #12
 800baf2:	ecbd 8b04 	vpop	{d8-d9}
 800baf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bafa:	4b1b      	ldr	r3, [pc, #108]	; (800bb68 <__kernel_sin+0x150>)
 800bafc:	ec51 0b18 	vmov	r0, r1, d8
 800bb00:	2200      	movs	r2, #0
 800bb02:	f7f4 fd89 	bl	8000618 <__aeabi_dmul>
 800bb06:	4632      	mov	r2, r6
 800bb08:	ec41 0b19 	vmov	d9, r0, r1
 800bb0c:	463b      	mov	r3, r7
 800bb0e:	4640      	mov	r0, r8
 800bb10:	4649      	mov	r1, r9
 800bb12:	f7f4 fd81 	bl	8000618 <__aeabi_dmul>
 800bb16:	4602      	mov	r2, r0
 800bb18:	460b      	mov	r3, r1
 800bb1a:	ec51 0b19 	vmov	r0, r1, d9
 800bb1e:	f7f4 fbc3 	bl	80002a8 <__aeabi_dsub>
 800bb22:	4652      	mov	r2, sl
 800bb24:	465b      	mov	r3, fp
 800bb26:	f7f4 fd77 	bl	8000618 <__aeabi_dmul>
 800bb2a:	ec53 2b18 	vmov	r2, r3, d8
 800bb2e:	f7f4 fbbb 	bl	80002a8 <__aeabi_dsub>
 800bb32:	a30b      	add	r3, pc, #44	; (adr r3, 800bb60 <__kernel_sin+0x148>)
 800bb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb38:	4606      	mov	r6, r0
 800bb3a:	460f      	mov	r7, r1
 800bb3c:	4640      	mov	r0, r8
 800bb3e:	4649      	mov	r1, r9
 800bb40:	f7f4 fd6a 	bl	8000618 <__aeabi_dmul>
 800bb44:	4602      	mov	r2, r0
 800bb46:	460b      	mov	r3, r1
 800bb48:	4630      	mov	r0, r6
 800bb4a:	4639      	mov	r1, r7
 800bb4c:	f7f4 fbae 	bl	80002ac <__adddf3>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4620      	mov	r0, r4
 800bb56:	4629      	mov	r1, r5
 800bb58:	f7f4 fba6 	bl	80002a8 <__aeabi_dsub>
 800bb5c:	e7c4      	b.n	800bae8 <__kernel_sin+0xd0>
 800bb5e:	bf00      	nop
 800bb60:	55555549 	.word	0x55555549
 800bb64:	3fc55555 	.word	0x3fc55555
 800bb68:	3fe00000 	.word	0x3fe00000
 800bb6c:	5acfd57c 	.word	0x5acfd57c
 800bb70:	3de5d93a 	.word	0x3de5d93a
 800bb74:	8a2b9ceb 	.word	0x8a2b9ceb
 800bb78:	3e5ae5e6 	.word	0x3e5ae5e6
 800bb7c:	57b1fe7d 	.word	0x57b1fe7d
 800bb80:	3ec71de3 	.word	0x3ec71de3
 800bb84:	19c161d5 	.word	0x19c161d5
 800bb88:	3f2a01a0 	.word	0x3f2a01a0
 800bb8c:	1110f8a6 	.word	0x1110f8a6
 800bb90:	3f811111 	.word	0x3f811111

0800bb94 <fabs>:
 800bb94:	ec51 0b10 	vmov	r0, r1, d0
 800bb98:	ee10 2a10 	vmov	r2, s0
 800bb9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bba0:	ec43 2b10 	vmov	d0, r2, r3
 800bba4:	4770      	bx	lr
	...

0800bba8 <floor>:
 800bba8:	ec51 0b10 	vmov	r0, r1, d0
 800bbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bbb4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bbb8:	2e13      	cmp	r6, #19
 800bbba:	ee10 5a10 	vmov	r5, s0
 800bbbe:	ee10 8a10 	vmov	r8, s0
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	dc32      	bgt.n	800bc2c <floor+0x84>
 800bbc6:	2e00      	cmp	r6, #0
 800bbc8:	da14      	bge.n	800bbf4 <floor+0x4c>
 800bbca:	a333      	add	r3, pc, #204	; (adr r3, 800bc98 <floor+0xf0>)
 800bbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd0:	f7f4 fb6c 	bl	80002ac <__adddf3>
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f7f4 ffae 	bl	8000b38 <__aeabi_dcmpgt>
 800bbdc:	b138      	cbz	r0, 800bbee <floor+0x46>
 800bbde:	2c00      	cmp	r4, #0
 800bbe0:	da57      	bge.n	800bc92 <floor+0xea>
 800bbe2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bbe6:	431d      	orrs	r5, r3
 800bbe8:	d001      	beq.n	800bbee <floor+0x46>
 800bbea:	4c2d      	ldr	r4, [pc, #180]	; (800bca0 <floor+0xf8>)
 800bbec:	2500      	movs	r5, #0
 800bbee:	4621      	mov	r1, r4
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	e025      	b.n	800bc40 <floor+0x98>
 800bbf4:	4f2b      	ldr	r7, [pc, #172]	; (800bca4 <floor+0xfc>)
 800bbf6:	4137      	asrs	r7, r6
 800bbf8:	ea01 0307 	and.w	r3, r1, r7
 800bbfc:	4303      	orrs	r3, r0
 800bbfe:	d01f      	beq.n	800bc40 <floor+0x98>
 800bc00:	a325      	add	r3, pc, #148	; (adr r3, 800bc98 <floor+0xf0>)
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	f7f4 fb51 	bl	80002ac <__adddf3>
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	f7f4 ff93 	bl	8000b38 <__aeabi_dcmpgt>
 800bc12:	2800      	cmp	r0, #0
 800bc14:	d0eb      	beq.n	800bbee <floor+0x46>
 800bc16:	2c00      	cmp	r4, #0
 800bc18:	bfbe      	ittt	lt
 800bc1a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bc1e:	fa43 f606 	asrlt.w	r6, r3, r6
 800bc22:	19a4      	addlt	r4, r4, r6
 800bc24:	ea24 0407 	bic.w	r4, r4, r7
 800bc28:	2500      	movs	r5, #0
 800bc2a:	e7e0      	b.n	800bbee <floor+0x46>
 800bc2c:	2e33      	cmp	r6, #51	; 0x33
 800bc2e:	dd0b      	ble.n	800bc48 <floor+0xa0>
 800bc30:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bc34:	d104      	bne.n	800bc40 <floor+0x98>
 800bc36:	ee10 2a10 	vmov	r2, s0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	f7f4 fb36 	bl	80002ac <__adddf3>
 800bc40:	ec41 0b10 	vmov	d0, r0, r1
 800bc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc48:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bc4c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc50:	fa23 f707 	lsr.w	r7, r3, r7
 800bc54:	4207      	tst	r7, r0
 800bc56:	d0f3      	beq.n	800bc40 <floor+0x98>
 800bc58:	a30f      	add	r3, pc, #60	; (adr r3, 800bc98 <floor+0xf0>)
 800bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5e:	f7f4 fb25 	bl	80002ac <__adddf3>
 800bc62:	2200      	movs	r2, #0
 800bc64:	2300      	movs	r3, #0
 800bc66:	f7f4 ff67 	bl	8000b38 <__aeabi_dcmpgt>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	d0bf      	beq.n	800bbee <floor+0x46>
 800bc6e:	2c00      	cmp	r4, #0
 800bc70:	da02      	bge.n	800bc78 <floor+0xd0>
 800bc72:	2e14      	cmp	r6, #20
 800bc74:	d103      	bne.n	800bc7e <floor+0xd6>
 800bc76:	3401      	adds	r4, #1
 800bc78:	ea25 0507 	bic.w	r5, r5, r7
 800bc7c:	e7b7      	b.n	800bbee <floor+0x46>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bc84:	fa03 f606 	lsl.w	r6, r3, r6
 800bc88:	4435      	add	r5, r6
 800bc8a:	4545      	cmp	r5, r8
 800bc8c:	bf38      	it	cc
 800bc8e:	18e4      	addcc	r4, r4, r3
 800bc90:	e7f2      	b.n	800bc78 <floor+0xd0>
 800bc92:	2500      	movs	r5, #0
 800bc94:	462c      	mov	r4, r5
 800bc96:	e7aa      	b.n	800bbee <floor+0x46>
 800bc98:	8800759c 	.word	0x8800759c
 800bc9c:	7e37e43c 	.word	0x7e37e43c
 800bca0:	bff00000 	.word	0xbff00000
 800bca4:	000fffff 	.word	0x000fffff

0800bca8 <scalbn>:
 800bca8:	b570      	push	{r4, r5, r6, lr}
 800bcaa:	ec55 4b10 	vmov	r4, r5, d0
 800bcae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	462b      	mov	r3, r5
 800bcb6:	b99a      	cbnz	r2, 800bce0 <scalbn+0x38>
 800bcb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bcbc:	4323      	orrs	r3, r4
 800bcbe:	d036      	beq.n	800bd2e <scalbn+0x86>
 800bcc0:	4b39      	ldr	r3, [pc, #228]	; (800bda8 <scalbn+0x100>)
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	ee10 0a10 	vmov	r0, s0
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f7f4 fca5 	bl	8000618 <__aeabi_dmul>
 800bcce:	4b37      	ldr	r3, [pc, #220]	; (800bdac <scalbn+0x104>)
 800bcd0:	429e      	cmp	r6, r3
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	da10      	bge.n	800bcfa <scalbn+0x52>
 800bcd8:	a32b      	add	r3, pc, #172	; (adr r3, 800bd88 <scalbn+0xe0>)
 800bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcde:	e03a      	b.n	800bd56 <scalbn+0xae>
 800bce0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bce4:	428a      	cmp	r2, r1
 800bce6:	d10c      	bne.n	800bd02 <scalbn+0x5a>
 800bce8:	ee10 2a10 	vmov	r2, s0
 800bcec:	4620      	mov	r0, r4
 800bcee:	4629      	mov	r1, r5
 800bcf0:	f7f4 fadc 	bl	80002ac <__adddf3>
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	460d      	mov	r5, r1
 800bcf8:	e019      	b.n	800bd2e <scalbn+0x86>
 800bcfa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bcfe:	460b      	mov	r3, r1
 800bd00:	3a36      	subs	r2, #54	; 0x36
 800bd02:	4432      	add	r2, r6
 800bd04:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bd08:	428a      	cmp	r2, r1
 800bd0a:	dd08      	ble.n	800bd1e <scalbn+0x76>
 800bd0c:	2d00      	cmp	r5, #0
 800bd0e:	a120      	add	r1, pc, #128	; (adr r1, 800bd90 <scalbn+0xe8>)
 800bd10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd14:	da1c      	bge.n	800bd50 <scalbn+0xa8>
 800bd16:	a120      	add	r1, pc, #128	; (adr r1, 800bd98 <scalbn+0xf0>)
 800bd18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd1c:	e018      	b.n	800bd50 <scalbn+0xa8>
 800bd1e:	2a00      	cmp	r2, #0
 800bd20:	dd08      	ble.n	800bd34 <scalbn+0x8c>
 800bd22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bd2e:	ec45 4b10 	vmov	d0, r4, r5
 800bd32:	bd70      	pop	{r4, r5, r6, pc}
 800bd34:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bd38:	da19      	bge.n	800bd6e <scalbn+0xc6>
 800bd3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bd3e:	429e      	cmp	r6, r3
 800bd40:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bd44:	dd0a      	ble.n	800bd5c <scalbn+0xb4>
 800bd46:	a112      	add	r1, pc, #72	; (adr r1, 800bd90 <scalbn+0xe8>)
 800bd48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1e2      	bne.n	800bd16 <scalbn+0x6e>
 800bd50:	a30f      	add	r3, pc, #60	; (adr r3, 800bd90 <scalbn+0xe8>)
 800bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd56:	f7f4 fc5f 	bl	8000618 <__aeabi_dmul>
 800bd5a:	e7cb      	b.n	800bcf4 <scalbn+0x4c>
 800bd5c:	a10a      	add	r1, pc, #40	; (adr r1, 800bd88 <scalbn+0xe0>)
 800bd5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d0b8      	beq.n	800bcd8 <scalbn+0x30>
 800bd66:	a10e      	add	r1, pc, #56	; (adr r1, 800bda0 <scalbn+0xf8>)
 800bd68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd6c:	e7b4      	b.n	800bcd8 <scalbn+0x30>
 800bd6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd72:	3236      	adds	r2, #54	; 0x36
 800bd74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	4b0c      	ldr	r3, [pc, #48]	; (800bdb0 <scalbn+0x108>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	e7e8      	b.n	800bd56 <scalbn+0xae>
 800bd84:	f3af 8000 	nop.w
 800bd88:	c2f8f359 	.word	0xc2f8f359
 800bd8c:	01a56e1f 	.word	0x01a56e1f
 800bd90:	8800759c 	.word	0x8800759c
 800bd94:	7e37e43c 	.word	0x7e37e43c
 800bd98:	8800759c 	.word	0x8800759c
 800bd9c:	fe37e43c 	.word	0xfe37e43c
 800bda0:	c2f8f359 	.word	0xc2f8f359
 800bda4:	81a56e1f 	.word	0x81a56e1f
 800bda8:	43500000 	.word	0x43500000
 800bdac:	ffff3cb0 	.word	0xffff3cb0
 800bdb0:	3c900000 	.word	0x3c900000

0800bdb4 <_init>:
 800bdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb6:	bf00      	nop
 800bdb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdba:	bc08      	pop	{r3}
 800bdbc:	469e      	mov	lr, r3
 800bdbe:	4770      	bx	lr

0800bdc0 <_fini>:
 800bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc2:	bf00      	nop
 800bdc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdc6:	bc08      	pop	{r3}
 800bdc8:	469e      	mov	lr, r3
 800bdca:	4770      	bx	lr
